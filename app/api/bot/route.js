// app/api/bot/route.js - VERSI√ìN FINAL CORREGIDA Y COMPLETA
import { NextResponse } from 'next/server';
import whatsAppService from '../../../lib/whatsapp-service';

// Estado de sesiones en memoria
const sessions = {};

// Saludos simples para detecci√≥n
const saludosSimples = [
  "hola","buenas","buenos dias","buenos d√≠as","buenas tardes","buenas noches",
  "hey","ey","qu√© tal","que tal","holi","holis","hello","saludos"
];

// üÜï FUNCI√ìN PARA FILTRAR SOLO FECHAS FUTURAS
function filterFutureDates(records) {
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  
  return records.filter(record => {
    const fields = record.fields || {};
    const fechaStr = fields.Fecha;
    
    if (!fechaStr) return false;
    
    // Convertir fecha del registro a objeto Date
    const recordDate = new Date(fechaStr);
    
    // Solo incluir si la fecha es hoy o futura
    return recordDate >= today;
  });
}

// üÜï FUNCI√ìN PARA FORMATEAR FECHA A DD-MM-YYYY
function formatSpanishDate(dateStr) {
  if (!dateStr) return dateStr;
  
  try {
    const date = new Date(dateStr);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    
    return `${day}-${month}-${year}`;
  } catch (error) {
    console.error('Error formateando fecha:', error);
    return dateStr; // Fallback al formato original
  }
}

// Funci√≥n para detectar saludo simple
function esSaludoSimple(text) {
  if (!text) return false;
  const limpio = text.trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"");
  
  // Si contiene s√≠ntomas o palabras m√©dicas, NO es saludo simple
  const palabrasMedicas = [
    "dolor", "duele", "molestia", "sintoma", "s√≠ntoma", "vision", "visi√≥n", 
    "ojo", "ojos", "cabeza", "pecho", "estomago", "est√≥mago", "fiebre", 
    "mareo", "nausea", "n√°usea", "cansancio", "fatiga", "tos", "gripe",
    "resfriado", "alergia", "picazon", "picaz√≥n", "roncha", "sarpullido",
    "medico", "m√©dico", "doctor", "especialista", "consulta", "cita", "hora",
    "urgente", "emergencia", "necesito", "busco", "quiero", "tengo", "siento",
    "me duele", "me pica", "veo", "no veo", "borrosa", "borroso", "manchas",
    "flotantes", "rojo", "irritado", "lagrimeo", "ardor", "quemaz√≥n"
  ];
  
  const contieneTerminoMedico = palabrasMedicas.some(palabra => 
    limpio.includes(palabra.toLowerCase())
  );
  
  if (contieneTerminoMedico) return false;
  
  return saludosSimples.includes(limpio);
}

// Funci√≥n para validar RUT chileno - MEJORADA para aceptar puntos y guiones
function validarRUT(rut) {
  if (!rut || typeof rut !== 'string') return false;
  
  const rutOriginal = rut.trim();
  console.log('üÜî Validando RUT original:', rutOriginal);
  
  // Limpiar RUT: eliminar puntos, guiones y espacios, convertir a may√∫sculas
  rut = rut.replace(/[\.\-\s]/g, '').toUpperCase();
  console.log('üÜî RUT limpio:', rut);
  
  // Verificar formato b√°sico: al menos 8 d√≠gitos + d√≠gito verificador (n√∫mero o K)
  if (!/^[0-9]{7,8}[0-9K]$/.test(rut)) {
    console.log('‚ùå RUT no cumple formato b√°sico');
    return false;
  }
  
  // Validar longitud (m√≠nimo 8, m√°ximo 9 caracteres)
  if (rut.length < 8 || rut.length > 9) {
    console.log('‚ùå RUT longitud incorrecta:', rut.length);
    return false;
  }
  
  const cuerpo = rut.slice(0, -1);
  const dv = rut.slice(-1);
  
  console.log('üÜî Cuerpo:', cuerpo, 'DV:', dv);
  
  let suma = 0;
  let multiplicador = 2;
  
  for (let i = cuerpo.length - 1; i >= 0; i--) {
    suma += parseInt(cuerpo[i]) * multiplicador;
    multiplicador = multiplicador < 7 ? multiplicador + 1 : 2;
  }
  
  const dvCalculado = 11 - (suma % 11);
  let dvEsperado;
  
  if (dvCalculado === 11) dvEsperado = '0';
  else if (dvCalculado === 10) dvEsperado = 'K';
  else dvEsperado = dvCalculado.toString();
  
  console.log('üÜî DV esperado:', dvEsperado, 'DV ingresado:', dv);
  
  const esValido = dv === dvEsperado;
  console.log('üÜî RUT v√°lido:', esValido);
  
  return esValido;
}

// üÜï FUNCIONES DE VALIDACI√ìN INTELIGENTE

// Detectar si el usuario confunde RUT con tel√©fono
function esFormatoTelefono(text) {
  const cleaned = text.replace(/[^\d+]/g, '');
  return (cleaned.startsWith('+56') && cleaned.length >= 11) || 
         (cleaned.startsWith('56') && cleaned.length >= 10) ||
         (cleaned.startsWith('9') && cleaned.length === 9) ||
         (cleaned.length === 8 && /^\d+$/.test(cleaned));
}

// Detectar si el usuario confunde tel√©fono con RUT  
function esFormatoRUT(text) {
  if (!text || typeof text !== 'string') return false;
  
  // Usar la misma l√≥gica de limpieza que validarRUT
  const cleaned = text.replace(/[\.\-\s]/g, '').toUpperCase();
  console.log('üîç Detectando formato RUT:', text, '‚Üí', cleaned);
  
  // Verificar que parece un RUT pero no es tel√©fono
  const pareceRUT = /^[0-9]{7,8}[0-9K]$/.test(cleaned);
  const esRUT = pareceRUT && !esFormatoTelefono(text);
  
  console.log('üîç Parece RUT:', pareceRUT, 'Es RUT (no tel√©fono):', esRUT);
  return esRUT;
}

// Validar tel√©fono chileno m√°s inteligentemente
function validarTelefono(telefono) {
  const cleaned = telefono.replace(/[^\d+]/g, '');
  
  // Formatos v√°lidos:
  // +56912345678 (con +56)
  // 56912345678 (sin +)
  // 912345678 (solo celular)
  // 12345678 (tel√©fono fijo)
  
  if (cleaned.startsWith('+56')) {
    return cleaned.length >= 11 && cleaned.length <= 12;
  }
  if (cleaned.startsWith('56')) {
    return cleaned.length >= 10 && cleaned.length <= 11;
  }
  if (cleaned.startsWith('9')) {
    return cleaned.length === 9;
  }
  if (cleaned.length === 8 && /^\d+$/.test(cleaned)) {
    return true; // Tel√©fono fijo
  }
  
  return false;
}

// Validar email m√°s estricto
function validarEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email.trim());
}

// Validar edad
function validarEdad(edad) {
  const num = parseInt(edad);
  return !isNaN(num) && num >= 0 && num <= 120;
}

// Detectar confusiones entre campos y dar feedback espec√≠fico
function analizarConfusion(text, campoEsperado) {
  const mensajes = {
    rut: {
      esEmail: "Veo que ingresaste un email üìß. Necesito tu RUT primero.\n\nPor favor ingresa tu RUT con el formato: 12.345.678-9 o 12345678-9",
      esTelefono: "Parece un n√∫mero de tel√©fono üì±. Necesito tu RUT primero.\n\nPor favor ingresa tu RUT con el formato: 12.345.678-9 o 12345678-9", 
      general: "El RUT debe incluir el d√≠gito verificador con gui√≥n.\n\nFormatos v√°lidos:\n‚Ä¢ 12.345.678-9 (con puntos)\n‚Ä¢ 12345678-9 (sin puntos)\n\nPor favor ingresa tu RUT completo."
    },
    telefono: {
      esRUT: "Veo que ingresaste un RUT üÜî. Ya tengo tu RUT, ahora necesito tu tel√©fono.\n\nIngresa tu n√∫mero de tel√©fono: +56912345678",
      esEmail: "Parece un email üìß. Necesito tu tel√©fono primero.\n\nIngresa tu n√∫mero con formato: +56912345678",
      general: "Por favor ingresa un tel√©fono v√°lido.\n\nEjemplos: +56912345678 o 912345678"
    },
    email: {
      esRUT: "Veo que ingresaste un RUT üÜî. Ya tengo tus datos, ahora necesito tu email.\n\nIngresa tu email: nombre@email.com",
      esTelefono: "Parece un tel√©fono üì±. Ya tengo tu tel√©fono, ahora necesito tu email.\n\nIngresa tu email: nombre@email.com",
      general: "Por favor ingresa un email v√°lido.\n\nEjemplo: nombre@email.com"
    },
    edad: {
      general: "Por favor ingresa solo tu edad en n√∫meros.\n\nEjemplo: 25"
    }
  };

  if (campoEsperado === 'rut') {
    if (text.includes('@')) return mensajes.rut.esEmail;
    if (esFormatoTelefono(text)) return mensajes.rut.esTelefono;
    return mensajes.rut.general;
  }
  
  if (campoEsperado === 'telefono') {
    if (esFormatoRUT(text)) return mensajes.telefono.esRUT;
    if (text.includes('@')) return mensajes.telefono.esEmail;
    return mensajes.telefono.general;
  }
  
  if (campoEsperado === 'email') {
    if (esFormatoRUT(text)) return mensajes.email.esRUT;
    if (esFormatoTelefono(text)) return mensajes.email.esTelefono;
    return mensajes.email.general;
  }
  
  if (campoEsperado === 'edad') {
    return mensajes.edad.general;
  }
  
  return null;
}

// üÜï FUNCI√ìN PARA DETECTAR M√âDICO ESPEC√çFICO POR NOMBRE
function detectarMedicoEspecifico(text) {
  const textoLimpio = text.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"");
  
  // Patrones que indican b√∫squeda de m√©dico espec√≠fico
  const patronesMedico = [
    /\b(?:dr|doctor|dra|doctora)\.?\s+([a-z√°√©√≠√≥√∫√±]+(?:\s+[a-z√°√©√≠√≥√∫√±]+)*)/i,
    /\b(?:medico|m√©dico)\s+([a-z√°√©√≠√≥√∫√±]+(?:\s+[a-z√°√©√≠√≥√∫√±]+)*)/i,
    /\bhora\s+con\s+(?:dr|doctor|dra|doctora)\.?\s+([a-z√°√©√≠√≥√∫√±]+(?:\s+[a-z√°√©√≠√≥√∫√±]+)*)/i,
    /\bhora\s+con\s+(?:medico|m√©dico)\s+([a-z√°√©√≠√≥√∫√±]+(?:\s+[a-z√°√©√≠√≥√∫√±]+)*)/i,
    /\bnecesito\s+(?:dr|doctor|dra|doctora)\.?\s+([a-z√°√©√≠√≥√∫√±]+(?:\s+[a-z√°√©√≠√≥√∫√±]+)*)/i,
    /\bquiero\s+(?:dr|doctor|dra|doctora)\.?\s+([a-z√°√©√≠√≥√∫√±]+(?:\s+[a-z√°√©√≠√≥√∫√±]+)*)/i,
    /\bbusco\s+(?:dr|doctor|dra|doctora)\.?\s+([a-z√°√©√≠√≥√∫√±]+(?:\s+[a-z√°√©√≠√≥√∫√±]+)*)/i,
    /\btienes\s+sobrecupo\s+con\s+(?:dr|doctor|dra|doctora)\.?\s+([a-z√°√©√≠√≥√∫√±]+(?:\s+[a-z√°√©√≠√≥√∫√±]+)*)/i,
    /\btienen\s+sobrecupo\s+con\s+(?:dr|doctor|dra|doctora)\.?\s+([a-z√°√©√≠√≥√∫√±]+(?:\s+[a-z√°√©√≠√≥√∫√±]+)*)/i
  ];
  
  for (const patron of patronesMedico) {
    const match = text.match(patron);
    if (match && match[1]) {
      const nombreMedico = match[1].trim();
      console.log(`üîç M√©dico espec√≠fico detectado: "${nombreMedico}"`);
      return nombreMedico;
    }
  }
  
  return null;
}

// Funci√≥n para buscar m√©dico por nombre en Airtable
async function buscarMedicoPorNombre(nombreBuscado) {
  try {
    const AIRTABLE_API_KEY = process.env.AIRTABLE_API_KEY;
    const AIRTABLE_BASE_ID = process.env.AIRTABLE_BASE_ID;
    const AIRTABLE_DOCTORS_TABLE = process.env.AIRTABLE_DOCTORS_TABLE;

    const response = await fetch(
      `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_DOCTORS_TABLE}?maxRecords=100`,
      {
        headers: {
          Authorization: `Bearer ${AIRTABLE_API_KEY}`,
        },
      }
    );

    if (!response.ok) return null;

    const data = await response.json();
    const doctors = data.records || [];
    
    const nombreLimpio = nombreBuscado.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"");
    
    // Buscar coincidencia exacta o parcial
    const medicoEncontrado = doctors.find(doctor => {
      const nombreDoctor = (doctor.fields?.Name || '').toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"");
      
      // Coincidencia exacta
      if (nombreDoctor === nombreLimpio) return true;
      
      // Coincidencia por apellido o nombre
      const partesNombreBuscado = nombreLimpio.split(' ');
      const partesNombreDoctor = nombreDoctor.split(' ');
      
      return partesNombreBuscado.some(parte => 
        partesNombreDoctor.some(parteDoctor => 
          parte.length > 2 && parteDoctor.includes(parte)
        )
      );
    });

    if (medicoEncontrado) {
      console.log(`‚úÖ M√©dico encontrado: ${medicoEncontrado.fields?.Name}`);
      return {
        id: medicoEncontrado.id,
        name: medicoEncontrado.fields?.Name,
        especialidad: medicoEncontrado.fields?.Especialidad
      };
    }

    return null;
  } catch (error) {
    console.error('Error buscando m√©dico por nombre:', error);
    return null;
  }
}

// Funci√≥n para buscar sobrecupos del m√©dico espec√≠fico - VERSION CORREGIDA
async function buscarSobrecuposDeMedico(medicoId) {
  try {
    const AIRTABLE_API_KEY = process.env.AIRTABLE_API_KEY;
    const AIRTABLE_BASE_ID = process.env.AIRTABLE_BASE_ID;
    const AIRTABLE_TABLE_ID = process.env.AIRTABLE_TABLE_ID;

    console.log(`üîç Buscando sobrecupos para m√©dico ID: ${medicoId}`);

    // Usar b√∫squeda manual directa (M√âTODO QUE FUNCIONA 100%)
    const response = await fetch(
      `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_ID}?maxRecords=100`,
      {
        headers: {
          Authorization: `Bearer ${AIRTABLE_API_KEY}`,
        },
      }
    );
    
    if (!response.ok) {
      console.log(`‚ùå Error response: ${response.status}`);
      return [];
    }

    const data = await response.json();
    const allRecords = data.records || [];
    
    console.log(`üìä Total registros: ${allRecords.length}`);
    
    // Filtrar manualmente por m√©dico y disponibilidad
    const sobrecuposDelMedico = allRecords.filter(record => {
      const fields = record.fields || {};
      const disponible = fields.Disponible === "Si";
      const medico = fields.M√©dico; // Campo correcto con tilde
      const tienemedico = Array.isArray(medico) && medico.includes(medicoId);
      
      if (disponible && tienemedico) {
        console.log(`‚úÖ Sobrecupo encontrado: ${record.id} - ${fields.Fecha} ${fields.Hora} - ${fields.Cl√≠nica || fields.Clinica}`);
        return true;
      }
      
      return false;
    });
    
    console.log(`üìä Sobrecupos del m√©dico encontrados: ${sobrecuposDelMedico.length}`);
    
    // Filtrar solo fechas futuras
    const sobrecuposFuturos = filterFutureDates(sobrecuposDelMedico);
    console.log(`‚úÖ Sobrecupos futuros finales: ${sobrecuposFuturos.length}`);

    return sobrecuposFuturos;
  } catch (error) {
    console.error('‚ùå Error buscando sobrecupos del m√©dico:', error);
    return [];
  }
}

// Funci√≥n para detectar especialidad directa
function detectarEspecialidadDirecta(text) {
  const textoLimpio = text.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"");
  
  const especialidadesDirectas = {
    'reumatologo': 'Reumatolog√≠a', 'reumatologia': 'Reumatolog√≠a',
    'traumatologo': 'Traumatolog√≠a', 'traumatologia': 'Traumatolog√≠a',
    'oftalmologo': 'Oftalmolog√≠a', 'oftalmologia': 'Oftalmolog√≠a',
    'dermatologo': 'Dermatolog√≠a', 'dermatologia': 'Dermatolog√≠a',
    'pediatra': 'Pediatr√≠a', 'pediatria': 'Pediatr√≠a',
    'cardiologo': 'Cardiolog√≠a', 'cardiologia': 'Cardiolog√≠a',
    'neurologo': 'Neurolog√≠a', 'neurologia': 'Neurolog√≠a',
    'otorrino': 'Otorrinolaringolog√≠a', 'otorrinolaringologia': 'Otorrinolaringolog√≠a',
    'medicina familiar': 'Medicina Familiar', 'medico general': 'Medicina Familiar',
    'general': 'Medicina Familiar', 'familiar': 'Medicina Familiar',
    'medicina familiar ni√±os': 'Medicina Familiar Ni√±os', 'medicina familiar ninos': 'Medicina Familiar Ni√±os',
    'medico general ni√±os': 'Medicina Familiar Ni√±os', 'medico general ninos': 'Medicina Familiar Ni√±os',
    'medicina familiar adultos': 'Medicina Familiar Adultos', 'medico general adultos': 'Medicina Familiar Adultos',
    'urologo': 'Urolog√≠a', 'urologia': 'Urolog√≠a',
    'ginecologo': 'Ginecolog√≠a', 'ginecologia': 'Ginecolog√≠a',
    'psiquiatra': 'Psiquiatr√≠a', 'psiquiatria': 'Psiquiatr√≠a',
    'endocrinologo': 'Endocrinolog√≠a', 'endocrinologia': 'Endocrinolog√≠a'
  };
  
  for (const [key, value] of Object.entries(especialidadesDirectas)) {
    if (textoLimpio.includes(key)) return value;
  }
  return null;
}

// Funci√≥n para detectar consultas no m√©dicas
function esConsultaNoMedica(text) {
  const textoLimpio = text.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"");
  
  // Consultas de informaci√≥n general que NO son m√©dicas
  const consultasGenerales = [
    'que hora es', 'qu√© hora es', 'hora es', 'que dia es', 'qu√© d√≠a es',
    'como estas', 'c√≥mo est√°s', 'como te llamas', 'c√≥mo te llamas',
    'quien eres', 'qui√©n eres', 'que eres', 'qu√© eres',
    'donde estas', 'd√≥nde est√°s', 'de donde eres', 'de d√≥nde eres'
  ];
  
  // Si es una consulta general espec√≠fica, es no m√©dica
  for (const consulta of consultasGenerales) {
    if (textoLimpio.includes(consulta)) return true;
  }
  
  const temasCotidianos = [
    // Comida y bebidas
    'pizza', 'hamburguesa', 'sandwich', 'empanada', 'asado', 'completo', 'sopaipilla',
    'comida', 'restaurant', 'comer', 'almuerzo', 'cena', 'desayuno', 'once',
    'cafe', 'te', 'jugo', 'bebida', 'cerveza', 'vino', 'pisco',
    // Clima y tiempo
    'clima', 'tiempo', 'lluvia', 'sol', 'temperatura', 'frio', 'calor', 'nieve',
    // Deportes y entretenimiento
    'futbol', 'deporte', 'partido', 'equipo', 'gimnasio', 'ejercicio',
    'musica', 'cancion', 'cantante', 'banda', 'concierto',
    'pelicula', 'serie', 'netflix', 'television', 'youtube',
    // Trabajo y estudios
    'trabajo', 'jefe', 'oficina', 'reunion', 'sueldo', 'pega',
    'universidad', 'colegio', 'estudiar', 'examen', 'clase',
    // Viajes y lugares
    'viaje', 'vacaciones', 'hotel', 'avion', 'playa', 'campo', 'ciudad',
    // Dinero y compras
    'dinero', 'plata', 'banco', 'credito', 'comprar', 'tienda', 'mall',
    // Relaciones
    'amor', 'pareja', 'novia', 'novio', 'esposa', 'esposo', 'familia',
    // Transporte y tecnolog√≠a
    'auto', 'carro', 'vehiculo', 'manejar', 'micro', 'metro', 'uber', 'taxi', 'bus', 'colectivo',
    'computador', 'celular', 'telefono', 'internet', 'whatsapp', 'instagram', 'tiktok',
    // Vivienda y otros
    'casa', 'departamento', 'arriendo', 'mudanza', 'ropa', 'zapatos'
  ];
  
  // Si contiene alg√∫n tema cotidiano y NO contiene t√©rminos m√©dicos espec√≠ficos
  const contieneTemasCotidianos = temasCotidianos.some(tema => textoLimpio.includes(tema));
  
  // T√©rminos m√©dicos espec√≠ficos (removiendo "hora" para evitar conflictos)
  const terminosMedicos = [
    'dolor', 'duele', 'molestia', 'sintoma', 's√≠ntoma', 'vision', 'visi√≥n', 
    'ojo', 'ojos', 'cabeza', 'pecho', 'estomago', 'est√≥mago', 'fiebre', 
    'mareo', 'nausea', 'n√°usea', 'cansancio', 'fatiga', 'tos', 'gripe',
    'resfriado', 'alergia', 'picazon', 'picaz√≥n', 'roncha', 'sarpullido',
    'medico', 'm√©dico', 'doctor', 'especialista', 'consulta', 'cita',
    'urgente', 'emergencia', 'salud', 'enfermo', 'enferma', 'malestar',
    'sobrecupo', 'atencion medica', 'atenci√≥n m√©dica',
    // üÜï T√©rminos oftalmol√≥gicos espec√≠ficos
    'lentes', 'anteojos', 'gafas', 'control', 'revision', 'revisi√≥n',
    'examen vista', 'control vista', 'manchas flotantes', 'pican ojos'
  ];
  
  const contieneTerminosMedicos = terminosMedicos.some(termino => 
    textoLimpio.includes(termino.toLowerCase())
  );
  
  return contieneTemasCotidianos && !contieneTerminosMedicos;
}

// Funci√≥n para normalizar texto y corregir errores tipogr√°ficos comunes
function normalizarTextoMedico(text) {
  let textoNormalizado = text.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"");
  
  // Correcciones de errores tipogr√°ficos comunes en s√≠ntomas
  const correcciones = {
    // Cabeza y t√©rminos relacionados
    'cabezo': 'cabeza',
    'caveza': 'cabeza', 
    'cabesa': 'cabeza',
    'me duele el cabezo': 'me duele la cabeza',
    'dolor de cabezo': 'dolor de cabeza',
    'duele el cabezo': 'duele la cabeza',
    
    // Otros errores comunes
    'porfesionales': 'profesionales',
    'neurologo': 'neur√≥logo',
    'oftamologo': 'oftalm√≥logo',
    'oftalmologo': 'oftalm√≥logo',
    'dermatologo': 'dermat√≥logo',
    'cardiologo': 'cardi√≥logo',
    'picason': 'picaz√≥n',
    'comezon': 'comez√≥n',
    'vision': 'visi√≥n',
    'presion': 'presi√≥n'
  };
  
  // Aplicar correcciones
  Object.keys(correcciones).forEach(error => {
    const regex = new RegExp(error, 'gi');
    textoNormalizado = textoNormalizado.replace(regex, correcciones[error]);
  });
  
  return textoNormalizado;
}

// üî• FUNCI√ìN MEJORADA: Detectar especialidad por s√≠ntomas - CON FIX PARA OFTALMOLOG√çA
function detectarEspecialidadPorSintomas(text) {
  const textoLimpio = normalizarTextoMedico(text);
  
  // üîç S√çNTOMAS OFTALMOL√ìGICOS - EXPANDIDOS Y MEJORADOS + FRASES DIRECTAS
  const sintomasOftalmologia = [
    // Visi√≥n y problemas visuales
    'vision borrosa', 'visi√≥n borrosa', 'borrosa', 'borroso', 'veo borroso',
    'no veo bien', 'veo mal', 'veo doble', 'vision doble', 'visi√≥n doble',
    'manchas flotantes', 'moscas volantes', 'puntos negros', 'manchas en la vista',
    
    // üÜï FRASES DIRECTAS DE LAS TARJETAS DE EJEMPLO - FIX CR√çTICO
    'veo manchas flotantes', 'necesito control de lentes', 'control de lentes',
    'me pican los ojos', 'tengo el ojo irritado', 'ojo irritado',
    'revision de lentes', 'revisi√≥n de lentes', 'examen de vista',
    'control vista', 'control de vista', 'control ocular',
    
    // S√≠ntomas oculares espec√≠ficos  
    'ojo rojo', 'ojos rojos', 'irritado', 'irritados', 'ojos irritados',
    'ardor en los ojos', 'quemaz√≥n ojos', 'lagrimeo', 'lagrimean', 'ojo llora',
    'dolor de ojos', 'duelen los ojos', 'ojo duele', 'me duele el ojo',
    
    // S√≠ntomas relacionados con luz
    'sensible a la luz', 'fotofobia', 'molesta la luz', 'me molesta la luz',
    
    // Palabras clave oftalmol√≥gicas
    'graduacion', 'graduaci√≥n', 'lentes', 'anteojos', 'gafas', 'control',
    'revision ojos', 'revisi√≥n ojos', 'examen vista', 'control vista',
    
    // üÜï NUEVOS S√çNTOMAS ESPEC√çFICOS - INCLUYE "PICAN" - FIX CR√çTICO
    'ojos pican', 'picazon ojos', 'picaz√≥n ojos',
    'comezon ojos', 'comez√≥n ojos', 'pica el ojo', 'pican', 'picor ojos',
    'ojos secos', 'sequedad ocular', 'ojo seco',
    'inflamacion ojo', 'inflamaci√≥n ojo', 'hinchazon ojo', 'hinchaz√≥n ojo',
    'conjuntivitis', 'orzuelo', 'chalazion', 'chalaci√≥n'
  ];
  
  // S√≠ntomas dermatol√≥gicos - EXPANDIDO CON VARIANTES NATURALES
  const sintomasDermatologia = [
    'picazon piel', 'picaz√≥n piel', 'me pica la piel', 'comez√≥n piel', 'pica la piel',
    'me duele la piel', 'duele la piel', 'dolor en la piel',
    'sarpullido', 'roncha', 'ronchas', 'eruption', 'erupcion',
    'alergia piel', 'dermatitis', 'eczema', 'tengo alergia',
    'lunar', 'lunares', 'mancha piel', 'manchas piel', 'tengo manchas',
    'acne', 'acn√©', 'espinillas', 'granos', 'tengo acne', 'tengo granos'
  ];
  
  // S√≠ntomas cardiol√≥gicos - EXPANDIDO CON VARIANTES NATURALES
  const sintomasCardiologia = [
    'dolor pecho', 'duele pecho', 'me duele el pecho', 'duele el pecho',
    'opresion pecho', 'opresi√≥n pecho', 'presion en el pecho',
    'palpitaciones', 'taquicardia', 'corazon late rapido', 'coraz√≥n late r√°pido',
    'late rapido el corazon', 'late r√°pido el coraz√≥n',
    'falta aire', 'sin aire', 'me falta aire', 'no puedo respirar',
    'agitacion', 'agitaci√≥n', 'cansancio extremo', 'muy cansado'
  ];
  
  // S√≠ntomas neurol√≥gicos - EXPANDIDO CON VARIANTES "DUELE" Y CORRECCIONES TIPOGR√ÅFICAS
  const sintomasNeurologia = [
    'dolor cabeza', 'dolor de cabeza', 'me duele la cabeza', 'duele la cabeza', 
    'duele cabeza', 'cabeza duele', 'cefalea', 'migrana', 'migra√±a',
    // Incluir variantes tipogr√°ficas directamente
    'me duele el cabezo', 'dolor de cabezo', 'duele el cabezo', 'cabezo duele', 'cabezo',
    'me duele la cabezo', 'dolor cabezo', 'duele cabezo', 'tengo dolor de cabezo',
    'mareo', 'vertigo', 'v√©rtigo', 'desmayo',
    'hormigueo', 'entumecimiento', 'adormecimiento',
    'perdida memoria', 'p√©rdida memoria', 'olvidos', 'confusion', 'confusi√≥n'
  ];
  
  // S√≠ntomas pedi√°tricos
  const sintomasPediatria = [
    'ni√±o', 'ni√±a', 'bebe', 'beb√©', 'hijo', 'hija',
    'mi hijo', 'mi hija', 'mi bebe', 'mi beb√©',
    'menor', 'peque√±o', 'peque√±a', 'infante'
  ];
  
  // S√≠ntomas medicina familiar ni√±os
  const sintomasMedicinaFamiliarNinos = [
    'control ni√±o sano', 'control nino sano', 'vacunas', 'vacuna',
    'resfriado ni√±o', 'resfriado nino', 'fiebre ni√±o', 'fiebre nino',
    'mi ni√±o tiene fiebre', 'mi nino tiene fiebre', 'ni√±o con fiebre', 'nino con fiebre',
    'tos ni√±o', 'tos nino', 'diarrea ni√±o', 'diarrea nino',
    'dolor estomago ni√±o', 'dolor estomago nino', 'vomitos ni√±o', 'vomitos nino'
  ];
  
  // S√≠ntomas medicina familiar adultos
  const sintomasMedicinaFamiliarAdultos = [
    'control adulto', 'examen preventivo', 'chequeo general',
    'resfriado adulto', 'gripe adulto',
    // Removed "dolor general" - demasiado gen√©rico, puede interceptar s√≠ntomas espec√≠ficos
    'dolor muscular general', 'dolor corporal general', 'malestar general',
    'presion arterial', 'presi√≥n arterial', 'hipertension', 'hipertensi√≥n',
    'diabetes', 'colesterol', 'examenes generales', 'ex√°menes generales'
  ];
  
  // üî• EVALUAR S√çNTOMAS EN ORDEN DE PRIORIDAD - OFTALMOLOG√çA PRIMERO
  console.log('üîç Evaluando s√≠ntomas. Texto original:', text);
  console.log('üîç Texto normalizado:', textoLimpio);
  
  const sintomaDetectado = sintomasOftalmologia.find(s => textoLimpio.includes(s));
  if (sintomaDetectado) {
    console.log('‚úÖ S√≠ntomas oftalmol√≥gicos detectados:', sintomaDetectado);
    return 'Oftalmolog√≠a';
  }
  
  const sintomaDermato = sintomasDermatologia.find(s => textoLimpio.includes(s));
  if (sintomaDermato) {
    console.log('‚úÖ S√≠ntomas dermatol√≥gicos detectados:', sintomaDermato);
    return 'Dermatolog√≠a';
  }
  
  const sintomaCardio = sintomasCardiologia.find(s => textoLimpio.includes(s));
  if (sintomaCardio) {
    console.log('‚úÖ S√≠ntomas cardiol√≥gicos detectados:', sintomaCardio);
    return 'Cardiolog√≠a';
  }
  
  const sintomaNeuro = sintomasNeurologia.find(s => textoLimpio.includes(s));
  if (sintomaNeuro) {
    console.log('‚úÖ S√≠ntomas neurol√≥gicos detectados:', sintomaNeuro);
    return 'Neurolog√≠a';
  }
  
  const sintomaMFNinos = sintomasMedicinaFamiliarNinos.find(s => textoLimpio.includes(s));
  if (sintomaMFNinos) {
    console.log('‚úÖ S√≠ntomas medicina familiar ni√±os detectados:', sintomaMFNinos);
    return 'Medicina Familiar Ni√±os';
  }
  
  const sintomaMFAdultos = sintomasMedicinaFamiliarAdultos.find(s => textoLimpio.includes(s));
  if (sintomaMFAdultos) {
    console.log('‚úÖ S√≠ntomas medicina familiar adultos detectados:', sintomaMFAdultos);
    return 'Medicina Familiar Adultos';
  }
  if (sintomasPediatria.some(s => textoLimpio.includes(s))) return 'Pediatr√≠a';
  
  return null;
}

// Funci√≥n para obtener especialidades disponibles
async function getEspecialidadesDisponibles() {
  try {
    const AIRTABLE_API_KEY = process.env.AIRTABLE_API_KEY;
    const AIRTABLE_BASE_ID = process.env.AIRTABLE_BASE_ID;
    const AIRTABLE_TABLE_ID = process.env.AIRTABLE_TABLE_ID;

    const response = await fetch(
      `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_ID}?maxRecords=100`,
      {
        headers: {
          Authorization: `Bearer ${AIRTABLE_API_KEY}`,
        },
      }
    );

    if (!response.ok) return [];

    const data = await response.json();
    const records = data.records || [];
    
    const especialidades = [...new Set(
      records
        .filter(r => r.fields?.Especialidad && (r.fields?.Disponible === "Si" || r.fields?.Disponible === true))
        .map(r => r.fields.Especialidad)
    )];

    return especialidades;
  } catch (error) {
    console.error('Error obteniendo especialidades:', error);
    return [];
  }
}

// Funci√≥n para obtener nombre del doctor
async function getDoctorName(doctorId) {
  try {
    const AIRTABLE_API_KEY = process.env.AIRTABLE_API_KEY;
    const AIRTABLE_BASE_ID = process.env.AIRTABLE_BASE_ID;
    const AIRTABLE_DOCTORS_TABLE = process.env.AIRTABLE_DOCTORS_TABLE;

    const response = await fetch(
      `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_DOCTORS_TABLE}/${doctorId}`,
      {
        headers: {
          Authorization: `Bearer ${AIRTABLE_API_KEY}`,
        },
      }
    );

    if (!response.ok) {
      return doctorId; // Fallback al ID si no se puede obtener el nombre
    }

    const data = await response.json();
    return data.fields?.Name || doctorId;
  } catch (error) {
    console.error(`Error obteniendo nombre del m√©dico ${doctorId}:`, error);
    return doctorId; // Fallback al ID en caso de error
  }
}

// Funci√≥n para obtener m√©dicos que atienden la edad del paciente
async function getMedicosQueAtienden(especialidad, edad) {
  try {
    const AIRTABLE_API_KEY = process.env.AIRTABLE_API_KEY;
    const AIRTABLE_BASE_ID = process.env.AIRTABLE_BASE_ID;
    const AIRTABLE_DOCTORS_TABLE = process.env.AIRTABLE_DOCTORS_TABLE;

    const response = await fetch(
      `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_DOCTORS_TABLE}?maxRecords=100`,
      {
        headers: {
          Authorization: `Bearer ${AIRTABLE_API_KEY}`,
        },
      }
    );

    if (!response.ok) return [];

    const data = await response.json();
    const medicos = data.records || [];
    
    // Filtrar m√©dicos por especialidad y capacidad de atender la edad
    const medicosCompatibles = medicos.filter(medico => {
      const fields = medico.fields || {};
      
      // Verificar especialidad
      if (fields.Especialidad !== especialidad) return false;
      
      // Verificar si puede atender la edad del paciente
      const atiende = fields.Atiende;
      if (!atiende) return true; // Si no est√° especificado, asumimos que atiende a todos
      
      if (atiende === "Ambos") return true;
      if (atiende === "Ni√±os" && edad <= 17) return true;
      if (atiende === "Adultos" && edad >= 18) return true;
      
      return false;
    });

    console.log(`üë®‚Äç‚öïÔ∏è M√©dicos compatibles para ${especialidad} (${edad} a√±os): ${medicosCompatibles.length}`);
    return medicosCompatibles;
  } catch (error) {
    console.error('Error obteniendo m√©dicos compatibles:', error);
    return [];
  }
}

// Funci√≥n para obtener informaci√≥n completa del doctor
async function getDoctorInfo(doctorId) {
  try {
    const AIRTABLE_API_KEY = process.env.AIRTABLE_API_KEY;
    const AIRTABLE_BASE_ID = process.env.AIRTABLE_BASE_ID;
    const AIRTABLE_DOCTORS_TABLE = process.env.AIRTABLE_DOCTORS_TABLE;

    const response = await fetch(
      `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_DOCTORS_TABLE}/${doctorId}`,
      {
        headers: {
          Authorization: `Bearer ${AIRTABLE_API_KEY}`,
        },
      }
    );

    if (!response.ok) {
      return { name: doctorId, email: null, whatsapp: null };
    }

    const data = await response.json();
    return {
      name: data.fields?.Name || doctorId,
      email: data.fields?.Email || null,
      whatsapp: data.fields?.WhatsApp || data.fields?.Whatsapp || data.fields?.Telefono || null
    };
  } catch (error) {
    console.error(`Error obteniendo info del m√©dico ${doctorId}:`, error);
    return { name: doctorId, email: null, whatsapp: null };
  }
}

// Handler principal POST
export async function POST(req) {
  try {
    const { message, session: currentSession } = await req.json();
    
    if (!message) {
      return NextResponse.json({ text: "No se recibi√≥ mensaje" }, { status: 400 });
    }

    // Variables de entorno
    const {
      AIRTABLE_API_KEY,
      AIRTABLE_BASE_ID,
      AIRTABLE_TABLE_ID,
      AIRTABLE_DOCTORS_TABLE,
      OPENAI_API_KEY,
      SENDGRID_API_KEY,
      SENDGRID_FROM_EMAIL
    } = process.env;

    const text = message.trim();
    const from = currentSession?.from || "user";

    console.log(`üì± Mensaje recibido: "${text}"`);

    // üî• PRIMERO: Detectar si es consulta m√©dica espec√≠fica
    const especialidadDetectada = detectarEspecialidadPorSintomas(text);
    if (especialidadDetectada) {
      console.log(`üéØ Especialidad detectada directamente: ${especialidadDetectada} para texto: "${text}"`);
      // Saltamos toda la l√≥gica de consulta no m√©dica y vamos directo al procesamiento m√©dico
      // Esto significa que ejecutaremos el c√≥digo que est√° en la l√≠nea ~1275
      // No hacemos nada aqu√≠, solo evitamos que se ejecute esConsultaNoMedica
    } else if (esConsultaNoMedica(text)) {
      // Si tenemos OpenAI, generar respuesta inteligente y humana
      if (OPENAI_API_KEY) {
        try {
          const aiRes = await fetch("https://api.openai.com/v1/chat/completions", {
            method: "POST",
            headers: {
              Authorization: `Bearer ${OPENAI_API_KEY}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              model: "gpt-4o-mini",
              temperature: 0.8,
              max_tokens: 120,
              messages: [
                {
                  role: "system",
                  content: `Eres Sobrecupos IA, un asistente m√©dico chileno muy humano y emp√°tico. El usuario te escribi√≥ algo que no es m√©dico: "${text}". 

Responde de forma:
1. HUMANA y con humor sutil si es apropiado
2. Reconoce lo que dijeron de forma natural 
3. Redirige suavemente hacia temas de salud
4. Pregunta si tienen alg√∫n problema de salud o s√≠ntoma
5. M√°ximo 3 l√≠neas
6. Usa emojis apropiados pero sin exceso
7. S√© conversacional, no rob√≥tico

Ejemplos:
- Si mencionan pizza: "¬°Mmm, pizza! üçï Espero que sea una pizza saludable üòÑ Hablando de salud, ¬øhay algo que te moleste f√≠sicamente o necesitas ver alg√∫n especialista?"
- Si mencionan m√∫sica: "¬°La m√∫sica es genial para el alma! üéµ Y hablando de bienestar, ¬øc√≥mo has estado de salud? ¬øAlg√∫n s√≠ntoma o consulta m√©dica que tengas pendiente?"
- Si mencionan trabajo: "El trabajo puede ser estresante a veces üòÖ ¬øHas sentido que el estr√©s te est√° afectando f√≠sicamente? ¬øTienes alg√∫n s√≠ntoma o necesitas ver alg√∫n m√©dico?"`
                },
                { role: "user", content: text }
              ]
            })
          });

          const aiJson = await aiRes.json();
          const respuestaIA = aiJson.choices?.[0]?.message?.content?.trim();
          
          if (respuestaIA) {
            return NextResponse.json({ text: respuestaIA });
          }
        } catch (err) {
          console.error("‚ùå Error OpenAI para consulta no m√©dica:", err);
        }
      }
      
      // Fallback: respuestas m√°s humanas predefinidas
      const respuestasNoMedicas = [
        "¬°Jaja! Me especializo m√°s en temas de salud que en eso üòÑ\n\nPero hablando de bienestar, ¬øc√≥mo has estado? ¬øTienes alg√∫n s√≠ntoma o necesitas ver alg√∫n especialista?",
        "Entiendo, pero soy m√°s experto en conectarte con m√©dicos üë®‚Äç‚öïÔ∏è\n\n¬øHay algo relacionado con tu salud en lo que pueda ayudarte hoy?",
        "Me encantar√≠a ayudarte con eso, pero mi especialidad es la salud ü©∫\n\n¬øTienes alg√∫n malestar o consulta m√©dica pendiente?"
      ];
      
      const respuestaAleatoria = respuestasNoMedicas[Math.floor(Math.random() * respuestasNoMedicas.length)];
      return NextResponse.json({ text: respuestaAleatoria });
    }

    // üî• MANEJO DE SESIONES EXISTENTES
    // Priorizar la sesi√≥n del request sobre la sesi√≥n interna del servidor
    const activeSession = currentSession || sessions[from];
    
    // Si viene sesi√≥n en el request, actualizarla en la memoria del servidor
    if (currentSession?.stage) {
      sessions[from] = currentSession;
    }
    
    if (activeSession?.stage) {
      const { stage, specialty, records, attempts = 0, patientName, patientRut, patientPhone, patientEmail, respuestaEmpatica } = activeSession;

      switch (stage) {
        case 'confirming-appointment':
          // üÜï CONFIRMAR SI LE SIRVE LA CITA PROPUESTA
          const respuesta = text.toLowerCase().trim();
          console.log('üîç CONFIRMING-APPOINTMENT - Texto recibido:', text);
          console.log('üîç CONFIRMING-APPOINTMENT - Respuesta normalizada:', respuesta);
          
          if (/\b(s√≠|si|s|yes|ok|vale)\b/i.test(respuesta)) {
            console.log('‚úÖ CONFIRMING-APPOINTMENT - Detectado S√ç');
            // Confirmar cita y preguntar nombre completo primero
            sessions[from] = {
              ...currentSession,
              stage: 'getting-name-for-confirmed-appointment'
            };
            
            return NextResponse.json({
              text: "¬°Excelente! Para completar tu reserva, necesito tus datos.\n\nPor favor dime tu **nombre completo**:",
              session: sessions[from]
            });
          } 
          else if (/\bno\b/i.test(respuesta) && (respuesta.includes('otro') || respuesta.includes('otra') || respuesta.includes('diferente') || respuesta.includes('distinto') || respuesta.includes('profesional') || respuesta.includes('m√©dico') || respuesta.includes('medico') || respuesta.includes('doctor'))) {
            // Usuario dice "no, quiero otro profesional/m√©dico/doctor"
            console.log("üîÑ CONFIRMING-APPOINTMENT - Detectado NO + OTRO PROFESIONAL");
            console.log("üîÑ Regex test:", /\bno\b/i.test(respuesta));
            console.log("üîÑ Contiene 'otro':", respuesta.includes('otro'));
            console.log("üîÑ Contiene 'profesional':", respuesta.includes('profesional'));
            const { specialty, records } = currentSession;
            
            // Buscar otras opciones disponibles de la misma especialidad
            const otrasOpciones = records ? records.slice(1, 3) : []; // Tomar las siguientes 2 opciones
            
            if (otrasOpciones.length > 0) {
              let mensaje = `Entiendo que prefieres otro profesional. Te muestro otras opciones de **${specialty}**:\n\n`;
              
              for (let i = 0; i < otrasOpciones.length; i++) {
                const record = otrasOpciones[i];
                const doctorId = Array.isArray(record.fields["M√©dico"]) ? 
                  record.fields["M√©dico"][0] : record.fields["M√©dico"];
                const doctorInfo = await getDoctorInfo(doctorId);
                const fechaFormateada = formatSpanishDate(record.fields?.Fecha);
                
                // Informaci√≥n de rango etario
                let atiendeTxt = "";
                switch(doctorInfo.atiende) {
                  case "Ni√±os": atiendeTxt = " (especialista en pediatr√≠a)"; break;
                  case "Adultos": atiendeTxt = " (atiende solo adultos)"; break;
                  case "Ambos": atiendeTxt = " (atiende ni√±os y adultos)"; break;
                  default: atiendeTxt = " (atiende pacientes de todas las edades)";
                }
                
                mensaje += `${i + 1}. üë®‚Äç‚öïÔ∏è **Dr. ${doctorInfo.name}**${atiendeTxt}\nüìÖ ${fechaFormateada} a las ${record.fields?.Hora}\nüìç ${record.fields?.["Cl√≠nica"] || record.fields?.["Clinica"]}\n\n`;
              }
              
              mensaje += "¬øAlguna de estas opciones te sirve mejor? Responde con el n√∫mero (1 o 2).";
              
              sessions[from] = {
                ...currentSession,
                stage: 'choosing-alternative',
                alternativeOptions: otrasOpciones
              };
              
              return NextResponse.json({
                text: mensaje,
                session: sessions[from]
              });
            } else {
              // No hay m√°s opciones disponibles - establecer stage para manejar respuesta
              sessions[from] = {
                ...currentSession,
                stage: 'asking-for-contact-data',
                specialty: specialty
              };
              
              return NextResponse.json({
                text: `Lamentablemente no tengo m√°s profesionales de **${specialty}** disponibles en este momento.\n\n¬øTe gustar√≠a que tome tus datos para avisarte cuando tengamos nuevas opciones disponibles?`,
                session: sessions[from]
              });
            }
          }
          else if (/\bno\b/i.test(respuesta) || respuesta === 'n') {
            // Ofrecer otras opciones
            const { records, selectedRecord, esMedicoEspecifico, specialty, doctorName } = currentSession;
            
            // üÜï MANEJO ESPECIAL PARA M√âDICO ESPEC√çFICO
            if (esMedicoEspecifico) {
              const otrasOpciones = records.filter(r => r.id !== selectedRecord.id).slice(0, 2);
              
              if (otrasOpciones.length > 0) {
                let mensaje = `Entiendo que esa hora no te conviene. Te muestro otras opciones disponibles con **${doctorName}**:\n\n`;
                
                otrasOpciones.forEach((record, index) => {
                  const fechaFormateada = formatSpanishDate(record.fields?.Fecha);
                  mensaje += `${index + 1}. üìÖ ${fechaFormateada} a las ${record.fields?.Hora}\nüìç ${record.fields?.["Cl√≠nica"] || record.fields?.["Clinica"]}\n\n`;
                });
                
                mensaje += "¬øAlguna de estas fechas te sirve mejor? Responde con el n√∫mero (1 o 2) o escribe **'otros'** si prefieres ver m√©dicos diferentes.";
                
                sessions[from] = {
                  ...currentSession,
                  stage: 'choosing-alternative',
                  alternativeOptions: otrasOpciones
                };
                
                return NextResponse.json({
                  text: mensaje,
                  session: sessions[from]
                });
              } else {
                // Cambiar a stage especial para manejar respuesta sobre buscar otros m√©dicos
                sessions[from] = {
                  ...currentSession,
                  stage: 'asking-for-other-doctors',
                  doctorName,
                  specialty,
                  motivo: currentSession.motivo || text
                };
                
                return NextResponse.json({
                  text: `Entiendo que esa hora no te acomoda. Lamentablemente **${doctorName}** solo tiene esa fecha disponible en este momento.\n\n¬øTe gustar√≠a que te ayude a buscar otros m√©dicos de ${specialty} que tengan m√°s horarios disponibles?`,
                  session: sessions[from]
                });
              }
            }
            
            // MANEJO ORIGINAL PARA B√öSQUEDAS POR S√çNTOMAS
            console.log(`üîç DEBUG: Filtrando opciones alternativas`);
            console.log(`üìã Records disponibles: ${records?.length || 0}`);
            console.log(`üéØ ID del registro seleccionado: ${selectedRecord?.id}`);
            
            const otrasOpciones = records?.filter(r => {
              const isNotSelected = r.id !== selectedRecord?.id;
              console.log(`üìù Comparando ${r.id} !== ${selectedRecord?.id} = ${isNotSelected}`);
              return isNotSelected;
            }).slice(0, 2) || [];
            
            console.log(`‚úÖ Opciones alternativas encontradas: ${otrasOpciones.length}`);
            
            if (otrasOpciones.length > 0) {
              let mensaje = "Entiendo. Te muestro otras opciones disponibles:\n\n";
              
              otrasOpciones.forEach((record, index) => {
                const fecha = new Date(record.fields.Fecha).toLocaleDateString('es-ES', {
                  weekday: 'long',
                  month: 'long',
                  day: 'numeric'
                });
                mensaje += `${index + 1}. üìÖ ${fecha} a las ${record.fields.Hora}\nüìç ${record.fields["Cl√≠nica"] || record.fields["Clinica"]}\n\n`;
              });
              
              mensaje += "¬øAlguna de estas opciones te sirve mejor? Responde con el n√∫mero (1 o 2) o escribe 'no' si ninguna te conviene.";
              
              sessions[from] = {
                ...currentSession,
                stage: 'choosing-alternative',
                alternativeOptions: otrasOpciones
              };
              
              return NextResponse.json({
                text: mensaje,
                session: sessions[from]
              });
            } else {
              console.log("‚ö†Ô∏è No hay m√°s opciones alternativas disponibles");
              
              // Cambiar a stage para manejar consultas sobre disponibilidad
              sessions[from] = {
                ...currentSession,
                stage: 'no-more-options-available',
                specialty: specialty
              };
              
              return NextResponse.json({
                text: `Entiendo que esa fecha no te sirve. Lamentablemente no tengo m√°s sobrecupos disponibles de **${specialty}** en este momento.\n\n¬øTe gustar√≠a que tome tus datos para avisarte cuando tengamos nuevas opciones disponibles?`,
                session: sessions[from]
              });
            }
          } 
          else {
            return NextResponse.json({
              text: "No entend√≠ tu respuesta. ¬øTe sirve la cita que te propuse?\n\nResponde **S√≠** para confirmar o **No** si prefieres otra opci√≥n."
            });
          }

        case 'choosing-alternative':
          // üÜï ELEGIR ENTRE OPCIONES ALTERNATIVAS
          const opcionText = text.toLowerCase().trim();
          const { alternativeOptions } = currentSession;
          
          if (opcionText === '1' && alternativeOptions[0]) {
            const selectedAlt = alternativeOptions[0];
            const doctorId = Array.isArray(selectedAlt.fields["M√©dico"]) ? 
              selectedAlt.fields["M√©dico"][0] : selectedAlt.fields["M√©dico"];
            
            const doctorInfo = await getDoctorInfo(doctorId);
            
            sessions[from] = {
              ...currentSession,
              selectedRecord: selectedAlt,
              doctorInfo: doctorInfo,
              stage: 'getting-name-for-confirmed-appointment'
            };
            
            return NextResponse.json({
              text: "¬°Excelente elecci√≥n! Para completar tu reserva, necesito tus datos.\n\nPor favor dime tu **nombre completo**:",
              session: sessions[from]
            });
          } 
          else if (opcionText === '2' && alternativeOptions[1]) {
            const selectedAlt = alternativeOptions[1];
            const doctorId = Array.isArray(selectedAlt.fields["M√©dico"]) ? 
              selectedAlt.fields["M√©dico"][0] : selectedAlt.fields["M√©dico"];
            
            const doctorInfo = await getDoctorInfo(doctorId);
            
            sessions[from] = {
              ...currentSession,
              selectedRecord: selectedAlt,
              doctorInfo: doctorInfo,
              stage: 'getting-name-for-confirmed-appointment'
            };
            
            return NextResponse.json({
              text: "¬°Excelente elecci√≥n! Para completar tu reserva, necesito tus datos.\n\nPor favor dime tu **nombre completo**:",
              session: sessions[from]
            });
          }
          else if (opcionText.includes('otros') || opcionText.includes('otro')) {
            const { esMedicoEspecifico, specialty } = currentSession;
            
            if (esMedicoEspecifico) {
              // Limpiar sesi√≥n y buscar otros m√©dicos de la misma especialidad
              delete sessions[from];
              
              return NextResponse.json({
                text: `Perfecto, te ayudo a buscar otros m√©dicos de **${specialty}** con horarios disponibles.\n\n¬øMe podr√≠as decir tu edad? Esto me ayuda a encontrar m√©dicos que atiendan pacientes de tu rango etario.\n\nEjemplo: 25`
              });
            } else {
              return NextResponse.json({
                text: "Entiendo. ¬øTe gustar√≠a que te ayude a buscar en otra especialidad o tienes alg√∫n otro s√≠ntoma que pueda evaluar?"
              });
            }
          }
          else if (opcionText.includes('no') || opcionText === 'n') {
            return NextResponse.json({
              text: "Entiendo. Lamentablemente no tengo m√°s opciones disponibles en este momento.\n\n¬øTe gustar√≠a que te ayude con alg√∫n otro s√≠ntoma o consulta?"
            });
          }
          else {
            return NextResponse.json({
              text: "Por favor responde con el n√∫mero de la opci√≥n que prefieres (1 o 2), escribe **'otros'** para ver m√©dicos diferentes, o **'no'** si ninguna te conviene."
            });
          }

        case 'getting-name-for-confirmed-appointment':
          // üÜï OBTENER NOMBRE COMPLETO DESPU√âS DE CONFIRMAR LA CITA
          const nombreCompleto = text.trim();
          
          if (nombreCompleto.length < 2) {
            return NextResponse.json({
              text: "Por favor ingresa tu nombre completo."
            });
          }

          // Extraer primer nombre para saludo personalizado
          const primerNombre = nombreCompleto.split(' ')[0];
          
          // Guardar nombre y pasar a solicitar edad
          sessions[from] = {
            ...currentSession,
            patientName: nombreCompleto,
            stage: 'getting-age-for-confirmed-appointment'
          };

          return NextResponse.json({
            text: `¬°Perfecto, ${primerNombre}! Ahora necesito conocer tu edad para completar la reserva.\n\nPor favor dime tu edad:\nEjemplo: 25`,
            session: sessions[from]
          });

        case 'getting-age-for-confirmed-appointment':
          // üÜï VALIDAR EDAD DESPU√âS DE CONFIRMAR LA CITA
          if (!validarEdad(text)) {
            const mensajeError = analizarConfusion(text, 'edad');
            currentSession.attempts = (currentSession.attempts || 0) + 1;
            
            // Si ya intent√≥ 3 veces, ofrecer ayuda adicional
            const ayudaAdicional = currentSession.attempts >= 3 ? 
              "\n\nüí° *Solo necesito tu edad en n√∫meros:*\n‚Ä¢ Si tienes 25 a√±os, escribe: 25\n‚Ä¢ Si tienes 3 a√±os, escribe: 3\n‚Ä¢ Solo n√∫meros del 1 al 120" : "";
            
            sessions[from] = { ...currentSession };
            return NextResponse.json({
              text: mensajeError + ayudaAdicional
            });
          }
          
          const edadConfirmada = parseInt(text);

          // Validar si el m√©dico atiende pacientes de esa edad
          const { doctorInfo, selectedRecord } = currentSession;
          const atiende = doctorInfo.atiende || "Ambos";
          
          let edadCompatible = true;
          let mensajeEdad = "";
          
          if (atiende === "Ni√±os" && edadConfirmada >= 18) {
            edadCompatible = false;
            mensajeEdad = "Este m√©dico se especializa en pediatr√≠a (menores de 18 a√±os).";
          } else if (atiende === "Adultos" && edadConfirmada < 18) {
            edadCompatible = false;
            mensajeEdad = "Este m√©dico atiende solo adultos (18 a√±os o m√°s).";
          }

          if (!edadCompatible) {
            // Buscar alternativas para la edad
            try {
              const alternativas = currentSession.records.filter(record => {
                const altDoctorId = Array.isArray(record.fields["M√©dico"]) ? 
                  record.fields["M√©dico"][0] : record.fields["M√©dico"];
                return altDoctorId !== (Array.isArray(selectedRecord.fields["M√©dico"]) ? 
                  selectedRecord.fields["M√©dico"][0] : selectedRecord.fields["M√©dico"]);
              });

              if (alternativas.length > 0) {
                const altRecord = alternativas[0];
                const altDoctorId = Array.isArray(altRecord.fields["M√©dico"]) ? 
                  altRecord.fields["M√©dico"][0] : altRecord.fields["M√©dico"];
                
                const altDoctorInfo = await getDoctorInfo(altDoctorId);
                const altAtiende = altDoctorInfo.atiende || "Ambos";
                
                // Verificar si la alternativa es compatible
                let altCompatible = true;
                if (altAtiende === "Ni√±os" && edadConfirmada >= 18) altCompatible = false;
                if (altAtiende === "Adultos" && edadConfirmada < 18) altCompatible = false;
                
                if (altCompatible) {
                  const fechaAlt = new Date(altRecord.fields.Fecha).toLocaleDateString('es-ES', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  });
                  
                  let altAtiendeTxt = "";
                  switch(altAtiende) {
                    case "Ni√±os": altAtiendeTxt = " (especialista en pediatr√≠a)"; break;
                    case "Adultos": altAtiendeTxt = " (atiende solo adultos)"; break;
                    case "Ambos": altAtiendeTxt = " (atiende pacientes de todas las edades)"; break;
                    default: altAtiendeTxt = " (atiende pacientes de todas las edades)";
                  }
                  
                  // Actualizar sesi√≥n con nueva selecci√≥n
                  sessions[from] = {
                    ...currentSession,
                    selectedRecord: altRecord,
                    doctorInfo: altDoctorInfo,
                    patientAge: edadConfirmada,
                    stage: 'getting-rut'
                  };
                  
                  return NextResponse.json({
                    text: `${mensajeEdad}\n\n‚úÖ Sin embargo, tengo otra opci√≥n perfecta para ti:\n\nüë®‚Äç‚öïÔ∏è **Dr. ${altDoctorInfo.name}**${altAtiendeTxt}\nüìÖ ${fechaAlt} a las ${altRecord.fields.Hora}\nüìç ${altRecord.fields["Cl√≠nica"] || altRecord.fields["Clinica"]}\n\n¬°Perfecto! Ahora necesito tu RUT para completar la reserva.\n\nPor favor, ingresa tu RUT:\nEjemplo: 12.345.678-9 o 12345678-9`,
                    session: sessions[from]
                  });
                }
              }
              
              return NextResponse.json({
                text: `${mensajeEdad}\n\nLamentablemente no tengo otros m√©dicos disponibles para tu edad en este momento. Te sugiero intentar m√°s tarde o contactar directamente a la cl√≠nica.`
              });
              
            } catch (error) {
              console.error("‚ùå Error buscando alternativas:", error);
              return NextResponse.json({
                text: `${mensajeEdad}\n\nPor favor, intenta nuevamente m√°s tarde.`
              });
            }
          }

          // Si la edad es compatible, continuar (ya tenemos el nombre)
          const nombrePaciente = currentSession.patientName.split(' ')[0];
          sessions[from] = {
            ...currentSession,
            patientAge: edadConfirmada,
            stage: 'getting-rut',
            attempts: 0 // Reset attempts para el siguiente campo
          };

          return NextResponse.json({
            text: `¬°Perfecto, ${nombrePaciente}! La cita te queda ideal.\n\nAhora necesito tu RUT para completar la reserva.\n\nPor favor, ingresa tu RUT:\nEjemplo: 12.345.678-9 o 12345678-9`,
            session: sessions[from]
          });

        case 'getting-age-for-filtering':
          if (!validarEdad(text)) {
            const mensajeError = analizarConfusion(text, 'edad');
            currentSession.attempts = (currentSession.attempts || 0) + 1;
            
            // Si ya intent√≥ 3 veces, ofrecer ayuda adicional
            const ayudaAdicional = currentSession.attempts >= 3 ? 
              "\n\nüí° *Solo necesito tu edad en n√∫meros:*\n‚Ä¢ Si tienes 25 a√±os, escribe: 25\n‚Ä¢ Si tienes 3 a√±os, escribe: 3\n‚Ä¢ Solo n√∫meros del 1 al 120" : "";
            
            sessions[from] = { ...currentSession };
            return NextResponse.json({
              text: mensajeError + ayudaAdicional
            });
          }
          
          const edadIngresada = parseInt(text);

          console.log(`üéØ Manteniendo especialidad original: ${specialty} para edad ${edadIngresada}`);

          // Buscar m√©dicos compatibles con la edad
          const medicosCompatibles = await getMedicosQueAtienden(specialty, edadIngresada);
          
          if (medicosCompatibles.length === 0) {
            return NextResponse.json({
              text: `Lamentablemente no encontr√© m√©dicos de ${specialty} que atiendan pacientes de ${edadIngresada} a√±os en este momento.\n\n¬øTe gustar√≠a que te contacte cuando tengamos disponibilidad?`
            });
          }

          // Obtener IDs de m√©dicos compatibles
          const medicosIds = medicosCompatibles.map(m => m.id);

          // Buscar sobrecupos disponibles de estos m√©dicos
          let sobrecuposRecords = [];
          try {
            const resp = await fetch(
              `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_ID}?maxRecords=100`,
              { headers: { Authorization: `Bearer ${AIRTABLE_API_KEY}` } }
            );
            const data = await resp.json();
            sobrecuposRecords = data.records || [];
          } catch (err) {
            console.error("‚ùå Error consultando Airtable:", err);
            return NextResponse.json({ text: "Error consultando disponibilidad. Intenta m√°s tarde." });
          }

          // Filtrar por m√©dicos compatibles y especialidad
          const availableFiltered = sobrecuposRecords.filter(r => {
            const fields = r.fields || {};
            const medicoField = fields["M√©dico"];
            
            const medicoId = Array.isArray(medicoField) ? medicoField[0] : medicoField;
            
            return (
              (fields.Especialidad === specialty) &&
              (fields.Disponible === "Si" || fields.Disponible === true) &&
              medicosIds.includes(medicoId)
            );
          });

          // Filtrar solo fechas futuras
          const available = filterFutureDates(availableFiltered);
          console.log(`üìÖ Sobrecupos futuros encontrados: ${available.length} de ${availableFiltered.length} totales`);

          if (available.length === 0) {
            return NextResponse.json({
              text: `Encontr√© m√©dicos de ${specialty} que atienden pacientes de ${edadIngresada} a√±os, pero no tienen sobrecupos disponibles para fechas futuras.\n\n¬øTe gustar√≠a que te contacte cuando tengamos disponibilidad?`
            });
          }

          // Ordenar por fecha m√°s pr√≥xima
          available.sort((a, b) => {
            const dateA = new Date(`${a.fields?.Fecha}T${a.fields?.Hora || '00:00'}`);
            const dateB = new Date(`${b.fields?.Fecha}T${b.fields?.Hora || '00:00'}`);
            return dateA - dateB;
          });

          const first = available[0].fields;
          const clin = first["Cl√≠nica"] || first["Clinica"] || "nuestra cl√≠nica";
          const dir = first["Direcci√≥n"] || first["Direccion"] || "la direcci√≥n indicada";
          const medicoId = Array.isArray(first["M√©dico"]) ? first["M√©dico"][0] : first["M√©dico"];
          const medicoNombre = await getDoctorName(medicoId);

          // Formatear fecha en formato espa√±ol
          const fechaFormateada = formatSpanishDate(first.Fecha);

          sessions[from] = {
            stage: 'awaiting-confirmation',
            specialty: specialty,
            records: available,
            attempts: 0,
            patientAge: edadIngresada,
            respuestaEmpatica: respuestaEmpatica
          };

          return NextResponse.json({
            text: `‚úÖ Encontr√© un sobrecupo de ${specialty} para pacientes de ${edadIngresada} a√±os:\n\nüë®‚Äç‚öïÔ∏è Dr. ${medicoNombre}\nüóìÔ∏è ${fechaFormateada} a las ${first.Hora}\nüìç ${clin}\nüìç ${dir}\n\n¬øTe sirve? Confirma con "s√≠".`,
            session: sessions[from]
          });

        case 'awaiting-confirmation':
          if (/\b(s√≠|si|s|yes|ok|vale)\b/i.test(text)) {
            sessions[from] = { 
              ...currentSession, 
              stage: 'getting-name' 
            };
            return NextResponse.json({
              text: "¬°Excelente! üéâ\n\nPara confirmar tu cita necesito algunos datos.\n\nPrimero, ¬øcu√°l es tu nombre completo?",
              session: sessions[from]
            });
          }
          
          const respuestaLower = text.toLowerCase().trim();
          
          if (/\bno\b/i.test(respuestaLower) && (respuestaLower.includes('otro') || respuestaLower.includes('otra') || respuestaLower.includes('diferente') || respuestaLower.includes('distinto') || respuestaLower.includes('profesional') || respuestaLower.includes('m√©dico') || respuestaLower.includes('medico') || respuestaLower.includes('doctor'))) {
            // Usuario dice "no, quiero otro profesional/m√©dico/doctor" - mostrar otras opciones
            console.log("üîÑ Usuario rechaza cita y pide otro profesional en awaiting-confirmation");
            const availableRecords = records || [];
            const futureRecords = filterFutureDates(availableRecords);
            const otrasOpciones = futureRecords.slice(1, 3); // Tomar las siguientes 2 opciones
            
            if (otrasOpciones.length > 0) {
              let mensaje = `Entiendo que prefieres otro profesional. Te muestro otras opciones de **${specialty}**:\n\n`;
              
              for (let i = 0; i < otrasOpciones.length; i++) {
                const record = otrasOpciones[i];
                const medicoId = Array.isArray(record.fields["M√©dico"]) ? 
                  record.fields["M√©dico"][0] : record.fields["M√©dico"];
                const medicoNombre = await getDoctorName(medicoId);
                const fechaFormateada = formatSpanishDate(record.fields?.Fecha);
                const clin = record.fields?.["Cl√≠nica"] || record.fields?.["Clinica"] || "Cl√≠nica";
                const dir = record.fields?.["Direcci√≥n"] || record.fields?.["Direccion"] || "";
                
                mensaje += `${i + 1}. üë®‚Äç‚öïÔ∏è **Dr. ${medicoNombre}**\nüìÖ ${fechaFormateada} a las ${record.fields?.Hora}\nüìç ${clin}\nüìç ${dir}\n\n`;
              }
              
              mensaje += "¬øAlguna de estas opciones te sirve mejor? Responde con el n√∫mero (1 o 2).";
              
              sessions[from] = {
                ...currentSession,
                stage: 'choosing-from-alternatives',
                alternativeOptions: otrasOpciones,
                attempts: 0
              };
              
              return NextResponse.json({
                text: mensaje,
                session: sessions[from]
              });
            } else {
              // No hay m√°s opciones - establecer stage para manejar respuesta
              sessions[from] = {
                ...currentSession,
                stage: 'asking-for-contact-data',
                specialty: specialty
              };
              
              return NextResponse.json({
                text: `Lamentablemente no tengo m√°s profesionales de **${specialty}** disponibles en este momento.\n\n¬øTe gustar√≠a que tome tus datos para avisarte cuando tengamos nuevas opciones disponibles?`,
                session: sessions[from]
              });
            }
          }
          else if (/\bno\b/i.test(respuestaLower)) {
            const nextAttempt = attempts + 1;
            const availableRecords = records || [];
            
            const futureRecords = filterFutureDates(availableRecords);
            
            if (nextAttempt < futureRecords.length) {
              const nextRecord = futureRecords[nextAttempt].fields;
              const clin = nextRecord["Cl√≠nica"] || nextRecord["Clinica"] || "nuestra cl√≠nica";
              const dir = nextRecord["Direcci√≥n"] || nextRecord["Direccion"] || "la direcci√≥n indicada";
              const medicoId = Array.isArray(nextRecord["M√©dico"]) ? 
                nextRecord["M√©dico"][0] : nextRecord["M√©dico"];
              const medicoNombre = await getDoctorName(medicoId);
              
              const fechaFormateada = formatSpanishDate(nextRecord.Fecha);
              
              sessions[from] = { 
                ...currentSession, 
                attempts: nextAttempt,
                records: futureRecords
              };
              
              return NextResponse.json({
                text: `Te muestro otra opci√≥n de ${specialty}:\n\nüë®‚Äç‚öïÔ∏è Dr. ${medicoNombre}\nüóìÔ∏è ${fechaFormateada} a las ${nextRecord.Hora}\nüìç ${clin}\nüìç ${dir}\n\n¬øTe sirve esta? Confirma con "s√≠".`,
                session: sessions[from]
              });
            } else {
              delete sessions[from];
              return NextResponse.json({
                text: `Lo siento, esas eran todas las opciones futuras de ${specialty} disponibles.\n\n¬øTe gustar√≠a que te contacte cuando tengamos nuevos sobrecupos disponibles?`
              });
            }
          }
          
          return NextResponse.json({
            text: "No entend√≠ tu respuesta. ¬øTe sirve esta cita? Responde \"s√≠\" para confirmar o \"no\" para ver otras opciones."
          });

        case 'getting-name':
          if (text.length < 2) {
            return NextResponse.json({
              text: "Por favor ingresa tu nombre completo para continuar."
            });
          }
          
          sessions[from] = { 
            ...currentSession, 
            stage: 'getting-rut',
            patientName: text 
          };
          return NextResponse.json({
            text: `Gracias ${text}! üë§\n\nAhora necesito tu RUT (con gui√≥n y d√≠gito verificador).\nEjemplos: 12.345.678-9 o 12345678-9`,
            session: sessions[from]
          });

        case 'getting-rut':
          if (!validarRUT(text)) {
            const mensajeError = analizarConfusion(text, 'rut');
            currentSession.attempts = (currentSession.attempts || 0) + 1;
            
            // Si ya intent√≥ 3 veces, ofrecer ayuda adicional
            const ayudaAdicional = currentSession.attempts >= 3 ? 
              "\n\nüí° *¬øNecesitas ayuda?* Un RUT v√°lido tiene esta forma:\n‚Ä¢ 12.345.678-9 (con puntos y gui√≥n)\n‚Ä¢ 12345678-9 (sin puntos pero con gui√≥n)\n‚Ä¢ El √∫ltimo d√≠gito puede ser un n√∫mero del 0-9 o la letra K" : "";
            
            sessions[from] = { ...currentSession };
            return NextResponse.json({
              text: mensajeError + ayudaAdicional
            });
          }
          
          sessions[from] = { 
            ...currentSession, 
            stage: 'getting-phone',
            patientRut: text,
            attempts: 0 // Reset attempts para el siguiente campo
          };
          return NextResponse.json({
            text: "Perfecto! üìã\n\nAhora tu n√∫mero de tel√©fono (incluye +56 si es de Chile).\nEjemplo: +56912345678",
            session: sessions[from]
          });

        case 'getting-phone':
          if (!validarTelefono(text)) {
            const mensajeError = analizarConfusion(text, 'telefono');
            currentSession.attempts = (currentSession.attempts || 0) + 1;
            
            // Si ya intent√≥ 3 veces, ofrecer ayuda adicional
            const ayudaAdicional = currentSession.attempts >= 3 ? 
              "\n\nüí° *Formatos v√°lidos de tel√©fono:*\n‚Ä¢ +56912345678 (celular con +56)\n‚Ä¢ 912345678 (celular sin c√≥digo)\n‚Ä¢ 221234567 (fijo con c√≥digo de √°rea)\n‚Ä¢ 12345678 (fijo sin c√≥digo)" : "";
            
            sessions[from] = { ...currentSession };
            return NextResponse.json({
              text: mensajeError + ayudaAdicional
            });
          }
          
          sessions[from] = { 
            ...currentSession, 
            stage: 'getting-email',
            patientPhone: text,
            attempts: 0 // Reset attempts para el siguiente campo
          };
          return NextResponse.json({
            text: "Excelente! üìû\n\nFinalmente, tu email para enviarte la confirmaci√≥n:",
            session: sessions[from]
          });

        case 'getting-email':
          if (!validarEmail(text)) {
            const mensajeError = analizarConfusion(text, 'email');
            currentSession.attempts = (currentSession.attempts || 0) + 1;
            
            // Si ya intent√≥ 3 veces, ofrecer ayuda adicional
            const ayudaAdicional = currentSession.attempts >= 3 ? 
              "\n\nüí° *Un email v√°lido debe tener:*\n‚Ä¢ Un nombre: juan\n‚Ä¢ El s√≠mbolo @\n‚Ä¢ Un dominio: gmail.com\n‚Ä¢ Ejemplo completo: juan@gmail.com" : "";
            
            sessions[from] = { ...currentSession };
            return NextResponse.json({
              text: mensajeError + ayudaAdicional
            });
          }

          // Generar sesi√≥n de pago
          const paymentSessionId = `PAY_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
          const sobrecupoDataForPayment = currentSession.records[0]?.fields;
          const paymentAmount = "2990"; // Precio actualizado: $2.990 CLP
          
          // Obtener nombre del doctor para la URL de pago
          const doctorNameForPayment = await getDoctorName(
            Array.isArray(sobrecupoDataForPayment["M√©dico"]) ? 
              sobrecupoDataForPayment["M√©dico"][0] : sobrecupoDataForPayment["M√©dico"]
          );
          
          try {
            // Crear enlace corto de pago
            const linkResponse = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/payment/create-link`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                sobrecupoId: currentSession.records[0].id,
                patientName: currentSession.patientName,
                patientRut: currentSession.patientRut,
                patientPhone: currentSession.patientPhone,
                patientEmail: text,
                patientAge: currentSession.patientAge,
                doctorName: doctorNameForPayment,
                specialty: currentSession.specialty,
                date: formatSpanishDate(sobrecupoDataForPayment.Fecha),
                time: sobrecupoDataForPayment.Hora,
                clinic: sobrecupoDataForPayment.Cl√≠nica || sobrecupoDataForPayment.Clinica || 'Cl√≠nica',
                amount: paymentAmount,
                sessionId: paymentSessionId,
                motivo: currentSession.motivo || null // üÜï AGREGAR MOTIVO DE CONSULTA
              })
            });

            const linkResult = await linkResponse.json();
            
            let paymentUrl = '';
            if (linkResult.success) {
              paymentUrl = linkResult.shortUrl;
              console.log('‚úÖ Enlace corto creado:', paymentUrl);
            } else {
              // Fallback al enlace largo si falla
              paymentUrl = `/pago?sobrecupoId=${currentSession.records[0].id}&patientName=${encodeURIComponent(currentSession.patientName)}&patientRut=${encodeURIComponent(currentSession.patientRut)}&patientPhone=${encodeURIComponent(currentSession.patientPhone)}&patientEmail=${encodeURIComponent(text)}&patientAge=${encodeURIComponent(currentSession.patientAge)}&doctorName=${encodeURIComponent(doctorNameForPayment)}&specialty=${encodeURIComponent(currentSession.specialty)}&date=${encodeURIComponent(formatSpanishDate(sobrecupoDataForPayment.Fecha))}&time=${encodeURIComponent(sobrecupoDataForPayment.Hora)}&clinic=${encodeURIComponent(sobrecupoDataForPayment.Cl√≠nica || sobrecupoDataForPayment.Clinica || 'Cl√≠nica')}&amount=${paymentAmount}&sessionId=${paymentSessionId}`;
              console.log('‚ö†Ô∏è Fallback a enlace largo:', linkResult.error);
            }

            // Actualizar sesi√≥n con datos de pago
            sessions[from] = { 
              ...currentSession, 
              stage: 'pending-payment',
              patientEmail: text,
              paymentSessionId: paymentSessionId,
              paymentUrl: paymentUrl
            };
            
            return NextResponse.json({
              text: `‚úÖ ¬°Perfecto! Tengo todos tus datos:\n\nüë§ ${currentSession.patientName}\nüìß ${text}\nüì± ${currentSession.patientPhone}\nüÜî ${currentSession.patientRut}\nüìÖ ${currentSession.patientAge} a√±os\n\nüí∞ **√öltimo paso: Confirmar pago**\n\nValor autorizaci√≥n de sobrecupo: **$${parseInt(paymentAmount).toLocaleString('es-CL')} CLP**\n\nüîó **ENLACE DE PAGO:**\n${paymentUrl}`,
              session: sessions[from],
              paymentButton: {
                text: "üí≥ Procesar Pago",
                url: paymentUrl,
                amount: `$${parseInt(paymentAmount).toLocaleString('es-CL')} CLP`
              }
            });

          } catch (linkError) {
            console.error('‚ùå Error creando enlace de pago:', linkError);
            
            // Fallback al enlace largo
            const fallbackPaymentUrl = `/pago?sobrecupoId=${currentSession.records[0].id}&patientName=${encodeURIComponent(currentSession.patientName)}&patientRut=${encodeURIComponent(currentSession.patientRut)}&patientPhone=${encodeURIComponent(currentSession.patientPhone)}&patientEmail=${encodeURIComponent(text)}&patientAge=${encodeURIComponent(currentSession.patientAge)}&doctorName=${encodeURIComponent(doctorNameForPayment)}&specialty=${encodeURIComponent(currentSession.specialty)}&date=${encodeURIComponent(formatSpanishDate(sobrecupoDataForPayment.Fecha))}&time=${encodeURIComponent(sobrecupoDataForPayment.Hora)}&clinic=${encodeURIComponent(sobrecupoDataForPayment.Cl√≠nica || sobrecupoDataForPayment.Clinica || 'Cl√≠nica')}&amount=${paymentAmount}&sessionId=${paymentSessionId}`;
            
            sessions[from] = { 
              ...currentSession, 
              stage: 'pending-payment',
              patientEmail: text,
              paymentSessionId: paymentSessionId,
              paymentUrl: fallbackPaymentUrl
            };
            
            return NextResponse.json({
              text: `‚úÖ ¬°Perfecto! Tengo todos tus datos:\n\nüë§ ${currentSession.patientName}\nüìß ${text}\nüì± ${currentSession.patientPhone}\nüÜî ${currentSession.patientRut}\nüìÖ ${currentSession.patientAge} a√±os\n\nüí∞ **√öltimo paso: Confirmar pago**\n\nValor autorizaci√≥n de sobrecupo: **$${parseInt(paymentAmount).toLocaleString('es-CL')} CLP**\n\nüîó **ENLACE DE PAGO:**\n${fallbackPaymentUrl}`,
              session: sessions[from],
              paymentButton: {
                text: "üí≥ Procesar Pago",
                url: fallbackPaymentUrl,
                amount: `$${parseInt(paymentAmount).toLocaleString('es-CL')} CLP`
              }
            });
          }

        case 'pending-payment':
          // Usuario escribi√≥ algo mientras esperaba el pago
          if (text.toLowerCase().includes('enlace') || text.toLowerCase().includes('pago') || text.toLowerCase().includes('reenviar')) {
            // Reenviar enlace de pago
            const paymentUrl = currentSession.paymentUrl || '/pago';
            return NextResponse.json({
              text: `üîó **Aqu√≠ tienes nuevamente el enlace de pago:**\n\nValor: **$2.990 CLP**\n\nCompleta el pago para confirmar tu reserva.`,
              paymentButton: {
                text: "üí≥ Procesar Pago",
                url: paymentUrl,
                amount: "$2.990 CLP"
              }
            });
          }
          
          return NextResponse.json({
            text: `‚è≥ Tu pago est√° pendiente.\n\nPor favor, completa el pago haciendo clic en el enlace que te envi√© para confirmar tu reserva.\n\nEscribe "enlace" si necesitas que te reenv√≠e el enlace de pago.`
          });

        case 'payment-completed':
          // Esta secci√≥n se ejecutar√° despu√©s de que se confirme el pago
          // üî• VERIFICACI√ìN ROBUSTA DE DATOS DE SESI√ìN
          const { patientAge, patientName, patientRut, patientPhone, patientEmail, records, specialty } = currentSession;
          
          console.log("üîç === DEBUG SESI√ìN ===");
          console.log("üìã Datos de sesi√≥n disponibles:", {
            patientAge: !!patientAge,
            patientName: !!patientName, 
            patientRut: !!patientRut,
            patientPhone: !!patientPhone,
            records: !!records,
            recordsLength: records?.length || 0,
            specialty: !!specialty
          });

          // üî• VALIDACI√ìN CR√çTICA: Verificar que tenemos todos los datos
          if (!patientAge || !patientName || !patientRut || !patientPhone || !records || !records[0]) {
            console.error("‚ùå DATOS DE SESI√ìN INCOMPLETOS:", {
              patientAge: !!patientAge,
              patientName: !!patientName, 
              patientRut: !!patientRut,
              patientPhone: !!patientPhone,
              records: !!records,
              recordsLength: records?.length || 0
            });
            
            delete sessions[from];
            return NextResponse.json({
              text: "Lo siento, se perdieron algunos datos durante el proceso. Por favor, comienza nuevamente escribiendo 'hola'."
            });
          }

          const sobrecupoData = records[0]?.fields;
          const sobrecupoId = records[0]?.id;
          
          if (!sobrecupoData || !sobrecupoId) {
            console.error("‚ùå DATOS DE SOBRECUPO INCOMPLETOS:", {
              sobrecupoData: !!sobrecupoData,
              sobrecupoId: !!sobrecupoId,
              recordsStructure: records[0]
            });
            
            delete sessions[from];
            return NextResponse.json({
              text: "Error con los datos del sobrecupo. Por favor, intenta nuevamente."
            });
          }

          console.log("‚úÖ Datos validados correctamente - Procediendo con confirmaci√≥n");
          console.log("üìã ID del sobrecupo:", sobrecupoId);
          
          // Verificar variables de entorno cr√≠ticas
          if (!AIRTABLE_API_KEY || !AIRTABLE_BASE_ID || !AIRTABLE_TABLE_ID) {
            console.error("‚ùå Variables de entorno cr√≠ticas faltantes:", {
              AIRTABLE_API_KEY: !!AIRTABLE_API_KEY,
              AIRTABLE_BASE_ID: !!AIRTABLE_BASE_ID,
              AIRTABLE_TABLE_ID: !!AIRTABLE_TABLE_ID
            });
            return NextResponse.json({
              text: "Error de configuraci√≥n del servidor. Por favor, contacta soporte."
            });
          }

          let statusText = "";
          let sobrecupoUpdated = false;
          let pacienteCreated = false;
          let emailSent = false;

          try {
            // 1. CREAR PACIENTE EN TABLA PACIENTES (SI EXISTE)
            let pacienteId = null;
            if (process.env.AIRTABLE_PATIENTS_TABLE) {
              try {
                console.log("üë§ Creando paciente en tabla Pacientes...");
                
                const pacienteData = {
                  fields: {
                    Nombre: patientName,
                    RUT: patientRut,
                    Telefono: patientPhone,
                    Email: text,
                    Edad: patientAge,
                    "Fecha Registro": new Date().toISOString().split('T')[0]
                  }
                };
                
                console.log("üì§ Datos del paciente:", pacienteData);
                
                const pacienteResponse = await fetch(
                  `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${process.env.AIRTABLE_PATIENTS_TABLE}`,
                  {
                    method: "POST",
                    headers: {
                      Authorization: `Bearer ${AIRTABLE_API_KEY}`,
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify(pacienteData),
                  }
                );

                if (pacienteResponse.ok) {
                  const pacienteResult = await pacienteResponse.json();
                  pacienteId = pacienteResult.id;
                  pacienteCreated = true;
                  console.log("‚úÖ Paciente creado exitosamente:", pacienteId);
                } else {
                  const errorData = await pacienteResponse.json();
                  console.error("‚ö†Ô∏è Error creando paciente:", errorData);
                  
                  console.error("üìã Detalles del error paciente:", {
                    status: pacienteResponse.status,
                    message: errorData.error?.message || 'Error desconocido',
                    type: errorData.error?.type || 'N/A',
                    fieldsEnviados: Object.keys(pacienteData.fields)
                  });
                }
              } catch (pacienteErr) {
                console.error("‚ö†Ô∏è Error de conexi√≥n creando paciente:", pacienteErr);
              }
            } else {
              console.log("‚ö†Ô∏è AIRTABLE_PATIENTS_TABLE no configurado, saltando creaci√≥n de paciente");
            }

            // 2. ACTUALIZAR SOBRECUPO (CR√çTICO) - SIN CAMPO PACIENTE
            console.log("üìÖ Actualizando sobrecupo...");
            console.log("üéØ Sobrecupo ID:", sobrecupoId);
            
            const updateData = {
              fields: {
                Disponible: "No",
                RUT: patientRut,
                Edad: patientAge,
                Nombre: patientName,
                Telefono: patientPhone,
                Email: text
                // üî• REMOVIDO: Campo "Paciente" no existe en tabla Sobrecupos
              }
            };

            console.log("üì§ Datos de actualizaci√≥n sobrecupo:", updateData);

            const updateResponse = await fetch(
              `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_ID}/${sobrecupoId}`,
              {
                method: "PATCH",
                headers: {
                  Authorization: `Bearer ${AIRTABLE_API_KEY}`,
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(updateData),
              }
            );

            console.log("üì° Respuesta actualizaci√≥n sobrecupo:", updateResponse.status);

            if (updateResponse.ok) {
              sobrecupoUpdated = true;
              console.log("‚úÖ Sobrecupo actualizado exitosamente");
            } else {
              const errorData = await updateResponse.json();
              console.error("‚ùå Error actualizando sobrecupo:", errorData);
              
              console.error("üö® Detalles del error sobrecupo:", {
                status: updateResponse.status,
                message: errorData.error?.message || 'Error desconocido',
                type: errorData.error?.type || 'N/A',
                recordId: sobrecupoId,
                fieldsEnviados: Object.keys(updateData.fields),
                updateData: updateData
              });
              
              throw new Error(`Error actualizando sobrecupo: ${updateResponse.status} - ${errorData.error?.message}`);
            }

            // 3. NOTIFICAR AL M√âDICO VIA WHATSAPP
            if (sobrecupoUpdated) {
              try {
                console.log("üì± Enviando WhatsApp al m√©dico...");
                
                const medicoId = Array.isArray(sobrecupoData["M√©dico"]) ? 
                  sobrecupoData["M√©dico"][0] : sobrecupoData["M√©dico"];
                
                // Obtener datos completos del m√©dico incluyendo WhatsApp
                const doctorInfo = await getDoctorInfo(medicoId);
                
                if (doctorInfo.whatsapp) {
                  const fechaFormateada = formatSpanishDate(sobrecupoData.Fecha);
                  
                  await whatsAppService.notifyDoctorNewPatient(
                    {
                      name: doctorInfo.name,
                      whatsapp: doctorInfo.whatsapp
                    },
                    {
                      name: patientName,
                      rut: patientRut,
                      phone: patientPhone,
                      email: text
                    },
                    {
                      fecha: fechaFormateada,
                      hora: sobrecupoData.Hora,
                      clinica: sobrecupoData["Cl√≠nica"] || sobrecupoData["Clinica"] || "Cl√≠nica",
                      direccion: sobrecupoData["Direcci√≥n"] || sobrecupoData["Direccion"] || ""
                    }
                  );
                  
                  console.log("‚úÖ WhatsApp enviado al m√©dico exitosamente");
                  
                  // Enviar email al m√©dico tambi√©n
                  if (SENDGRID_API_KEY && SENDGRID_FROM_EMAIL && doctorInfo.email) {
                    try {
                      console.log("üìß Enviando email de notificaci√≥n al m√©dico...");
                      
                      const doctorEmailContent = `¬°Hola Dr/a. ${doctorInfo.name}!

¬°Tienes un nuevo paciente registrado! üéâ

üìÖ DETALLES DE LA CITA:
‚Ä¢ Fecha: ${fechaFormateada}
‚Ä¢ Hora: ${sobrecupoData.Hora}  
‚Ä¢ Especialidad: ${specialty}
‚Ä¢ Cl√≠nica: ${sobrecupoData["Cl√≠nica"] || sobrecupoData["Clinica"] || "Cl√≠nica"}
‚Ä¢ Direcci√≥n: ${sobrecupoData["Direcci√≥n"] || sobrecupoData["Direccion"] || ""}

üë§ DATOS DEL PACIENTE:
‚Ä¢ Nombre: ${patientName}
‚Ä¢ RUT: ${patientRut}
‚Ä¢ Tel√©fono: ${patientPhone}
‚Ä¢ Email: ${text}
‚Ä¢ Edad: ${patientAge} a√±os

‚úÖ El paciente ha confirmado su asistencia.

Saludos,
Sistema Sobrecupos AI`;

                      const doctorEmailResponse = await fetch("https://api.sendgrid.com/v3/mail/send", {
                        method: "POST",
                        headers: {
                          Authorization: `Bearer ${SENDGRID_API_KEY}`,
                          "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                          personalizations: [{
                            to: [{ email: doctorInfo.email, name: doctorInfo.name }],
                            subject: `üë®‚Äç‚öïÔ∏è Nuevo paciente: ${patientName} - ${fechaFormateada} ${sobrecupoData.Hora}`
                          }],
                          from: { email: SENDGRID_FROM_EMAIL, name: "Sobrecupos AI" },
                          content: [{ type: "text/plain", value: doctorEmailContent }]
                        })
                      });

                      if (doctorEmailResponse.ok) {
                        console.log("‚úÖ Email enviado al m√©dico exitosamente");
                      } else {
                        const errorData = await doctorEmailResponse.json();
                        console.error("‚ùå Error enviando email al m√©dico:", errorData);
                      }
                    } catch (doctorEmailErr) {
                      console.error("‚ö†Ô∏è Error enviando email al m√©dico (no cr√≠tico):", doctorEmailErr);
                    }
                  } else {
                    console.log("‚ö†Ô∏è Email al m√©dico no enviado - falta SendGrid config o email del m√©dico");
                  }
                } else {
                  console.log("‚ö†Ô∏è M√©dico no tiene WhatsApp configurado");
                }
              } catch (whatsappErr) {
                console.error("‚ö†Ô∏è Error enviando WhatsApp al m√©dico (no cr√≠tico):", whatsappErr);
              }
            }

            // 4. ENVIAR EMAIL DE CONFIRMACI√ìN (SI EST√Å CONFIGURADO)
            if (SENDGRID_API_KEY && SENDGRID_FROM_EMAIL && sobrecupoUpdated) {
              try {
                console.log("üìß Enviando email de confirmaci√≥n...");
                
                const fechaFormateada = formatSpanishDate(sobrecupoData.Fecha);
                const emailContent = `¬°Hola ${patientName}!

Tu cita m√©dica ha sido confirmada exitosamente.

üìÖ DETALLES DE TU CITA:
‚Ä¢ Especialidad: ${specialty}
‚Ä¢ Fecha: ${fechaFormateada}
‚Ä¢ Hora: ${sobrecupoData.Hora}
‚Ä¢ Cl√≠nica: ${sobrecupoData["Cl√≠nica"] || sobrecupoData["Clinica"]}
‚Ä¢ Direcci√≥n: ${sobrecupoData["Direcci√≥n"] || sobrecupoData["Direccion"]}

üë§ TUS DATOS:
‚Ä¢ Nombre: ${patientName}
‚Ä¢ RUT: ${patientRut}
‚Ä¢ Tel√©fono: ${patientPhone}

üìù RECOMENDACIONES:
‚Ä¢ Llega 15 minutos antes de tu cita
‚Ä¢ Trae tu c√©dula de identidad
‚Ä¢ Si tienes seguros m√©dicos, trae la credencial

¬°Nos vemos pronto!

Saludos,
Equipo Sobrecupos AI`;

                const emailResponse = await fetch("https://api.sendgrid.com/v3/mail/send", {
                  method: "POST",
                  headers: {
                    Authorization: `Bearer ${SENDGRID_API_KEY}`,
                    "Content-Type": "application/json"
                  },
                  body: JSON.stringify({
                    personalizations: [{
                      to: [{ email: text, name: patientName }],
                      subject: `ü©∫ Cita confirmada: ${specialty} - ${fechaFormateada}`
                    }],
                    from: { email: SENDGRID_FROM_EMAIL, name: "Sobrecupos AI" },
                    content: [{ type: "text/plain", value: emailContent }]
                  })
                });

                if (emailResponse.ok) {
                  emailSent = true;
                  console.log("‚úÖ Email enviado exitosamente");
                } else {
                  console.log("‚ö†Ô∏è Error enviando email (no cr√≠tico)");
                }
              } catch (emailErr) {
                console.error("‚ö†Ô∏è Error enviando email (no cr√≠tico):", emailErr);
              }
            }

          } catch (error) {
            console.error("‚ùå Error en proceso de confirmaci√≥n:", error);
            
            let errorMessage = "Lo siento, hubo un error procesando tu reserva.";
            
            if (error.message.includes('404')) {
              errorMessage = "Error: No se pudo encontrar el registro. Por favor intenta nuevamente.";
            } else if (error.message.includes('422')) {
              errorMessage = "Error: Datos inv√°lidos. Verifica la informaci√≥n e intenta nuevamente.";
            } else if (error.message.includes('403')) {
              errorMessage = "Error: Sin permisos para actualizar. Contacta soporte.";
            }
            
            delete sessions[from];
            
            return NextResponse.json({
              text: `${errorMessage}\n\nDetalles t√©cnicos: ${error.message}\n\nPor favor intenta nuevamente escribiendo 'hola'.`
            });
          }

          // Limpiar sesi√≥n
          delete sessions[from];

          // MENSAJE FINAL DE CONFIRMACI√ìN
          if (sobrecupoUpdated) {
            const fechaFormateadaFinal = formatSpanishDate(sobrecupoData.Fecha);
            statusText = `üéâ ¬°CITA CONFIRMADA! 

üìã RESUMEN:
‚Ä¢ ${specialty}
‚Ä¢ ${fechaFormateadaFinal} a las ${sobrecupoData.Hora}
‚Ä¢ ${sobrecupoData["Cl√≠nica"] || sobrecupoData["Clinica"]}

${emailSent ? "üìß Te hemos enviado la confirmaci√≥n por email." : ""}
${pacienteCreated ? "üë§ Registro de paciente creado." : ""}

üí° Llega 15 minutos antes. ¬°Nos vemos pronto!`;
          } else {
            statusText = `‚ö†Ô∏è Tu cita est√° siendo procesada.

üìã DATOS REGISTRADOS:
‚Ä¢ Nombre: ${patientName}
‚Ä¢ Especialidad: ${specialty} 
‚Ä¢ Email: ${text}

Te contactaremos pronto para confirmar los detalles finales.`;
          }

          console.log("üè• ======================");
          console.log("üè• PROCESO COMPLETADO");
          console.log("üè• Paciente creado:", pacienteCreated);
          console.log("üè• Sobrecupo actualizado:", sobrecupoUpdated);
          console.log("üè• Email enviado:", emailSent);
          console.log("üè• Status final:", sobrecupoUpdated ? '√âXITO' : 'ERROR');
          console.log("üè• ======================");

          return NextResponse.json({ text: statusText });

        case 'choosing-from-alternatives':
          // Manejar selecci√≥n de opciones alternativas
          const selectedOption = text.toLowerCase().trim();
          const { alternativeOptions: altOptions } = currentSession;
          
          if (selectedOption === '1' && altOptions[0]) {
            const selectedRecord = altOptions[0];
            sessions[from] = {
              ...currentSession,
              selectedRecord: selectedRecord,
              stage: 'awaiting-confirmation',
              attempts: 0
            };
            
            const medicoId = Array.isArray(selectedRecord.fields["M√©dico"]) ? 
              selectedRecord.fields["M√©dico"][0] : selectedRecord.fields["M√©dico"];
            const medicoNombre = await getDoctorName(medicoId);
            const fechaFormateada = formatSpanishDate(selectedRecord.fields?.Fecha);
            const clin = selectedRecord.fields?.["Cl√≠nica"] || selectedRecord.fields?.["Clinica"];
            const dir = selectedRecord.fields?.["Direcci√≥n"] || selectedRecord.fields?.["Direccion"] || "";
            
            return NextResponse.json({
              text: `Perfecto. Has seleccionado:\n\nüë®‚Äç‚öïÔ∏è **Dr. ${medicoNombre}**\nüìÖ ${fechaFormateada} a las ${selectedRecord.fields?.Hora}\nüìç ${clin}\nüìç ${dir}\n\n¬øConfirmas esta cita? Responde **S√≠** para proceder con la reserva.`,
              session: sessions[from]
            });
          }
          else if (selectedOption === '2' && altOptions[1]) {
            const selectedRecord = altOptions[1];
            sessions[from] = {
              ...currentSession,
              selectedRecord: selectedRecord,
              stage: 'awaiting-confirmation',
              attempts: 0
            };
            
            const medicoId = Array.isArray(selectedRecord.fields["M√©dico"]) ? 
              selectedRecord.fields["M√©dico"][0] : selectedRecord.fields["M√©dico"];
            const medicoNombre = await getDoctorName(medicoId);
            const fechaFormateada = formatSpanishDate(selectedRecord.fields?.Fecha);
            const clin = selectedRecord.fields?.["Cl√≠nica"] || selectedRecord.fields?.["Clinica"];
            const dir = selectedRecord.fields?.["Direcci√≥n"] || selectedRecord.fields?.["Direccion"] || "";
            
            return NextResponse.json({
              text: `Perfecto. Has seleccionado:\n\nüë®‚Äç‚öïÔ∏è **Dr. ${medicoNombre}**\nüìÖ ${fechaFormateada} a las ${selectedRecord.fields?.Hora}\nüìç ${clin}\nüìç ${dir}\n\n¬øConfirmas esta cita? Responde **S√≠** para proceder con la reserva.`,
              session: sessions[from]
            });
          }
          else {
            return NextResponse.json({
              text: "Por favor responde con el n√∫mero de la opci√≥n que prefieres: **1** o **2**."
            });
          }

        case 'asking-for-contact-data':
          // Manejar si quiere que tomemos sus datos para contacto futuro
          const respuestaContacto = text.toLowerCase().trim();
          const { specialty: specialtyContacto } = currentSession;
          
          if (/\b(s√≠|si|s|yes|ok|vale)\b/i.test(respuestaContacto)) {
            // Usuario quiere que tomemos sus datos
            delete sessions[from];
            return NextResponse.json({
              text: `Perfecto. Para avisarte cuando haya sobrecupos de **${specialtyContacto}** disponibles, necesito tus datos:\n\n‚Ä¢ **Nombre completo**\n‚Ä¢ **N√∫mero de tel√©fono**\n‚Ä¢ **Email** (opcional)\n\nPor favor comp√°rtelos en tu pr√≥ximo mensaje.`
            });
          } else {
            // Usuario no quiere que tomemos sus datos - mensaje final conciso
            delete sessions[from];
            return NextResponse.json({
              text: `Entendido. ¬°Que te mejores pronto! Si necesitas ayuda m√©dica en el futuro, no dudes en contactarme. üè•`
            });
          }

        case 'asking-for-other-doctors':
          // Manejar respuesta sobre si quiere buscar otros m√©dicos
          const respuestaBusqueda = text.toLowerCase().trim();
          const { specialty: specialtyBusqueda, doctorName: doctorNameBusqueda, motivo } = currentSession;
          
          if (/\b(s√≠|si|s|yes|ok|vale|bueno|perfecto)\b/i.test(respuestaBusqueda)) {
            // Usuario acepta buscar otros m√©dicos - buscar m√©dicos de la misma especialidad
            try {
              // Buscar todos los m√©dicos de la especialidad
              const response = await fetch(
                `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${process.env.AIRTABLE_DOCTORS_TABLE}?filterByFormula=AND({Especialidad}='${specialtyBusqueda}',{Name}!='${doctorNameBusqueda}')`,
                { headers: { Authorization: `Bearer ${AIRTABLE_API_KEY}` } }
              );
              
              if (!response.ok) {
                throw new Error(`Error en API de doctores: ${response.status}`);
              }
              
              const doctorsData = await response.json();
              const availableDoctors = doctorsData.records || [];
              
              if (availableDoctors.length === 0) {
                // No hay m√°s m√©dicos de esta especialidad
                delete sessions[from];
                return NextResponse.json({
                  text: `Lamentablemente no tengo m√°s m√©dicos de ${specialtyBusqueda} disponibles en este momento.\n\nSi quieres, puedo tomar tus datos para avisarte cuando tengamos nuevos sobrecupos de ${specialtyBusqueda}. ¬øTe parece?`
                });
              }
              
              // Hay otros m√©dicos disponibles - proceder con b√∫squeda normal por especialidad
              delete sessions[from];
              
              // Generar respuesta emp√°tica usando el motivo original
              let respuestaEmpatica = "Entiendo tu necesidad de atenci√≥n m√©dica.";
              if (OPENAI_API_KEY && motivo) {
                try {
                  const empatRes = await fetch("https://api.openai.com/v1/chat/completions", {
                    method: "POST",
                    headers: {
                      Authorization: `Bearer ${OPENAI_API_KEY}`,
                      "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                      model: "gpt-4o-mini",
                      temperature: 0.7,
                      max_tokens: 60,
                      messages: [
                        {
                          role: "system",
                          content: "Eres una secretaria m√©dica chilena emp√°tica y profesional. Responde con comprensi√≥n al paciente que describe su problema m√©dico. M√°ximo 2 l√≠neas, tono c√°lido y humano."
                        },
                        { role: "user", content: `Paciente dice: "${motivo}"` }
                      ]
                    })
                  });
                  const empatJson = await empatRes.json();
                  respuestaEmpatica = empatJson.choices?.[0]?.message?.content?.trim() || "Entiendo tu preocupaci√≥n.";
                } catch (err) {
                  console.error("‚ùå Error OpenAI emp√°tico:", err);
                }
              }
              
              sessions[from] = {
                stage: 'getting-age-for-filtering',
                specialty: specialtyBusqueda,
                respuestaEmpatica,
                motivo: motivo,
                attempts: 0
              };
              
              return NextResponse.json({
                text: `${respuestaEmpatica}\n\nPerfecto, te ayudo a buscar otros m√©dicos de **${specialtyBusqueda}** con horarios disponibles.\n\n¬øMe podr√≠as decir tu edad? Esto me ayuda a encontrar m√©dicos que atiendan pacientes de tu rango etario.\n\nEjemplo: 25`,
                session: sessions[from]
              });
              
            } catch (error) {
              console.error("‚ùå Error buscando otros m√©dicos:", error);
              delete sessions[from];
              return NextResponse.json({
                text: "Disculpa, hay un problema t√©cnico buscando otros m√©dicos. Intenta m√°s tarde o cu√©ntame tu s√≠ntoma nuevamente."
              });
            }
          } 
          else if (respuestaBusqueda.includes('no') || respuestaBusqueda === 'n') {
            delete sessions[from];
            return NextResponse.json({
              text: "Entiendo. Si en alg√∫n momento necesitas ayuda m√©dica o quieres buscar sobrecupos, no dudes en escribirme. ¬øHay algo m√°s en lo que pueda ayudarte?"
            });
          }
          else {
            return NextResponse.json({
              text: "Por favor responde **'s√≠'** si quieres que busque otros m√©dicos disponibles, o **'no'** si prefieres dejarlo por ahora.",
              session: sessions[from]
            });
          }
          break;

        case 'no-more-options-available':
          // Manejar respuestas cuando no hay m√°s opciones disponibles
          const respuestaNoOptions = text.toLowerCase().trim();
          const { specialty: specialtyNoOptions } = currentSession;
          
          // Detectar si pregunta por otros profesionales de la misma especialidad
          const preguntaOtrosProfesionales = respuestaNoOptions.includes('otros profesionales') ||
                                           respuestaNoOptions.includes('otro neur√≥logo') ||
                                           respuestaNoOptions.includes('otros neur√≥logos') ||
                                           respuestaNoOptions.includes('otro m√©dico') ||
                                           respuestaNoOptions.includes('otros m√©dicos') ||
                                           respuestaNoOptions.includes('hay otros') ||
                                           respuestaNoOptions.includes('otros doctores') ||
                                           respuestaNoOptions.includes('tienes otros') ||
                                           respuestaNoOptions.includes('otros porfesionales') || // typo com√∫n
                                           respuestaNoOptions.includes('otros profesional') ||
                                           respuestaNoOptions.includes('con hora en neurologia') ||
                                           respuestaNoOptions.includes('con hora de neurologia') ||
                                           (respuestaNoOptions.includes('otros') && respuestaNoOptions.includes(specialtyNoOptions?.toLowerCase())) ||
                                           respuestaNoOptions.includes('m√°s opciones') ||
                                           respuestaNoOptions.includes('otras opciones');
          
          if (preguntaOtrosProfesionales) {
            console.log("üîÑ Usuario pregunta por otros profesionales de", specialtyNoOptions);
            // MANTENER la sesi√≥n para la siguiente respuesta sobre datos de contacto
            sessions[from] = {
              ...currentSession,
              stage: 'no-more-options-available',
              specialty: specialtyNoOptions,
              waitingForContactResponse: true
            };
            return NextResponse.json({
              text: `Como te mencion√© anteriormente, no tengo m√°s sobrecupos disponibles de **${specialtyNoOptions}** en este momento.\n\nüìù Si quieres, puedo tomar tus datos de contacto para avisarte cuando tengamos nuevos sobrecupos de ${specialtyNoOptions} disponibles. ¬øTe parece bien?`,
              session: sessions[from]
            });
          }
          
          // Si responde afirmativamente para dejar datos
          if (/\b(s√≠|si|s|yes|ok|vale|bueno)\b/i.test(respuestaNoOptions)) {
            delete sessions[from];
            return NextResponse.json({
              text: `Perfecto. Para avisarte cuando haya sobrecupos de **${specialtyNoOptions}** disponibles, necesito tus datos:\n\n‚Ä¢ **Nombre completo**\n‚Ä¢ **N√∫mero de tel√©fono**\n‚Ä¢ **Email** (opcional)\n\nPor favor comp√°rtelos en tu pr√≥ximo mensaje.`
            });
          }
          
          // Si dice que no
          if (respuestaNoOptions.includes('no') || respuestaNoOptions === 'n') {
            delete sessions[from];
            return NextResponse.json({
              text: "Entiendo. Si cambias de opini√≥n o tienes otros s√≠ntomas o consultas m√©dicas, no dudes en escribirme. Estoy aqu√≠ para ayudarte."
            });
          }
          
          // Si no entiende la respuesta
          return NextResponse.json({
            text: `Por favor responde **'s√≠'** si quieres que te avise cuando haya sobrecupos de ${specialtyNoOptions} disponibles, o **'no'** si prefieres dejarlo por ahora.`,
            session: sessions[from]
          });
          break;

        default:
          break;
      }
    }

    // Saludo simple - respuesta inicial
    if (esSaludoSimple(text)) {
      return NextResponse.json({
        text: "¬°Hola! üòä Soy Sobrecupos IA, tu asistente m√©dico personal.\n\n¬øEn qu√© te puedo ayudar? Cu√©ntame tus s√≠ntomas, el m√©dico o especialidad que buscas y te ayudo a encontrar una hora disponible."
      });
    }

    // üî• DETECTAR ESPECIALIDAD DIRECTA PRIMERO
    const especialidadDirecta = detectarEspecialidadDirecta(text);
    
    if (especialidadDirecta) {
      const especialidadesDisponibles = await getEspecialidadesDisponibles();
      
      if (!especialidadesDisponibles.includes(especialidadDirecta)) {
        return NextResponse.json({
          text: `Entiendo que est√°s buscando atenci√≥n especializada.\n\nLamentablemente no tengo sobrecupos de ${especialidadDirecta} disponibles en este momento, pero puedo conseguirte una cita si me dejas tus datos para contactarte apenas tengamos disponibilidad.\n\n¬øTe gustar√≠a que te contacte cuando tengamos ${especialidadDirecta} disponible?`
        });
      }
      
      const specialty = especialidadDirecta;
      
      let respuestaEmpatica = "";
      if (OPENAI_API_KEY) {
        try {
          const empatRes = await fetch("https://api.openai.com/v1/chat/completions", {
            method: "POST",
            headers: {
              Authorization: `Bearer ${OPENAI_API_KEY}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              model: "gpt-4o-mini",
              temperature: 0.7,
              max_tokens: 40,
              messages: [
                {
                  role: "system",
                  content: "Eres Sobrecupos IA, asistente m√©dico chileno, humano y emp√°tico. Responde con una frase breve (m√°x 2 l√≠neas) mostrando comprensi√≥n al usuario que busca una especialidad espec√≠fica. No menciones 'Sobrecupos IA' ni uses comillas."
                },
                { role: "user", content: `Usuario busca: "${specialty}"` }
              ]
            })
          });
          const empatJson = await empatRes.json();
          respuestaEmpatica = empatJson.choices?.[0]?.message?.content?.trim() || "";
        } catch (err) {
          respuestaEmpatica = "Entiendo que necesitas atenci√≥n especializada.";
        }
      }

      sessions[from] = {
        stage: 'getting-age-for-filtering',
        specialty: specialty,
        respuestaEmpatica,
        attempts: 0
      };

      return NextResponse.json({
        text: `${respuestaEmpatica}\n\nPara encontrar el m√©dico m√°s adecuado para ti, ¬øme podr√≠as decir tu edad?\nEjemplo: 25`,
        session: sessions[from]
      });
    }

    // üî• DETECTAR M√âDICO ESPEC√çFICO POR NOMBRE
    const medicoEspecifico = detectarMedicoEspecifico(text);
    
    if (medicoEspecifico) {
      console.log(`üîç Buscando m√©dico espec√≠fico: ${medicoEspecifico}`);
      
      try {
        // Buscar m√©dico en la base de datos
        const medico = await buscarMedicoPorNombre(medicoEspecifico);
        
        if (medico) {
          console.log(`‚úÖ M√©dico encontrado: ${medico.name} - ${medico.especialidad}`);
          
          // Buscar sobrecupos disponibles de este m√©dico
          const sobrecupos = await buscarSobrecuposDeMedico(medico.id);
          
          if (sobrecupos.length > 0) {
            // Mostrar sobrecupos disponibles del m√©dico espec√≠fico
            const sobrecupo = sobrecupos[0]; // Tomar el primero disponible
            const fechaFormateada = formatSpanishDate(sobrecupo.fields?.Fecha);
            
            sessions[from] = {
              stage: 'confirming-appointment',
              selectedSobrecupo: sobrecupo.id,
              doctorName: medico.name,
              specialty: medico.especialidad,
              records: sobrecupos, // üÜï INCLUIR TODOS LOS SOBRECUPOS DEL M√âDICO
              selectedRecord: sobrecupos[0], // üÜï INCLUIR REGISTRO SELECCIONADO
              attempts: 0,
              esMedicoEspecifico: true // üÜï MARCAR COMO M√âDICO ESPEC√çFICO
            };

            return NextResponse.json({
              text: `El sobrecupo m√°s pr√≥ximo con ${medico.name} es:\n\nüìÖ **${fechaFormateada} a las ${sobrecupo.fields?.Hora}**\nüìç ${sobrecupo.fields?.["Cl√≠nica"] || sobrecupo.fields?.["Clinica"]}\n\n¬øTe interesa reservar esta cita? Responde **"s√≠"** para continuar.`,
              session: sessions[from]
            });
          } else {
            return NextResponse.json({
              text: `Encontr√© al Dr/a. ${medico.name} (${medico.especialidad}), pero lamentablemente no tiene sobrecupos disponibles en este momento.\n\n¬øTe gustar√≠a que te ayude a encontrar otro m√©dico de ${medico.especialidad} que s√≠ tenga disponibilidad?`
            });
          }
        } else {
          return NextResponse.json({
            text: `No pude encontrar al m√©dico "${medicoEspecifico}" en nuestra base de datos.\n\n¬øPodr√≠as verificar el nombre completo? O si prefieres, puedo ayudarte a encontrar un especialista por √°rea m√©dica.\n\nPor ejemplo: "Necesito un oftalm√≥logo" o "Busco un dermat√≥logo"`
          });
        }
      } catch (error) {
        console.error('Error buscando m√©dico espec√≠fico:', error);
        return NextResponse.json({
          text: `Hubo un problema buscando al m√©dico "${medicoEspecifico}". ¬øPodr√≠as intentar nuevamente o prefieres que te ayude a buscar por especialidad?`
        });
      }
    }

    // üî• DETECTAR S√çNTOMAS Y MAPEAR A ESPECIALIDADES - FLUJO MEJORADO
    const especialidadPorSintomas = detectarEspecialidadPorSintomas(text);
    
    if (especialidadPorSintomas) {
      const specialty = especialidadPorSintomas;
      console.log(`üéØ Especialidad detectada por s√≠ntomas: ${specialty}`);
      
      // üÜï BUSCAR M√âDICOS DISPONIBLES INMEDIATAMENTE
      try {
        const resp = await fetch(
          `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_ID}?maxRecords=100`,
          { headers: { Authorization: `Bearer ${AIRTABLE_API_KEY}` } }
        );
        const data = await resp.json();
        const sobrecuposRecords = data.records || [];

        // Filtrar por especialidad y disponibilidad
        const availableFiltered = sobrecuposRecords.filter(record => {
          const fields = record.fields || {};
          return fields.Especialidad === specialty && 
                 (fields.Disponible === "Si" || fields.Disponible === true);
        });

        // Filtrar solo fechas futuras
        const available = filterFutureDates(availableFiltered);

        if (available.length === 0) {
          let respuestaEmpatica = "Entiendo tu preocupaci√≥n.";
          if (OPENAI_API_KEY) {
            try {
              const empatRes = await fetch("https://api.openai.com/v1/chat/completions", {
                method: "POST",
                headers: {
                  Authorization: `Bearer ${OPENAI_API_KEY}`,
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({
                  model: "gpt-4o-mini",
                  temperature: 0.7,
                  max_tokens: 50,
                  messages: [
                    {
                      role: "system",
                      content: "Eres Sobrecupos IA, asistente m√©dico chileno emp√°tico. Responde con una frase breve (m√°x 2 l√≠neas) mostrando comprensi√≥n al paciente que describe s√≠ntomas. S√© humano y cercano."
                    },
                    { role: "user", content: `Paciente dice: "${text}"` }
                  ]
                })
              });
              const empatJson = await empatRes.json();
              respuestaEmpatica = empatJson.choices?.[0]?.message?.content?.trim() || "Entiendo tu preocupaci√≥n.";
            } catch (err) {
              console.error("‚ùå Error OpenAI emp√°tico:", err);
            }
          }

          return NextResponse.json({
            text: `${respuestaEmpatica}\n\nPor lo que me describes, necesitas ver a un especialista en ${specialty}, pero lamentablemente no tengo sobrecupos disponibles en este momento.\n\n¬øTe gustar√≠a que te contacte cuando tengamos disponibilidad?`
          });
        }

        // Ordenar por fecha m√°s pr√≥xima y tomar el primero
        available.sort((a, b) => {
          const dateA = new Date(`${a.fields?.Fecha}T${a.fields?.Hora || '00:00'}`);
          const dateB = new Date(`${b.fields?.Fecha}T${b.fields?.Hora || '00:00'}`);
          return dateA - dateB;
        });

        const first = available[0].fields;
        const medicoId = Array.isArray(first["M√©dico"]) ? first["M√©dico"][0] : first["M√©dico"];
        
        // üÜï OBTENER INFO COMPLETA DEL M√âDICO
        let doctorInfo = { name: 'Doctor', atiende: 'Ambos' };
        try {
          const doctorResponse = await fetch(
            `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${process.env.AIRTABLE_DOCTORS_TABLE}/${medicoId}`,
            { headers: { Authorization: `Bearer ${AIRTABLE_API_KEY}` } }
          );
          
          if (doctorResponse.ok) {
            const doctorData = await doctorResponse.json();
            doctorInfo = {
              name: doctorData.fields?.Name || doctorData.fields?.Nombre || 'Doctor',
              atiende: doctorData.fields?.Atiende || 'Ambos'
            };
          }
        } catch (err) {
          console.error("‚ùå Error obteniendo info del m√©dico:", err);
        }

        // Generar respuesta emp√°tica
        let respuestaEmpatica = "Entiendo tu preocupaci√≥n.";
        if (OPENAI_API_KEY) {
          try {
            const empatRes = await fetch("https://api.openai.com/v1/chat/completions", {
              method: "POST",
              headers: {
                Authorization: `Bearer ${OPENAI_API_KEY}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                model: "gpt-4o-mini",
                temperature: 0.7,
                max_tokens: 60,
                messages: [
                  {
                    role: "system",
                    content: "Eres una secretaria m√©dica chilena emp√°tica y profesional. Responde con comprensi√≥n al paciente que describe su problema m√©dico. M√°ximo 2 l√≠neas, tono c√°lido y humano."
                  },
                  { role: "user", content: `Paciente dice: "${text}"` }
                ]
              })
            });
            const empatJson = await empatRes.json();
            respuestaEmpatica = empatJson.choices?.[0]?.message?.content?.trim() || "Entiendo tu preocupaci√≥n.";
          } catch (err) {
            console.error("‚ùå Error OpenAI emp√°tico:", err);
          }
        }

        // Formatear fecha en espa√±ol
        const fechaFormateada = formatSpanishDate(first.Fecha);
        const clin = first["Cl√≠nica"] || first["Clinica"] || "nuestra cl√≠nica";
        const dir = first["Direcci√≥n"] || first["Direccion"] || "la direcci√≥n indicada";

        // üÜï TEXTO SOBRE QU√â PACIENTES ATIENDE
        let atiendeTxt = "";
        switch(doctorInfo.atiende) {
          case "Ni√±os":
            atiendeTxt = " (especialista en pediatr√≠a)";
            break;
          case "Adultos":
            atiendeTxt = " (atiende solo adultos)";
            break;
          case "Ambos":
            atiendeTxt = " (atiende ni√±os y adultos)";
            break;
          default:
            atiendeTxt = " (atiende pacientes de todas las edades)";
        }

        // Guardar en sesi√≥n incluyendo motivo original
        sessions[from] = {
          stage: 'confirming-appointment',
          specialty: specialty,
          respuestaEmpatica,
          motivo: text, // üÜï GUARDAR MOTIVO ORIGINAL
          records: available,
          attempts: 0,
          doctorInfo,
          selectedRecord: available[0] // üîß FIX: Guardar el registro completo con id, no solo fields
        };

        return NextResponse.json({
          text: `${respuestaEmpatica}\n\n‚úÖ Por lo que me describes, te recomiendo ver a un especialista en **${specialty}**.\n\nüë®‚Äç‚öïÔ∏è Tengo disponible al **Dr. ${doctorInfo.name}**${atiendeTxt}\nüìÖ ${fechaFormateada} a las ${first.Hora}\nüìç ${clin}, ${dir}\n\n¬øTe sirve esta cita?\n\nResponde **S√≠** para confirmar o **No** si prefieres otra opci√≥n.`,
          session: sessions[from]
        });

      } catch (error) {
        console.error("‚ùå Error consultando m√©dicos:", error);
        return NextResponse.json({
          text: "Disculpa, hay un problema t√©cnico consultando la disponibilidad. Intenta m√°s tarde."
        });
      }
    }

    // üî• MANEJO ESPECIAL PARA CONSULTAS SOBRE ESPECIALIDADES
    const consultaEspecialidades = text.toLowerCase().includes('especialidad') || 
                                  text.toLowerCase().includes('especialidades') ||
                                  text.toLowerCase().includes('qu√© m√©dicos') ||
                                  text.toLowerCase().includes('que medicos') ||
                                  text.toLowerCase().includes('qu√© doctores') ||
                                  text.toLowerCase().includes('que doctores');

    if (consultaEspecialidades) {
      try {
        const especialidadesDisponibles = await getEspecialidadesDisponibles();
        
        if (especialidadesDisponibles.length > 0) {
          const especialidadesText = especialidadesDisponibles
            .map((esp, idx) => `‚Ä¢ ${esp}`)
            .join('\n');
            
          return NextResponse.json({
            text: `¬°Tengo disponibilidad de sobrecupos en estas especialidades m√©dicas! ü©∫\n\n${especialidadesText}\n\n¬øEn cu√°l de estas necesitas una cita? O cu√©ntame tus s√≠ntomas para recomendarte la especialidad m√°s adecuada.`
          });
        } else {
          return NextResponse.json({
            text: `Por el momento no tengo sobrecupos disponibles, pero puedo ayudarte a reservar una cita regular.\n\n¬øQu√© tipo de especialista necesitas o qu√© s√≠ntomas tienes?`
          });
        }
      } catch (error) {
        console.error("Error obteniendo especialidades:", error);
      }
    }

    // Si llega aqu√≠, usar OpenAI como evaluador inteligente
    if (OPENAI_API_KEY) {
      try {
        // PRIMER PASO: Evaluar si es consulta m√©dica o no m√©dica
        const evaluationRes = await fetch("https://api.openai.com/v1/chat/completions", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${OPENAI_API_KEY}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            model: "gpt-4o-mini",
            temperature: 0.3,
            max_tokens: 150,
            messages: [
              {
                role: "system",
                content: `Eres un evaluador inteligente. Analiza si el mensaje del usuario es:
1. M√âDICO: S√≠ntomas, dolencias, necesidad de especialistas, problemas de salud
2. NO_M√âDICO: Temas cotidianos (comida, transporte, entretenimiento, etc.)

Si es NO_M√âDICO, responde de forma humana y redirige hacia salud (SIN incluir "NO_M√âDICO:" en la respuesta).
Si es M√âDICO, responde solo "M√âDICO".

Ejemplos:
- "Quiero uber" ‚Üí "¬°Uber para moverse por la ciudad! üöó Mientras esperas, ¬øc√≥mo has estado de salud? ¬øAlg√∫n malestar o consulta m√©dica?"
- "Me duele la cabeza" ‚Üí M√âDICO
- "Tengo hambre" ‚Üí "¬°El hambre es normal! üçΩÔ∏è Espero que comas algo rico y saludable. Hablando de salud, ¬øc√≥mo te has sentido √∫ltimamente?"
- "Qu√© especialidades tienes" ‚Üí "¬°Hay muchas especialidades m√©dicas interesantes! ü©∫ Pero antes de hablar de eso, ¬øc√≥mo te sientes de salud? ¬øTienes alguna consulta o malestar?"`
              },
              { role: "user", content: text }
            ]
          })
        });

        const evaluationJson = await evaluationRes.json();
        const evaluationResult = evaluationJson.choices?.[0]?.message?.content?.trim() || "";

        // Si la respuesta es "M√âDICO", proceder con detecci√≥n de especialidad
        if (evaluationResult === "M√âDICO") {
          const especialidadesDisponibles = await getEspecialidadesDisponibles();
          const especialidadesString = especialidadesDisponibles.join(", ");

          const specialtyRes = await fetch("https://api.openai.com/v1/chat/completions", {
            method: "POST",
            headers: {
              Authorization: `Bearer ${OPENAI_API_KEY}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              model: "gpt-4o-mini",
              temperature: 0,
              max_tokens: 20,
              messages: [
                {
                  role: "system",
                  content: `Responde SOLO con una de estas especialidades: ${especialidadesString}. Si mencionan ni√±o, elige Pediatr√≠a o Medicina Familiar Ni√±os. Si mencionan adulto, elige Medicina Familiar Adultos. Si no est√°s seguro, elige Medicina Familiar.`
                },
                { role: "user", content: text }
              ]
            })
          });

          const specialtyJson = await specialtyRes.json();
          const rawEsp = specialtyJson.choices?.[0]?.message?.content?.trim() || "";
          const specialty = especialidadesDisponibles.includes(rawEsp) ? rawEsp : "Medicina Familiar";

          // ‚úÖ B√öSQUEDA DIRECTA SIN PEDIR EDAD PRIMERO
          try {
            const sobrecuposDisponibles = await fetchSobrecupos(specialty);
            const sobrecuposFuturos = filterFutureDates(sobrecuposDisponibles);
            
            if (sobrecuposFuturos.length === 0) {
              // No hay sobrecupos - establecer stage para manejar respuesta
              sessions[from] = {
                stage: 'asking-for-contact-data',
                specialty: specialty,
                motivo: text
              };
              
              return NextResponse.json({
                text: `Por lo que me describes, ser√≠a recomendable que veas a un especialista en ${specialty}.\n\nLamentablemente no tengo sobrecupos disponibles de **${specialty}** en este momento.\n\n¬øTe gustar√≠a que tome tus datos para avisarte cuando tengamos nuevas opciones disponibles?`,
                session: sessions[from]
              });
            }
            
            // Ordenar por fecha m√°s pr√≥xima y tomar el primero
            sobrecuposFuturos.sort((a, b) => new Date(a.fields?.Fecha) - new Date(b.fields?.Fecha));
            const first = sobrecuposFuturos[0].fields;
            
            // Obtener informaci√≥n del m√©dico
            const doctorId = Array.isArray(first["M√©dico"]) ? first["M√©dico"][0] : first["M√©dico"];
            const doctorInfo = await getDoctorInfo(doctorId);
            const medicoNombre = doctorInfo.name || 'M√©dico';
            
            // Formatear fecha
            const fechaFormateada = formatSpanishDate(first.Fecha);
            const clinica = first["Cl√≠nica"] || first["Clinica"] || "Cl√≠nica";
            const direccion = first["Direcci√≥n"] || first["Direccion"] || "";
            
            // Informaci√≥n de rango etario
            let atiendeTxt = "";
            switch(doctorInfo.atiende) {
              case "Ni√±os":
                atiendeTxt = " (especialista en pediatr√≠a)";
                break;
              case "Adultos":
                atiendeTxt = " (atiende solo adultos)";
                break;
              case "Ambos":
                atiendeTxt = " (atiende ni√±os y adultos)";
                break;
              default:
                atiendeTxt = " (atiende pacientes de todas las edades)";
            }
            
            sessions[from] = {
              stage: 'awaiting-confirmation',
              specialty: specialty,
              records: sobrecuposFuturos,
              motivo: text,
              respuestaEmpatica: "Por lo que me describes, ser√≠a recomendable que veas a un especialista.",
              attempts: 0
            };
            
            return NextResponse.json({
              text: `Por lo que me describes, ser√≠a recomendable que veas a un especialista en ${specialty}.\n\n‚úÖ Encontr√© un sobrecupo disponible:\n\nüë®‚Äç‚öïÔ∏è **Dr. ${medicoNombre}**${atiendeTxt}\nüóìÔ∏è ${fechaFormateada} a las ${first.Hora}\nüìç ${clinica}\nüìç ${direccion}\n\n¬øTe sirve esta opci√≥n? Confirma con **"s√≠"** para reservar.`,
              session: sessions[from]
            });
            
          } catch (error) {
            console.error('‚ùå Error buscando sobrecupos en flujo directo:', error);
            return NextResponse.json({
              text: `Por lo que me describes, ser√≠a recomendable que veas a un especialista en ${specialty}.\n\nHubo un error al buscar sobrecupos. Por favor intenta nuevamente.`
            });
          }
        } else {
          // Si no es "M√âDICO", usar la respuesta generada (ya incluye redirecci√≥n)
          return NextResponse.json({ text: evaluationResult });
        }

      } catch (err) {
        console.error("‚ùå Error OpenAI evaluaci√≥n:", err);
        return NextResponse.json({
          text: "No estoy seguro de c√≥mo ayudarte con eso ü§î\n\nSoy tu asistente m√©dico, as√≠ que cu√©ntame: ¬øtienes alg√∫n s√≠ntoma o necesitas ver alg√∫n especialista?"
        });
      }
    }

    // Si no hay OpenAI, respuesta por defecto
    return NextResponse.json({
      text: "Para ayudarte mejor, ¬øpodr√≠as contarme qu√© tipo de especialista necesitas o qu√© s√≠ntomas tienes?\n\nPor ejemplo:\n‚Ä¢ \"Necesito un oftalm√≥logo\"\n‚Ä¢ \"Tengo dolor de cabeza\"\n‚Ä¢ \"Me duele el pecho\""
    });

  } catch (error) {
    console.error('‚ùå Error en bot route:', error);
    return NextResponse.json(
      { text: "Lo siento, hubo un error interno. Por favor, intenta nuevamente." },
      { status: 500 }
    );
  }
}
