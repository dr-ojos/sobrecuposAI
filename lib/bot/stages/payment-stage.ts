// Stage para manejar pago pendiente y confirmaci√≥n final
import { BotResponse, BotSession } from '../types';
import { sessionManager } from '../services/session-manager';
import { emailService } from '../services/email-service';
import { airtableService } from '../services/airtable-service';

export async function handlePendingPaymentStage(
  text: string,
  sessionId: string,
  currentSession: BotSession
): Promise<BotResponse> {
  const lowerText = text.toLowerCase().trim();
  
  // Simular verificaci√≥n de pago (en producci√≥n esto vendr√≠a de webhook de pago)
  if (lowerText.includes('pago') || lowerText.includes('pag√©') || lowerText.includes('confirm√©') || 
      lowerText.includes('realic√©') || lowerText.includes('complet√©') || lowerText.includes('ya pagu√©')) {
    
    // Transicionar a pago completado
    const updatedSession = sessionManager.transitionToStage(sessionId, 'payment-completed', {
      paymentConfirmed: true,
      paymentDate: new Date().toISOString()
    });

    if (!updatedSession) {
      return {
        text: "Hubo un error confirmando tu pago. Por favor intenta nuevamente.",
        session: currentSession
      };
    }

    return await createFinalConfirmation(updatedSession);
  }

  // Respuestas para otros tipos de mensaje
  if (lowerText.includes('ayuda') || lowerText.includes('problema') || lowerText.includes('no puedo')) {
    return {
      text: "Te entiendo. Para completar tu reserva necesitas hacer clic en el enlace de pago que te envi√©.\n\n" +
            "Si tienes alg√∫n problema t√©cnico, puedes:\n" +
            "‚Ä¢ Intentar desde otro dispositivo\n" +
            "‚Ä¢ Usar otro m√©todo de pago\n" +
            "‚Ä¢ Contactarnos directamente\n\n" +
            "Una vez que completes el pago, escr√≠beme \"Ya pagu√©\" para confirmar tu cita.",
      session: currentSession
    };
  }

  // Mensaje por defecto - recordar el pago
  const { selectedRecord } = currentSession;
  const doctorName = selectedRecord?.fields?.['Name (from M√©dico)']?.[0] || 'el m√©dico';
  const fecha = selectedRecord?.fields?.Fecha || 'la fecha programada';
  const hora = selectedRecord?.fields?.Hora || 'la hora programada';

  return {
    text: `Para confirmar tu cita con **Dr. ${doctorName}** el **${fecha}** a las **${hora}**, necesitas completar el pago de **$2.990 CLP**.\n\n` +
          `üí≥ Haz clic en el enlace de pago que te envi√© anteriormente.\n\n` +
          `Una vez que completes el pago, escr√≠beme **"Ya pagu√©"** para confirmar tu reserva.`,
    session: currentSession,
    paymentButton: currentSession.paymentUrl ? {
      text: "üí≥ Procesar Pago",
      url: currentSession.paymentUrl,
      amount: "$2.990 CLP"
    } : undefined
  };
}

export async function handlePaymentCompletedStage(
  text: string,
  sessionId: string,
  currentSession: BotSession
): Promise<BotResponse> {
  // El pago ya est√° confirmado, mostrar informaci√≥n final
  return await createFinalConfirmation(currentSession);
}

export async function createFinalConfirmation(session: BotSession): Promise<BotResponse> {
  const { 
    patientName, 
    selectedRecord, 
    patientPhone, 
    patientEmail,
    patientRut,
    patientAge 
  } = session;
  
  if (!selectedRecord) {
    return {
      text: "Hubo un error con la informaci√≥n de tu cita. Por favor, contacta nuestro soporte.",
      session: session
    };
  }

  const doctorName = selectedRecord.fields?.['Name (from M√©dico)']?.[0] || 'M√©dico';
  const fecha = selectedRecord.fields?.Fecha || '';
  const hora = selectedRecord.fields?.Hora || '';
  const clinica = selectedRecord.fields?.['Cl√≠nica'] || selectedRecord.fields?.['Clinica'] || 'Cl√≠nica';
  const direccion = selectedRecord.fields?.['Direcci√≥n'] || selectedRecord.fields?.['Direccion'] || '';
  const especialidad = selectedRecord.fields?.Especialidad || 'Especialidad';

  // Generar n√∫mero de confirmaci√≥n (simulado)
  const confirmationNumber = `SC${Date.now().toString().slice(-6)}`;

  // Enviar email de confirmaci√≥n al paciente
  try {
    const emailSent = await emailService.sendPatientConfirmation(session, confirmationNumber);
    console.log(`üìß Patient confirmation email: ${emailSent ? '‚úÖ Sent' : '‚ùå Failed'}`);
  } catch (error) {
    console.error('‚ùå Error sending patient confirmation email:', error);
  }

  // Enviar notificaciones al doctor (email + WhatsApp)
  try {
    const medicoCampo = selectedRecord.fields?.M√©dico;
    const doctorId = Array.isArray(medicoCampo) ? medicoCampo[0] : medicoCampo;
    if (doctorId && typeof doctorId === 'string') {
      const doctorNotificationSent = await emailService.sendDoctorNotification(session, doctorId);
      console.log(`üè• Doctor notifications: ${doctorNotificationSent ? '‚úÖ Sent' : '‚ùå Failed'}`);
    } else {
      console.warn('‚ö†Ô∏è No doctor ID found for notification');
    }
  } catch (error) {
    console.error('‚ùå Error sending doctor notifications:', error);
  }

  // Crear registro del paciente en la tabla Patients
  try {
    const patientData = {
      Nombre: patientName || 'Paciente',
      RUT: patientRut || '',
      Telefono: patientPhone || '',
      Email: patientEmail || '',
      Edad: patientAge || null,
      MotivoConsulta: session.motivo || '',
      Especialidad: selectedRecord.fields?.Especialidad || '',
      MedicoAsignado: selectedRecord.fields?.['Name (from M√©dico)']?.[0] || '',
      FechaCita: selectedRecord.fields?.Fecha || '',
      HoraCita: selectedRecord.fields?.Hora || '',
      Clinica: selectedRecord.fields?.['Cl√≠nica'] || selectedRecord.fields?.['Clinica'] || '',
      NumeroConfirmacion: confirmationNumber,
      EstadoCita: 'Confirmada',
      FechaRegistro: new Date().toISOString().split('T')[0],
      FechaCreacion: new Date().toISOString(),
      FuenteRegistro: 'SobrecuposIA-Bot'
    };

    const patientId = await airtableService.createPatient(patientData);
    if (patientId) {
      console.log(`‚úÖ Patient record created in Airtable: ${patientId}`);
    } else {
      console.warn('‚ö†Ô∏è Failed to create patient record in Airtable');
    }
  } catch (error) {
    console.error('‚ùå Error creating patient record:', error);
  }

  // Marcar la sesi√≥n como completada
  sessionManager.transitionToStage(session.sessionId || '', 'completed', {
    confirmationNumber,
    completedAt: new Date().toISOString()
  });

  const mensajeFinal = 
    `üéâ **¬°RESERVA CONFIRMADA!** üéâ\n\n` +
    `‚úÖ **Tu cita ha sido exitosamente reservada**\n\n` +
    `üìã **DETALLES DE TU CITA:**\n` +
    `‚Ä¢ **Paciente:** ${patientName}\n` +
    `‚Ä¢ **RUT:** ${patientRut}\n` +
    `‚Ä¢ **Edad:** ${patientAge} a√±os\n` +
    `‚Ä¢ **Especialidad:** ${especialidad}\n` +
    `‚Ä¢ **M√©dico:** Dr. ${doctorName}\n` +
    `‚Ä¢ **Fecha:** ${fecha}\n` +
    `‚Ä¢ **Hora:** ${hora}\n` +
    `‚Ä¢ **Cl√≠nica:** ${clinica}\n` +
    `‚Ä¢ **Direcci√≥n:** ${direccion}\n` +
    `‚Ä¢ **Email:** ${patientEmail}\n` +
    `‚Ä¢ **Tel√©fono:** ${patientPhone}\n\n` +
    `üí∞ **Pago:** $2.990 CLP - ‚úÖ **CONFIRMADO**\n` +
    `üî¢ **N¬∞ Confirmaci√≥n:** ${confirmationNumber}\n\n` +
    `üìß Te enviaremos un correo de confirmaci√≥n a ${patientEmail} con todos los detalles.\n\n` +
    `üì± Tambi√©n recibir√°s un recordatorio por SMS al ${patientPhone} antes de tu cita.\n\n` +
    `‚ÑπÔ∏è **IMPORTANTE:**\n` +
    `‚Ä¢ Llega 15 minutos antes de tu cita\n` +
    `‚Ä¢ Trae tu carnet de identidad\n` +
    `‚Ä¢ Si necesitas cancelar, hazlo con al menos 2 horas de anticipaci√≥n\n\n` +
    `¬°Gracias por usar Sobrecupos IA! üòä\n` +
    `¬øNecesitas algo m√°s?`;

  return {
    text: mensajeFinal,
    session: session
  };
}