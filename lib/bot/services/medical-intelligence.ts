// Servicio de inteligencia m√©dica - mantiene toda la l√≥gica inteligente del bot
import { searchAreas } from '../../areas-interes';
import { detectMedicalCondition, generateMedicalResponse } from '../../medical-intelligence';
import { MedicalDetection, PatientInsights } from '../types';

export class MedicalIntelligenceService {
  
  // Detectar especialidad directa desde el texto
  detectarEspecialidadDirecta(text: string): string | null {
    const especialidadesPatrones = {
      "Oftalmolog√≠a": [
        'oftalm√≥logo', 'oftalmolog√≠a', 'ojos', 'vista', 'visi√≥n', 'ver', 'veo', 'mirar',
        'ceguera', 'ciego', 'borroso', 'difuso', 'enfoque', 'cristalino',
        'retina', 'c√≥rnea', 'pupila', 'iris', 'p√°rpado', 'pesta√±as',
        'laga√±as', 'conjuntivitis', 'orzuelo', 'chalazi√≥n',
        'glaucoma', 'cataratas', 'miop√≠a', 'hipermetrop√≠a', 'astigmatismo',
        'lentes', 'anteojos', 'gafas'
      ],
      "Dermatolog√≠a": [
        'dermat√≥logo', 'dermatolog√≠a', 'piel', 'cutis', 'dermis', 'epidermis',
        'acn√©', 'granos', 'espinillas', 'barros', 'manchas', 'lunares', 'nevus',
        'erupciones', 'sarpullido', 'ronchas', 'urticaria', 'eczema', 'dermatitis',
        'psoriasis', 'ros√°cea', 'melasma', 'vit√≠ligo', 'alopecia', 'calvicie',
        'caspa', 'seborrea', 'hongos', 'micosis', 'verrugas', 'queratosis'
      ],
      "Cardiolog√≠a": [
        'cardi√≥logo', 'cardiolog√≠a', 'coraz√≥n', 'card√≠aco', 'cardiac',
        'palpitaciones', 'taquicardia', 'bradicardia', 'arritmia',
        'dolor pecho', 'angina', 'infarto', 'presi√≥n alta', 'hipertensi√≥n',
        'soplo', 'electrocardiograma', 'ecocardiograma', 'holter'
      ],
      "Neurolog√≠a": [
        'neur√≥logo', 'neurolog√≠a', 'cerebro', 'neurol√≥gico', 'neural',
        'dolor cabeza', 'cefalea', 'migra√±a', 'mareos', 'v√©rtigo',
        'convulsiones', 'epilepsia', 'parkinson', 'alzheimer', 'demencia',
        'esclerosis m√∫ltiple', 'ictus', 'avc', 'derrame cerebral'
      ],
      "Gastroenterolog√≠a": [
        'gastroenter√≥logo', 'gastroenterolog√≠a', 'est√≥mago', 'gastro',
        'digesti√≥n', 'digestivo', 'intestino', 'colon', 'recto', 'ano',
        'n√°useas', 'v√≥mitos', 'diarrea', 'estre√±imiento', 'acidez',
        'reflujo', 'gastritis', '√∫lcera', 'colitis', 'crohn',
        'endoscopia', 'colonoscopia', 'h√≠gado', 'ves√≠cula'
      ],
      "Traumatolog√≠a": [
        'traumat√≥logo', 'traumatolog√≠a', 'huesos', 'fracturas', 'luxaci√≥n',
        'esguince', 'articulaciones', 'rodilla', 'hombro', 'cadera',
        'columna', 'espalda', 'lumbar', 'cervical', 'mu√±eca', 'tobillo',
        'ortopedia', 'pr√≥tesis', 'ligamentos', 'tendones', 'm√∫sculos'
      ],
      "Ginecolog√≠a": [
        'ginec√≥logo', 'ginecolog√≠a', '√∫tero', 'ovarios', 'vagina',
        'menstruaci√≥n', 'regla', 'per√≠odo', 'embarazo', 'parto',
        'menopausia', 'anticonceptivos', 'citolog√≠a', 'papanicolau'
      ],
      "Urolog√≠a": [
        'ur√≥logo', 'urolog√≠a', 'ri√±ones', 'vejiga', 'pr√≥stata', 'test√≠culos',
        'pene', 'uretra', 'orina', 'micci√≥n', 'incontinencia',
        'infecci√≥n urinaria', 'cistitis', 'c√°lculos renales', 'piedras ri√±√≥n'
      ],
      "Otorrinolaringolog√≠a": [
        'otorrino', 'otorrinolaring√≥logo', 'o√≠dos', 'nariz', 'garganta',
        'sordera', 'hipoacusia', 'tinnitus', 'ac√∫fenos', 'v√©rtigo',
        'sinusitis', 'rinitis', 'amigdalitis', 'faringitis', 'laringitis',
        'ronquera', 'afon√≠a', 'ronquidos', 'apnea sue√±o'
      ],
      "Endocrinolog√≠a": [
        'endocrin√≥logo', 'endocrinolog√≠a', 'hormonas', 'tiroides',
        'diabetes', 'insulina', 'glucosa', 'az√∫car', 'obesidad',
        'sobrepeso', 'metabolismo', 'hipotiroidismo', 'hipertiroidismo'
      ]
    };

    const textLower = text.toLowerCase();
    
    for (const [especialidad, patrones] of Object.entries(especialidadesPatrones)) {
      if (patrones.some(patron => textLower.includes(patron))) {
        console.log(`üéØ Especialidad detectada directamente: ${especialidad} para texto: "${text}"`);
        return especialidad;
      }
    }
    
    return null;
  }

  // Evaluar s√≠ntomas usando l√≥gica avanzada
  evaluarSintomas(text: string): string | null {
    console.log('üîç Evaluando s√≠ntomas. Texto original:', text);
    const normalizedText = text.toLowerCase().trim();
    console.log('üîç Texto normalizado:', normalizedText);

    // DOLOR DE CABEZA - Mejorado con m√°s patrones y m√∫ltiples especialidades
    const sintomasCefalea = [
      'dolor de cabeza', 'cefalea', 'jaqueca', 'migra√±a', 'migrana',
      'dolor cabeza', 'me duele la cabeza', 'tengo dolor de cabeza',
      'cabeza me duele', 'dolor en la cabeza', 'cabezazo', 'punchazo cabeza',
      'presi√≥n en la cabeza', 'tensi√≥n cabeza', 'dolor temporal',
      'dolor frente', 'dolor frontal', 'dolor occipital', 'dolor parietal'
    ];

    for (const sintoma of sintomasCefalea) {
      if (normalizedText.includes(sintoma)) {
        console.log(`‚úÖ S√≠ntomas de cefalea detectados: ${sintoma}`);
        // Detectar severidad para decidir especialidad
        const esSevero = this.detectarSeveridadCefalea(normalizedText);
        return esSevero ? "Neurolog√≠a" : "Medicina Familiar";
      }
    }

    // OFTALMOLOG√çA - S√≠ntomas visuales (mejorados)
    const sintomasOftalmologicos = [
      'borroso', 'difuso', 'nublado', 'empa√±ado',
      'no veo bien', 'veo mal', 'visi√≥n borrosa',
      'dolor ojo', 'dolor en el ojo', 'dolor ocular', 'ojo me duele',
      'ojos rojos', 'lagrimeo', 'picaz√≥n ojos', 'ardor ojos', 
      'sequedad ojos', 'ojos secos', 'moscas volantes', 'destellos', 'halos',
      'p√©rdida visi√≥n', 'ceguera', 'punto ciego',
      // S√≠ntomas de dolor ocular severo
      'dolor intenso ojo', 'dolor fuerte ojo', 'dolor severo ojo',
      'ojo duele mucho', 'dolor insoportable ojo', 'ojo muy adolorido'
    ];

    for (const sintoma of sintomasOftalmologicos) {
      if (normalizedText.includes(sintoma)) {
        console.log(`‚úÖ S√≠ntomas oftalmol√≥gicos detectados: ${sintoma}`);
        return "Oftalmolog√≠a";
      }
    }

    // OTORRINOLARINGOLOG√çA - S√≠ntomas de o√≠do, nariz y garganta (mejorados)
    const sintomasOtorrino = [
      'dolor o√≠do', 'dolor en el o√≠do', 'dolor de o√≠do', 'o√≠do me duele',
      'o√≠do duele', 'otalgia', 'dolor auricular', 'oreja duele',
      'dolor oreja', 'dolor en la oreja', 'infecci√≥n o√≠do', 'otitis',
      'zumbido o√≠do', 'pitido o√≠do', 'tinnitus', 'ac√∫feno',
      'sordera', 'no escucho', 'p√©rdida auditiva', 'hipoacusia',
      'mareo', 'v√©rtigo', 'equilibrio', 'inestabilidad',
      'dolor garganta', 'garganta duele', 'dolor al tragar', 'faringitis',
      'amigdalitis', 'angina', 'ronquera', 'afon√≠a', 'sin voz',
      'congesti√≥n nasal', 'nariz tapada', 'sinusitis', 'rinitis',
      // S√≠ntomas severos de o√≠do
      'dolor intenso o√≠do', 'dolor fuerte o√≠do', 'dolor severo o√≠do',
      'o√≠do duele mucho', 'dolor insoportable o√≠do', 'o√≠do muy adolorido'
    ];

    for (const sintoma of sintomasOtorrino) {
      if (normalizedText.includes(sintoma)) {
        console.log(`‚úÖ S√≠ntomas otorrinolaringol√≥gicos detectados: ${sintoma}`);
        return "Otorrinolaringolog√≠a";
      }
    }

    // DERMATOLOG√çA
    const sintomasDermatologicos = [
      'picaz√≥n', 'comez√≥n', 'sarpullido', 'erupciones', 'ronchas',
      'manchas piel', 'granos', 'acn√©', 'espinillas',
      'piel seca', 'piel grasa', 'descamaci√≥n',
      'hongos piel', 'infecci√≥n piel'
    ];

    for (const sintoma of sintomasDermatologicos) {
      if (normalizedText.includes(sintoma)) {
        console.log(`‚úÖ S√≠ntomas dermatol√≥gicos detectados: ${sintoma}`);
        return "Dermatolog√≠a";
      }
    }

    // CARDIOLOG√çA
    const sintomasCardiologicos = [
      'dolor pecho', 'palpitaciones', 'taquicardia',
      'falta aire', 'disnea', 'fatiga', 'cansancio extremo',
      'mareos card√≠acos', 'desmayo', 's√≠ncope'
    ];

    for (const sintoma of sintomasCardiologicos) {
      if (normalizedText.includes(sintoma)) {
        console.log(`‚úÖ S√≠ntomas cardiol√≥gicos detectados: ${sintoma}`);
        return "Cardiolog√≠a";
      }
    }

    // GASTROENTEROLOG√çA
    const sintomasGastroenterologicos = [
      'dolor est√≥mago', 'dolor abdominal', 'acidez',
      'n√°useas', 'v√≥mito', 'diarrea', 'estre√±imiento',
      'distensi√≥n abdominal', 'gases', 'flatulencia'
    ];

    for (const sintoma of sintomasGastroenterologicos) {
      if (normalizedText.includes(sintoma)) {
        console.log(`‚úÖ S√≠ntomas gastroenterol√≥gicos detectados: ${sintoma}`);
        return "Gastroenterolog√≠a";
      }
    }

    console.log('‚ùå No se detectaron s√≠ntomas espec√≠ficos');
    return null;
  }

  // Detectar severidad de cefalea para decidir entre Medicina Familiar vs Neurolog√≠a
  detectarSeveridadCefalea(text: string): boolean {
    const indicadoresSeveridad = [
      // Intensidad
      'severo', 'intenso', 'fuerte', 'insoportable', 'terrible', 'horrible',
      'muy fuerte', 'muy intenso', 'extremo', 'agudo',
      
      // Frecuencia/duraci√≥n
      'constante', 'permanente', 'todo el tiempo', 'siempre', 'cr√≥nico',
      'diario', 'todos los d√≠as', 'frecuente', 'recurrente',
      'm√°s de una semana', 'semanas', 'meses',
      
      // S√≠ntomas neurol√≥gicos asociados
      'migra√±a', 'migrana', 'jaqueca', 'cefalea tensional',
      'n√°useas', 'v√≥mito', 'fotofobia', 'sensibilidad luz',
      'fonofobia', 'sensibilidad ruido', 'aura',
      'visi√≥n borrosa', 'mareos', 'v√©rtigo',
      
      // Impacto funcional
      'no puedo trabajar', 'no puedo estudiar', 'incapacitante',
      'me despierta', 'no puedo dormir', 'afecta sue√±o',
      'tengo que acostarme', 'me quedo en cama'
    ];

    for (const indicador of indicadoresSeveridad) {
      if (text.includes(indicador)) {
        console.log(`‚ö†Ô∏è Cefalea severa detectada por: ${indicador} ‚Üí Neurolog√≠a`);
        return true;
      }
    }

    console.log(`‚ÑπÔ∏è Cefalea leve/moderada ‚Üí Medicina Familiar`);
    return false;
  }

  // Detectar urgencia para dolor ocular severo (para implementar same-day logic)
  detectarUrgenciaOcular(text: string): { esUrgente: boolean; nivel: string } {
    const indicadoresUrgencia = {
      'cr√≠tico': [
        'dolor insoportable', 'dolor severo', 'dolor intenso',
        'no puedo abrir', 'no puedo ver', 'p√©rdida s√∫bita',
        's√∫bita', 'repentino', 'de repente', 'emergencia'
      ],
      'alto': [
        'dolor fuerte', 'muy doloroso', 'duele mucho',
        'empeorando', 'peor', 'aumentando', 'cada vez m√°s'
      ],
      'moderado': [
        'dolor constante', 'todo el d√≠a', 'no mejora',
        'persiste', 'continuo'
      ]
    };

    for (const [nivel, indicadores] of Object.entries(indicadoresUrgencia)) {
      for (const indicador of indicadores) {
        if (text.includes(indicador)) {
          const esUrgente = nivel === 'cr√≠tico' || nivel === 'alto';
          console.log(`üö® Urgencia ocular ${nivel} detectada: ${indicador} - Urgente: ${esUrgente}`);
          return { esUrgente, nivel };
        }
      }
    }

    return { esUrgente: false, nivel: 'normal' };
  }

  // Detectar especialidad alternativa
  detectarEspecialidadAlternativa(text: string): string | null {
    // L√≥gica para sugerir especialidades relacionadas
    const textLower = text.toLowerCase();
    
    if (textLower.includes('dolor cabeza') || textLower.includes('migra√±a')) {
      return "Medicina Familiar"; // Como alternativa a Neurolog√≠a
    }
    
    if (textLower.includes('dolor espalda') || textLower.includes('lumbar')) {
      return "Medicina Familiar"; // Como alternativa a Traumatolog√≠a
    }
    
    return null;
  }

  // Buscar m√©dicos por √°rea de inter√©s
  async buscarMedicosPorAreaInteres(areaText: string): Promise<any[]> {
    console.log(`üîç Buscando m√©dicos por √°rea de inter√©s: "${areaText}"`);
    
    try {
      // Usar el sistema existente de √°reas de inter√©s
      const areas = this.extraerAreasInteres(areaText);
      console.log(`üéØ √Åreas espec√≠ficas detectadas: ${JSON.stringify(areas)}`);
      
      if (areas.length === 0) {
        console.log(`‚ùå No se detectaron √°reas espec√≠ficas en: "${areaText}"`);
        return [];
      }
      
      // Aqu√≠ se conectar√≠a con el servicio de Airtable para buscar m√©dicos
      // Por ahora retornamos array vac√≠o para mantener la funcionalidad existente
      return [];
    } catch (error) {
      console.error(`‚ùå Error buscando m√©dicos por √°rea:`, error);
      return [];
    }
  }

  // Extraer √°reas de inter√©s espec√≠ficas del texto
  extraerAreasInteres(texto: string): string[] {
    console.log(`üß† [ALGORITMO] Analizando texto: "${texto}"`);
    
    // PASO 1: Usar el sistema de inteligencia m√©dica avanzado
    const deteccionesMedicas = detectMedicalCondition(texto);
    console.log(`üéØ [ALGORITMO] Detecciones m√©dicas:`, deteccionesMedicas);
    
    // PASO 2: Sistema legacy usando searchAreas
    const areasEncontradas = searchAreas(texto);
    console.log(`üéØ [ALGORITMO] √Åreas finales detectadas: ${JSON.stringify(areasEncontradas)}`);
    
    // Combinar resultados
    const todasLasAreas: string[] = [];
    
    // Agregar detecciones m√©dicas
    if (Array.isArray(deteccionesMedicas)) {
      deteccionesMedicas.forEach(deteccion => {
        if (deteccion.area) {
          todasLasAreas.push(deteccion.area);
        }
      });
    }
    
    // Agregar √°reas encontradas por searchAreas
    if (Array.isArray(areasEncontradas)) {
      areasEncontradas.forEach(resultado => {
        if (resultado.areas) {
          todasLasAreas.push(...resultado.areas);
        }
      });
    }
    
    // Eliminar duplicados
    return [...new Set(todasLasAreas)];
  }

  // Generar respuesta emp√°tica usando OpenAI si est√° disponible
  async generateEmphaticResponse(
    text: string, 
    fallback: string = "Entiendo tu preocupaci√≥n.", 
    patientContext: any = {}
  ): Promise<string> {
    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
    
    if (!OPENAI_API_KEY) {
      return fallback;
    }

    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          temperature: 0.7,
          max_tokens: 60,
          messages: [
            {
              role: "system",
              content: "Eres Sobrecupos IA, asistente m√©dico chileno, humano y emp√°tico. Responde con una frase breve (m√°x 2 l√≠neas) mostrando comprensi√≥n hacia el usuario. Usa un tono c√°lido pero profesional. No menciones 'Sobrecupos IA' ni uses comillas."
            },
            { 
              role: "user", 
              content: `Usuario dice: "${text}". Contexto emocional: ${JSON.stringify(patientContext)}` 
            }
          ]
        })
      });

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.status}`);
      }

      const data = await response.json();
      return data.choices?.[0]?.message?.content?.trim() || fallback;
    } catch (error) {
      console.error('[EMPATHIC_RESPONSE_ERROR]:', error);
      return fallback;
    }
  }

  // Evaluar si es consulta m√©dica usando OpenAI
  async evaluateIfMedicalQuery(text: string): Promise<boolean> {
    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
    
    if (!OPENAI_API_KEY) {
      // Fallback: detectar palabras m√©dicas b√°sicas
      const palabrasMedicas = [
        'dolor', 's√≠ntoma', 'enfermedad', 'molestia', 'problema',
        'm√©dico', 'doctor', 'especialista', 'consulta', 'cita'
      ];
      
      const textLower = text.toLowerCase();
      return palabrasMedicas.some(palabra => textLower.includes(palabra));
    }

    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          temperature: 0.3,
          max_tokens: 10,
          messages: [
            {
              role: "system",
              content: "Determina si el texto es una consulta m√©dica o de salud. Responde √∫nicamente 'SI' si es m√©dico/salud, 'NO' si es otra cosa (saludo, pregunta general, etc.)."
            },
            { role: "user", content: text }
          ]
        })
      });

      if (!response.ok) return true; // En caso de error, asumir que s√≠ es m√©dico

      const data = await response.json();
      const resultado = data.choices?.[0]?.message?.content?.trim()?.toUpperCase();
      return resultado === 'SI';
    } catch (error) {
      console.error('[MEDICAL_EVALUATION_ERROR]:', error);
      return true; // En caso de error, asumir que s√≠ es m√©dico
    }
  }

  // Detectar especialidad usando OpenAI
  async detectSpecialtyWithAI(text: string, availableSpecialties: string[]): Promise<string | null> {
    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
    
    if (!OPENAI_API_KEY) {
      return null;
    }

    try {
      const especialidadesString = availableSpecialties.join(", ");
      
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          temperature: 0.3,
          max_tokens: 20,
          messages: [
            {
              role: "system",
              content: `Eres un asistente m√©dico. Bas√°ndote en los s√≠ntomas descritos, responde √öNICAMENTE con el nombre exacto de UNA especialidad de esta lista: ${especialidadesString}. Si no est√°s seguro o no corresponde a ninguna, responde "Medicina Familiar".`
            },
            { role: "user", content: text }
          ]
        })
      });

      if (!response.ok) return null;

      const data = await response.json();
      const rawEsp = data.choices?.[0]?.message?.content?.trim() || "";
      
      // Validar que la especialidad est√© en la lista disponible
      return availableSpecialties.includes(rawEsp) ? rawEsp : "Medicina Familiar";
    } catch (error) {
      console.error('[SPECIALTY_DETECTION_ERROR]:', error);
      return null;
    }
  }

  // Obtener insights del paciente
  analyzePatientInsights(text: string): PatientInsights {
    const textLower = text.toLowerCase();
    
    // Detectar urgencia
    let urgency: 'low' | 'medium' | 'high' = 'low';
    if (textLower.includes('urgente') || textLower.includes('grave') || textLower.includes('dolor fuerte')) {
      urgency = 'high';
    } else if (textLower.includes('molesto') || textLower.includes('preocupado')) {
      urgency = 'medium';
    }

    // Detectar estado emocional
    let emotionalState = 'neutral';
    if (textLower.includes('preocupado') || textLower.includes('ansioso')) {
      emotionalState = 'worried';
    } else if (textLower.includes('dolor') || textLower.includes('molesto')) {
      emotionalState = 'uncomfortable';
    }

    // Extraer s√≠ntomas
    const symptoms = this.extractSymptoms(text);

    return {
      urgency,
      emotionalState,
      symptoms
    };
  }

  // Extraer s√≠ntomas del texto
  private extractSymptoms(text: string): string[] {
    const commonSymptoms = [
      'dolor', 'molestia', 'picaz√≥n', 'ardor', 'hinchaz√≥n',
      'fiebre', 'tos', 'fatiga', 'mareo', 'n√°usea'
    ];
    
    const textLower = text.toLowerCase();
    return commonSymptoms.filter(symptom => textLower.includes(symptom));
  }
}

// Instancia singleton del servicio
export const medicalIntelligence = new MedicalIntelligenceService();