// Servicio para la l√≥gica de selecci√≥n y presentaci√≥n de citas
import { AirtableRecord, ProcessedDoctorInfo, AppointmentPresentation } from '../types';
import { getHour, formatSpanishDate, formatClinicAddress } from '../utils';
import { airtableService } from './airtable-service';

export class AppointmentService {

  // Funci√≥n optimizada para seleccionar opciones inteligentes con urgencia
  selectSmartAppointmentOptions(records: AirtableRecord[], urgency?: { esUrgente: boolean; nivel: string }): AirtableRecord[] {
    if (!records?.length) return [];
    
    // Para casos urgentes, priorizar citas del mismo d√≠a
    if (urgency?.esUrgente) {
      console.log(`üö® Caso urgente (${urgency.nivel}) - priorizando citas del mismo d√≠a`);
      const today = new Date().toISOString().split('T')[0];
      const todayAppointments = records.filter(r => r.fields?.Fecha === today);
      
      if (todayAppointments.length > 0) {
        console.log(`‚úÖ Encontradas ${todayAppointments.length} citas para hoy - priorizando`);
        const sortedToday = todayAppointments.sort((a, b) => {
          const hourA = this.getHourNumber(a.fields?.Hora || '00:00');
          const hourB = this.getHourNumber(b.fields?.Hora || '00:00');
          return hourA - hourB;
        });
        
        // Para casos urgentes, mostrar solo las opciones del mismo d√≠a disponibles
        return sortedToday.length === 1 ? sortedToday : [sortedToday[0], sortedToday[sortedToday.length - 1]];
      } else {
        console.log(`‚ö†Ô∏è No hay citas disponibles para hoy - mostrando opciones m√°s cercanas`);
        // Si no hay citas para hoy, agregar mensaje de urgencia al contexto
      }
    }
    
    const sorted = [...records].sort((a, b) => {
      const dateA = new Date(`${a.fields?.Fecha}T${a.fields?.Hora || '00:00'}`);
      const dateB = new Date(`${b.fields?.Fecha}T${b.fields?.Hora || '00:00'}`);
      return dateA.getTime() - dateB.getTime();
    });

    // Si solo hay un registro, retornar solo ese
    if (sorted.length === 1) return sorted;

    const [first] = sorted;
    const firstDate = first.fields?.Fecha;
    const sameDayOptions = sorted.filter(r => r.fields?.Fecha === firstDate && r.id !== first.id);

    // Si no hay opciones del mismo d√≠a, buscar del d√≠a siguiente
    if (sameDayOptions.length === 0) {
      const nextDayOptions = sorted.filter(r => r.fields?.Fecha !== firstDate);
      return nextDayOptions.length > 0 ? [first, nextDayOptions[0]] : [first];
    }

    // Si hay opciones del mismo d√≠a, intentar separar por ma√±ana/tarde
    const allSameDay = [first, ...sameDayOptions];
    const morning = allSameDay.filter(r => getHour(r.fields?.Hora) < 14);
    const afternoon = allSameDay.filter(r => getHour(r.fields?.Hora) >= 14);

    // Solo mostrar 2 opciones si realmente hay ma√±ana Y tarde diferentes
    if (morning.length > 0 && afternoon.length > 0) {
      return [morning[0], afternoon[0]];
    }

    // Si todas las citas son en el mismo per√≠odo (ma√±ana o tarde), 
    // buscar una segunda opci√≥n del d√≠a m√°s cercano siguiente
    const nextDayOptions = sorted.filter(r => r.fields?.Fecha !== firstDate);
    return nextDayOptions.length > 0 ? [first, nextDayOptions[0]] : [first];
  }

  // Crear presentaci√≥n de opciones optimizada con soporte para urgencia
  async createOptionsPresentation(
    selectedOptions: AirtableRecord[], 
    specialty: string, 
    doctorCache = new Map(),
    urgency?: { esUrgente: boolean; nivel: string }
  ): Promise<AppointmentPresentation> {
    
    if (selectedOptions.length === 1) {
      const option = selectedOptions[0];
      const doctorId = this.extractMedicoId(option.fields);
      const doctorInfo = await airtableService.getDoctorInfoCached(doctorId, doctorCache);
      const fechaFormateada = formatSpanishDate(option.fields?.Fecha!);
      const address = formatClinicAddress(option.fields);
      const atiendeTxt = this.generateAtiendeTxt(doctorInfo.atiende);

      // Agregar mensaje de urgencia si aplica
      let urgencyMessage = '';
      if (urgency?.esUrgente) {
        const isToday = option.fields?.Fecha === new Date().toISOString().split('T')[0];
        if (urgency.nivel === 'cr√≠tico' && isToday) {
          urgencyMessage = `üö® **CITA DE URGENCIA PARA HOY** - Debido a la severidad de tus s√≠ntomas, te hemos priorizado esta cita del mismo d√≠a.\n\n`;
        } else if (urgency.esUrgente && isToday) {
          urgencyMessage = `‚ö†Ô∏è **Cita prioritaria para hoy** - Considerando tus s√≠ntomas, esta cita del mismo d√≠a es recomendada.\n\n`;
        } else if (urgency.esUrgente) {
          urgencyMessage = `‚ö†Ô∏è **Nota importante**: Por la severidad de tus s√≠ntomas, recomendamos atenci√≥n urgente. Esta es la cita m√°s cercana disponible.\n\n`;
        }
      }

      return {
        text: `${urgencyMessage}üë®‚Äç‚öïÔ∏è **Dr. ${doctorInfo.name}**${atiendeTxt}\nüìÖ ${fechaFormateada} a las ${option.fields?.Hora}\nüìç ${address}\n\n¬øConfirmas esta cita? Responde **'s√≠'** para continuar o **'no'** para ver otras opciones.`,
        stage: 'confirming-appointment',
        doctorInfo
      };
    }

    // Debug para 2 opciones
    console.log('üîç [PRESENTATION DEBUG] Creating 2-option presentation:');
    selectedOptions.forEach((option, i) => {
      console.log(`  Option ${i + 1}: {
  id: '${option.id}',
  doctor: ${JSON.stringify(option.fields?.M√©dico)},
  fecha: '${option.fields?.Fecha}',
  hora: '${option.fields?.Hora}'
}`);
    });

    const optionsText = await Promise.all(selectedOptions.map(async (option, i) => {
      const doctorId = this.extractMedicoId(option.fields);
      const doctorInfo = await airtableService.getDoctorInfoCached(doctorId, doctorCache);
      const fechaFormateada = formatSpanishDate(option.fields?.Fecha!);
      const address = formatClinicAddress(option.fields);
      const atiendeTxt = this.generateAtiendeTxt(doctorInfo.atiende);

      return `**${i + 1}.** üë®‚Äç‚öïÔ∏è **Dr. ${doctorInfo.name}**${atiendeTxt}\nüìÖ ${fechaFormateada} a las ${option.fields?.Hora}\nüìç ${address}`;
    }));

    // Agregar mensaje de urgencia para m√∫ltiples opciones
    let urgencyHeader = '';
    if (urgency?.esUrgente) {
      const hasToday = selectedOptions.some(opt => opt.fields?.Fecha === new Date().toISOString().split('T')[0]);
      if (urgency.nivel === 'cr√≠tico' && hasToday) {
        urgencyHeader = `üö® **OPCIONES PRIORITARIAS** - Debido a la severidad de tus s√≠ntomas, se incluyen citas del mismo d√≠a disponibles.\n\n`;
      } else if (urgency.esUrgente && hasToday) {
        urgencyHeader = `‚ö†Ô∏è **Citas prioritarias** - Por tus s√≠ntomas, se priorizan las opciones m√°s cercanas disponibles.\n\n`;
      } else if (urgency.esUrgente) {
        urgencyHeader = `‚ö†Ô∏è **Atenci√≥n urgente recomendada** - Estas son las citas m√°s cercanas disponibles para tu caso.\n\n`;
      }
    }

    return {
      text: `${urgencyHeader}Te muestro las mejores opciones disponibles de **${specialty}**:\n\n${optionsText.join('\n\n')}\n\n¬øCu√°l opci√≥n prefieres? Responde con el n√∫mero (**1** o **2**).`,
      stage: 'choosing-from-options'
    };
  }

  // Validar si un m√©dico atiende una edad espec√≠fica
  validateDoctorAge(doctorAtiende: string, patientAge: number): boolean {
    switch (doctorAtiende) {
      case "Ni√±os":
        return patientAge < 18;
      case "Adultos":
        return patientAge >= 18;
      case "Ambos":
        return true;
      default:
        return true; // Por defecto aceptar
    }
  }

  // Filtrar m√©dicos que atienden la edad del paciente
  async filterDoctorsByAge(
    records: AirtableRecord[], 
    patientAge: number
  ): Promise<AirtableRecord[]> {
    const validRecords: AirtableRecord[] = [];
    
    for (const record of records) {
      const doctorId = this.extractMedicoId(record.fields);
      const doctorInfo = await airtableService.getDoctorInfoCached(doctorId);
      
      if (this.validateDoctorAge(doctorInfo.atiende, patientAge)) {
        validRecords.push(record);
      }
    }
    
    return validRecords;
  }

  // Filtrar m√©dicos por √°rea de inter√©s espec√≠fica
  async filterDoctorsByInterestArea(
    records: AirtableRecord[], 
    medicalQuery: string
  ): Promise<AirtableRecord[]> {
    const validRecords: AirtableRecord[] = [];
    
    for (const record of records) {
      const doctorId = this.extractMedicoId(record.fields);
      const doctorInfo = await airtableService.getDoctorInfoCached(doctorId);
      
      // Si el doctor tiene areas de inter√©s definidas
      if (doctorInfo.areasInteres) {
        const areasInteres = doctorInfo.areasInteres.toLowerCase();
        const queryLower = medicalQuery.toLowerCase();
        
        // Buscar coincidencias en las √°reas de inter√©s
        if (this.matchesInterestArea(areasInteres, queryLower)) {
          validRecords.push(record);
        }
      } else {
        // Si no tiene √°reas espec√≠ficas, incluir el m√©dico (comportamiento por defecto)
        validRecords.push(record);
      }
    }
    
    return validRecords;
  }

  // Verificar si una consulta m√©dica coincide con las √°reas de inter√©s
  private matchesInterestArea(areasInteres: string, medicalQuery: string): boolean {
    // Palabras clave por √°rea de inter√©s
    const interestKeywords = {
      'dolor de cabeza': ['cefalea', 'migra√±a', 'dolor de cabeza', 'headache'],
      'neurologia': ['neurologia', 'neurologico', 'sistema nervioso', 'convulsiones', 'epilepsia'],
      'cardiologia': ['corazon', 'cardiaco', 'presion', 'hipertension', 'arritmia'],
      'dermatologia': ['piel', 'dermatitis', 'acne', 'manchas', 'lunares'],
      'gastroenterologia': ['estomago', 'digestion', 'gastritis', 'colon', 'intestino'],
      'oftalmologia': ['ojo', 'ojos', 'vision', 'vista', 'dolor ocular'],
      'otorrinolaringologia': ['oido', 'nariz', 'garganta', 'dolor de oido', 'sinusitis'],
      'traumatologia': ['hueso', 'fractura', 'luxacion', 'articulacion', 'lesion'],
      'ginecologia': ['ginecologico', 'menstrual', 'ovario', 'utero', 'embarazo'],
      'pediatria': ['ni√±o', 'ni√±os', 'bebe', 'infantil', 'pediatrico'],
      'psiquiatria': ['depresion', 'ansiedad', 'stress', 'mental', 'psiquiatrico']
    };
    
    // Verificar si alguna palabra clave coincide
    for (const [area, keywords] of Object.entries(interestKeywords)) {
      if (areasInteres.includes(area)) {
        const hasMatch = keywords.some(keyword => 
          medicalQuery.includes(keyword) || areasInteres.includes(keyword)
        );
        if (hasMatch) return true;
      }
    }
    
    // Coincidencia directa con texto libre
    const queryWords = medicalQuery.split(' ').filter(word => word.length > 2);
    return queryWords.some(word => areasInteres.includes(word));
  }

  // Helpers privados
  private extractMedicoId(fields: any): string {
    return Array.isArray(fields["M√©dico"]) ? fields["M√©dico"][0] : fields["M√©dico"];
  }

  private getHourNumber(hora: string): number {
    const [hours, minutes] = hora.split(':').map(Number);
    return hours + (minutes / 60);
  }

  private generateAtiendeTxt(atiende: string): string {
    switch (atiende) {
      case "Ni√±os": 
        return " (especialista en pediatr√≠a)";
      case "Adultos": 
        return " (atiende solo adultos)";
      case "Ambos": 
        return " (atiende ni√±os y adultos)";
      default: 
        return "";
    }
  }

  // Buscar citas por m√©dico espec√≠fico
  async findAppointmentsByDoctor(doctorName: string): Promise<AirtableRecord[]> {
    try {
      const allSobrecupos = await airtableService.fetchAllSobrecupos();
      
      return allSobrecupos.filter(record => {
        const disponible = airtableService.normalizeBoolean(record.fields?.Disponible);
        const doctorNames = record.fields?.['Name (from M√©dico)'] || [];
        const nameMatch = Array.isArray(doctorNames) 
          ? doctorNames.some(name => name.toLowerCase().includes(doctorName.toLowerCase()))
          : false;
        
        return disponible && nameMatch;
      });
    } catch (error) {
      console.error(`‚ùå Error buscando citas para doctor ${doctorName}:`, error);
      return [];
    }
  }

  // Generar mensaje de no disponibilidad
  generateNoAvailabilityMessage(
    specialty: string, 
    doctorName?: string,
    alternativeSpecialty?: string
  ): string {
    let baseMessage = doctorName 
      ? `Lamentablemente no tengo sobrecupos disponibles del **Dr. ${doctorName}** en este momento.`
      : `Lamentablemente no tengo sobrecupos de **${specialty}** disponibles en este momento.`;
    
    if (alternativeSpecialty) {
      baseMessage += `\n\nComo alternativa, ¬øte interesar√≠a ver un especialista en **${alternativeSpecialty}**?`;
    } else {
      baseMessage += `\n\n¬øTe gustar√≠a que tome tus datos para contactarte cuando tengamos disponibilidad?`;
    }
    
    return baseMessage;
  }

  // Crear sesi√≥n base para continuar flujo
  createBaseSession(
    specialty: string,
    records: AirtableRecord[],
    motivo: string,
    respuestaEmpatica: string,
    selectedOptions?: AirtableRecord[],
    alternativeSpecialty?: string,
    alternativeRecords?: AirtableRecord[]
  ): any {
    return {
      specialty,
      records,
      motivo,
      respuestaEmpatica,
      attempts: 0,
      ...(selectedOptions && { selectedOptions }),
      ...(alternativeSpecialty && { alternativeSpecialty }),
      ...(alternativeRecords && { alternativeRecords })
    };
  }
}

// Instancia singleton del servicio
export const appointmentService = new AppointmentService();