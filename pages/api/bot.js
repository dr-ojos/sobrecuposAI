// ü§ñ BOT.JS COMPLETO CON MEJORAS DE EMAIL
// Versi√≥n funcional + emails personalizados

const sessions = {};

const especialidadesDirectas = {
  "cardiologia": "Cardiolog√≠a",
  "cardiologo": "Cardiolog√≠a", 
  "corazon": "Cardiolog√≠a",
  "dermatologia": "Dermatolog√≠a",
  "dermatologo": "Dermatolog√≠a",
  "piel": "Dermatolog√≠a",
  "oftalmologia": "Oftalmolog√≠a",
  "oftalmologo": "Oftalmolog√≠a",
  "ojos": "Oftalmolog√≠a",
  "neurologia": "Neurolog√≠a",
  "neurologo": "Neurolog√≠a",
  "psiquiatria": "Psiquiatr√≠a",
  "psiquiatra": "Psiquiatr√≠a",
  "medicina familiar": "Medicina Familiar",
  "medico familiar": "Medicina Familiar",
  "familia": "Medicina Familiar"
};

function validarRUT(rut) {
  const rutLimpio = rut.replace(/[.\-]/g, '');
  if (!/^\d{7,8}[0-9K]$/i.test(rutLimpio)) return false;
  const cuerpo = rutLimpio.slice(0, -1);
  const dv = rutLimpio.slice(-1).toUpperCase();
  let suma = 0, multiplicador = 2;
  for (let i = cuerpo.length - 1; i >= 0; i--) {
    suma += parseInt(cuerpo[i]) * multiplicador;
    multiplicador = multiplicador === 7 ? 2 : multiplicador + 1;
  }
  const dvCalculado = 11 - (suma % 11);
  const dvFinal = dvCalculado === 11 ? '0' : dvCalculado === 10 ? 'K' : dvCalculado.toString();
  return dv === dvFinal;
}

function esSaludoSimple(texto) {
  const saludosSimples = /^(hola|buenas|buenos d√≠as|buenos dias|buenas tardes|buenas noches|hey|ey|qu√© tal|que tal)$/i;
  return saludosSimples.test(texto.trim());
}

function detectarEspecialidad(texto) {
  const textoLimpio = texto.toLowerCase().trim();
  for (const [key, value] of Object.entries(especialidadesDirectas)) {
    if (textoLimpio.includes(key)) {
      return value;
    }
  }
  return null;
}

export default async function handler(req, res) {
  if (req.method !== "POST") return res.status(405).json({ text: "M√©todo no permitido" });

  const {
    OPENAI_API_KEY,
    AIRTABLE_API_KEY,
    AIRTABLE_BASE_ID,
    AIRTABLE_TABLE_ID, // Esta ser√° "Sobrecupostest"
    AIRTABLE_DOCTORS_TABLE,
    AIRTABLE_PACIENTES_TABLE,
    SENDGRID_API_KEY,
    SENDGRID_FROM_EMAIL
  } = process.env;

  const { message, session: prevSession, from = "webuser" } = req.body;
  const text = (message || "").trim();

  // Regex comunes
  const greetingRe = /\b(hola|buenas|buenos d√≠as|buenos dias|buenas tardes|buenas noches|qu√© tal|que tal|c√≥mo est√°s|como estas|hey|ey)\b/i;
  const thanksRe = /\b(gracias|muchas gracias)\b/i;
  const affirmativeRe = /^(si|s√≠|s|ok|vale|perfecto|listo|confirmo|confirmar|dale|claro|quiero|lo quiero)/i;
  const negativeRe = /\b(no|otra|busca m√°s|busca mas|no me sirve|no quiero|siguiente)\b/i;

  // --- Helper para obtener especialidades disponibles din√°micamente
  async function getEspecialidadesDisponibles() {
    try {
      const resp = await fetch(
        `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_DOCTORS_TABLE}?fields%5B%5D=Especialidad`,
        { headers: { Authorization: `Bearer ${AIRTABLE_API_KEY}` } }
      );
      const data = await resp.json();
      const especialidades = new Set();
      
      data.records?.forEach(record => {
        if (record.fields?.Especialidad) {
          especialidades.add(record.fields.Especialidad);
        }
      });
      
      return Array.from(especialidades).sort();
    } catch (err) {
      console.error("‚ùå Error obteniendo especialidades:", err);
      return ["Medicina Familiar", "Oftalmolog√≠a", "Dermatolog√≠a"]; // Fallback
    }
  }

  // --- Helper para obtener email del m√©dico
  async function getDoctorEmail(medicoId) {
    try {
      const resp = await fetch(
        `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_DOCTORS_TABLE}/${medicoId}`,
        { headers: { Authorization: `Bearer ${AIRTABLE_API_KEY}` } }
      );
      const data = await resp.json();
      return data.fields?.Email || "admin@sobrecupos.com";
    } catch (err) {
      console.error("‚ùå Error obteniendo email del m√©dico:", err);
      return "admin@sobrecupos.com";
    }
  }

  // --- Helper para obtener nombre real del m√©dico
  async function getDoctorName(medicoId) {
    try {
      const resp = await fetch(
        `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_DOCTORS_TABLE}/${medicoId}`,
        { headers: { Authorization: `Bearer ${AIRTABLE_API_KEY}` } }
      );
      const data = await resp.json();
      return data.fields?.Name || medicoId;
    } catch (err) {
      console.error("‚ùå Error buscando m√©dico:", err);
      return medicoId;
    }
  }

  // --- Helper para crear registro de paciente
  async function crearPaciente(pacienteData) {
    try {
      const resp = await fetch(
        `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_PACIENTES_TABLE}`,
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${AIRTABLE_API_KEY}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            fields: pacienteData
          })
        }
      );
      const data = await resp.json();
      return data.id;
    } catch (err) {
      console.error("‚ùå Error creando paciente:", err);
      return null;
    }
  }

  // 1) Verificar configuraci√≥n
  if (![OPENAI_API_KEY, AIRTABLE_API_KEY, AIRTABLE_BASE_ID,
        AIRTABLE_TABLE_ID, AIRTABLE_DOCTORS_TABLE, SENDGRID_API_KEY, SENDGRID_FROM_EMAIL].every(Boolean)) {
    return res.json({ text: "‚ùå Error de configuraci√≥n. Contacta soporte." });
  }

  // 2) Saludo inicial o saludo simple
  if (greetingRe.test(text)) {
    if (esSaludoSimple(text)) {
      return res.json({
        text:
          "¬°Hola! üëã ¬øQuieres que te ayude a encontrar y reservar un sobrecupo m√©dico?\n" +
          "Cu√©ntame tus s√≠ntomas, el nombre del m√©dico o la especialidad que necesitas."
      });
    }
    return res.json({
      text:
        "¬°Hola! üëã Soy Sobrecupos IA.\n" +
        "Te ayudo a encontrar y reservar sobrecupos m√©dicos.\n" +
        "Dime tus s√≠ntomas, el m√©dico o la especialidad que necesitas."
    });
  }

  // 3) Agradecimientos
  if (thanksRe.test(text)) {
    return res.json({ text: "¬°De nada! Si necesitas algo m√°s, av√≠same. üòä" });
  }

  // 4) Sesi√≥n activa (confirmaciones, reintentos, datos de paciente, etc.)
  let session = prevSession || sessions[from];
  if (session) {
    switch (session.stage) {
      case 'awaiting-confirmation':
        if (affirmativeRe.test(text)) {
          session.stage = 'collect-name';
          return res.json({
            text: '¬°Perfecto! Para completar la reserva necesito algunos datos.\n\nPrimero, dime tu nombre completo:',
            session
          });
        } else if (negativeRe.test(text)) {
          session.attempts++;
          if (session.attempts < session.records.length) {
            const nxt = session.records[session.attempts].fields;
            const clin = nxt["Cl√≠nica"] || nxt["Clinica"] || "nuestra cl√≠nica";
            const dir = nxt["Direcci√≥n"] || nxt["Direccion"] || "la direcci√≥n indicada";
            const medicoId = Array.isArray(nxt["M√©dico"]) ? nxt["M√©dico"][0] : nxt["M√©dico"];
            const medicoNombre = await getDoctorName(medicoId);
            return res.json({
              text:
                `üîÑ Otra opci√≥n de ${session.specialty}:\n` +
                `üìç ${clin} (${dir})\n` +
                `üë®‚Äç‚öïÔ∏è Dr. ${medicoNombre}\n` +
                `üóìÔ∏è ${nxt.Fecha} a las ${nxt.Hora}\n\n` +
                `¬øTe sirve? Confirma con "s√≠" o dime "no" para otra opci√≥n.`,
              session
            });
          } else {
            delete sessions[from];
            return res.json({ 
              text: 'Lo siento, no hay m√°s sobrecupos disponibles para esta especialidad en este momento.\n\n¬øTe gustar√≠a que te contacte cuando tengamos nueva disponibilidad?' 
            });
          }
        } else {
          return res.json({ text: 'Por favor responde con "s√≠" u "no".', session });
        }

      case 'collect-name':
        session.patient = { name: text };
        session.stage = 'collect-age';
        sessions[from] = session;
        return res.json({ text: 'Gracias. Ahora dime tu edad:', session });

      case 'collect-age':
        const age = parseInt(text);
        if (isNaN(age) || age < 0 || age > 120) {
          return res.json({ text: 'Por favor ingresa una edad v√°lida (n√∫mero entre 0 y 120):', session });
        }
        session.patient.age = age;
        session.stage = 'collect-rut';
        sessions[from] = session;
        return res.json({ text: 'Perfecto. Ahora necesito tu RUT (ej: 12345678-9):', session });

      case 'collect-rut':
        if (!validarRUT(text)) {
          return res.json({ text: 'El RUT ingresado no es v√°lido. Por favor ingresa un RUT chileno v√°lido (ej: 12345678-9):', session });
        }
        session.patient.rut = text.replace(/[.\-]/g, '').toUpperCase();
        session.stage = 'collect-phone';
        sessions[from] = session;
        return res.json({ text: 'Excelente. Ahora tu tel√©fono (con c√≥digo pa√≠s):', session });

      case 'collect-phone':
        session.patient.phone = text;
        session.stage = 'collect-email';
        sessions[from] = session;
        return res.json({ text: 'Por √∫ltimo, tu email para enviarte la confirmaci√≥n:', session });

      case 'collect-email':
        session.patient.email = text;
        session.stage = 'final-confirmation';
        sessions[from] = session;

        // Crear registro de paciente en tabla Pacientes
        const pacienteId = await crearPaciente({
          Nombre: session.patient.name,
          Edad: session.patient.age,
          RUT: session.patient.rut,
          Telefono: session.patient.phone,
          Email: session.patient.email,
          "Fecha Registro": new Date().toISOString().split('T')[0]
        });

        // Marcar sobrecupo como no disponible en tabla Sobrecupostest
        const chosen = session.records[session.attempts].fields;
        const chosenId = session.records[session.attempts].id;
        
        const updateFields = {
          Disponible: false,
          Nombre: session.patient.name,
          Edad: session.patient.age,
          RUT: session.patient.rut,
          Telefono: session.patient.phone,
          Email: session.patient.email
        };

        // Si se cre√≥ el paciente, a√±adir la relaci√≥n
        if (pacienteId) {
          updateFields.Paciente = [pacienteId];
        }
        
        try {
          await fetch(
            `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_ID}/${chosenId}`,
            {
              method: "PATCH",
              headers: {
                Authorization: `Bearer ${AIRTABLE_API_KEY}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                fields: updateFields
              })
            }
          );
          console.log("‚úÖ Sobrecupo actualizado en Sobrecupostest");
        } catch (err) {
          console.error("‚ùå Error actualizando Sobrecupostest:", err);
        }

        // üìß ENVIAR EMAILS MEJORADOS (PACIENTE + M√âDICO)
        const medicoId = Array.isArray(chosen["M√©dico"]) ? chosen["M√©dico"][0] : chosen["M√©dico"];
        const medicoNombre = await getDoctorName(medicoId);
        
        // üìß EMAIL PERSONALIZADO AL PACIENTE
        const emailPayload = {
          from: { email: SENDGRID_FROM_EMAIL, name: "Sobrecupos - Tu salud es prioritaria" },
          personalizations: [{
            to: [{ email: session.patient.email, name: session.patient.name }],
            subject: `‚úÖ Tu sobrecupo est√° confirmado - ${session.specialty}`,
          }],
          content: [{
            type: "text/plain",
            value:
              `Hola ${session.patient.name}.\n\n` +
              `El Dr. ${medicoNombre} autoriz√≥ tu sobrecupo.\n\n` +
              `üìã DETALLES DE TU RESERVA:\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
              `üë®‚Äç‚öïÔ∏è M√©dico: Dr. ${medicoNombre}\n` +
              `üè• Especialidad: ${session.specialty}\n` +
              `üìç Cl√≠nica: ${chosen["Cl√≠nica"]||chosen["Clinica"]}\n` +
              `üìç Direcci√≥n: ${chosen["Direcci√≥n"]||chosen["Direccion"]}\n` +
              `üìÖ Fecha: ${chosen.Fecha}\n` +
              `üïê Hora: ${chosen.Hora}\n` +
              `üÜî RUT: ${session.patient.rut}\n\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
              `Acude al lugar indicado, ac√©rcate a recepci√≥n y paga tu consulta.\n\n` +
              `Recuerda que es un sobrecupo, tu m√©dico te atender√° dentro de un tiempo razonable. Pero mucho menos tiempo que haber esperado d√≠as con una hora normal.\n\n` +
              `‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n` +
              `üíö Sobrecupos - Menos tiempo enfermo, m√°s tiempo sano\n` +
              `üì± ¬øNecesitas ayuda? Responde este email`
          }]
        };
        
        // üìß EMAIL DE NOTIFICACI√ìN AL M√âDICO
        const doctorEmailPayload = {
          from: { email: SENDGRID_FROM_EMAIL, name: "Sobrecupos - Sistema de Notificaciones" },
          personalizations: [{
            to: [{ email: await getDoctorEmail(medicoId), name: `Dr. ${medicoNombre}` }],
            subject: `üîî Nuevo sobrecupo confirmado - ${session.specialty}`,
          }],
          content: [{
            type: "text/plain",
            value:
              `Estimado Dr. ${medicoNombre},\n\n` +
              `Se ha confirmado un nuevo sobrecupo para usted:\n\n` +
              `üë§ PACIENTE:\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
              `‚Ä¢ Nombre: ${session.patient.name}\n` +
              `‚Ä¢ Edad: ${session.patient.age} a√±os\n` +
              `‚Ä¢ RUT: ${session.patient.rut}\n` +
              `‚Ä¢ Tel√©fono: ${session.patient.phone}\n` +
              `‚Ä¢ Email: ${session.patient.email}\n\n` +
              `üìÖ DETALLES DE LA CITA:\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
              `‚Ä¢ Especialidad: ${session.specialty}\n` +
              `‚Ä¢ Cl√≠nica: ${chosen["Cl√≠nica"]||chosen["Clinica"]}\n` +
              `‚Ä¢ Direcci√≥n: ${chosen["Direcci√≥n"]||chosen["Direccion"]}\n` +
              `‚Ä¢ Fecha: ${chosen.Fecha}\n` +
              `‚Ä¢ Hora: ${chosen.Hora}\n\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
              `El paciente ha sido notificado y se presentar√° en el horario indicado.\n\n` +
              `Saludos cordiales,\n` +
              `Sistema Sobrecupos IA`
          }]
        };
        
        try {
          // Enviar email al paciente
          await fetch("https://api.sendgrid.com/v3/mail/send", {
            method: "POST",
            headers: {
              Authorization: `Bearer ${SENDGRID_API_KEY}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify(emailPayload)
          });
          
          // Enviar email al m√©dico
          await fetch("https://api.sendgrid.com/v3/mail/send", {
            method: "POST",
            headers: {
              Authorization: `Bearer ${SENDGRID_API_KEY}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify(doctorEmailPayload)
          });
          
          console.log("‚úÖ Emails enviados al paciente y m√©dico");
        } catch (err) {
          console.error("‚ùå Error SendGrid:", err);
        }

        delete sessions[from];
        return res.json({
          text:
            `‚úÖ ¬°Listo, ${session.patient.name}! Tu sobrecupo est√° confirmado.\n\n` +
            `üìç ${chosen["Cl√≠nica"]||chosen["Clinica"]}\n` +
            `üìç ${chosen["Direcci√≥n"]||chosen["Direccion"]}\n` +
            `üë®‚Äç‚öïÔ∏è Dr. ${medicoNombre}\n` +
            `üóìÔ∏è ${chosen.Fecha} a las ${chosen.Hora}\n\n` +
            `üìß Te enviamos todos los detalles por email.\n` +
            `¬°Que te mejores pronto! üíö`
        });

      default:
        delete sessions[from];
        return res.json({ text: "Hubo un error. Empecemos de nuevo. ¬øEn qu√© puedo ayudarte?" });
    }
  }

  // 5) Detecci√≥n directa de especialidad
  const especialidadDirecta = detectarEspecialidad(text);
  if (especialidadDirecta) {
    try {
      const resp = await fetch(
        `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_ID}?filterByFormula=AND({Disponible}=TRUE(),{Especialidad}="${especialidadDirecta}")`,
        { headers: { Authorization: `Bearer ${AIRTABLE_API_KEY}` } }
      );
      const data = await resp.json();
      
      if (data.records && data.records.length > 0) {
        const firstRecord = data.records[0].fields;
        const clin = firstRecord["Cl√≠nica"] || firstRecord["Clinica"] || "nuestra cl√≠nica";
        const dir = firstRecord["Direcci√≥n"] || firstRecord["Direccion"] || "la direcci√≥n indicada";
        const medicoId = Array.isArray(firstRecord["M√©dico"]) ? firstRecord["M√©dico"][0] : firstRecord["M√©dico"];
        const medicoNombre = await getDoctorName(medicoId);
        
        const session = {
          specialty: especialidadDirecta,
          records: data.records,
          attempts: 0,
          stage: 'awaiting-confirmation'
        };
        sessions[from] = session;
        
        return res.json({
          text:
            `üéØ Encontr√© sobrecupos de ${especialidadDirecta}:\n\n` +
            `üìç ${clin} (${dir})\n` +
            `üë®‚Äç‚öïÔ∏è Dr. ${medicoNombre}\n` +
            `üóìÔ∏è ${firstRecord.Fecha} a las ${firstRecord.Hora}\n\n` +
            `¬øTe sirve? Confirma con "s√≠" o dime "no" para otra opci√≥n.`,
          session
        });
      } else {
        return res.json({ 
          text: `No hay sobrecupos disponibles para ${especialidadDirecta} en este momento.\n\n¬øTe interesa otra especialidad?` 
        });
      }
    } catch (err) {
      console.error("‚ùå Error buscando sobrecupos:", err);
      return res.json({ text: "‚ùå Error t√©cnico. Intenta de nuevo." });
    }
  }

  // 6) B√∫squeda con IA (OpenAI)
  try {
    const especialidadesDisponibles = await getEspecialidadesDisponibles();
    
    const chatResp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${OPENAI_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system", 
            content: `Eres un asistente m√©dico que ayuda a clasificar s√≠ntomas en especialidades.
Especialidades disponibles: ${especialidadesDisponibles.join(", ")}

Si el usuario menciona s√≠ntomas, recomienda la especialidad m√°s apropiada de la lista.
Responde SOLO con el nombre de la especialidad de la lista, nada m√°s.
Si no puedes determinar una especialidad espec√≠fica, responde "no_especialidad".`
          },
          { role: "user", content: text }
        ],
        max_tokens: 50,
        temperature: 0.1
      })
    });

    const chatData = await chatResp.json();
    const aiResponse = chatData.choices?.[0]?.message?.content?.trim();

    if (aiResponse && especialidadesDisponibles.includes(aiResponse)) {
      // Buscar sobrecupos para la especialidad detectada por IA
      try {
        const resp = await fetch(
          `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_ID}?filterByFormula=AND({Disponible}=TRUE(),{Especialidad}="${aiResponse}")`,
          { headers: { Authorization: `Bearer ${AIRTABLE_API_KEY}` } }
        );
        const data = await resp.json();
        
        if (data.records && data.records.length > 0) {
          const firstRecord = data.records[0].fields;
          const clin = firstRecord["Cl√≠nica"] || firstRecord["Clinica"] || "nuestra cl√≠nica";
          const dir = firstRecord["Direcci√≥n"] || firstRecord["Direccion"] || "la direcci√≥n indicada";
          const medicoId = Array.isArray(firstRecord["M√©dico"]) ? firstRecord["M√©dico"][0] : firstRecord["M√©dico"];
          const medicoNombre = await getDoctorName(medicoId);
          
          const session = {
            specialty: aiResponse,
            records: data.records,
            attempts: 0,
            stage: 'awaiting-confirmation'
          };
          sessions[from] = session;
          
          return res.json({
            text:
              `üéØ Bas√°ndome en tus s√≠ntomas, te recomiendo ${aiResponse}:\n\n` +
              `üìç ${clin} (${dir})\n` +
              `üë®‚Äç‚öïÔ∏è Dr. ${medicoNombre}\n` +
              `üóìÔ∏è ${firstRecord.Fecha} a las ${firstRecord.Hora}\n\n` +
              `¬øTe sirve? Confirma con "s√≠" o dime "no" para otra opci√≥n.`,
            session
          });
        } else {
          return res.json({ 
            text: `Te recomiendo ${aiResponse} para tus s√≠ntomas, pero no hay sobrecupos disponibles en este momento.\n\n¬øTe interesa otra especialidad?` 
          });
        }
      } catch (err) {
        console.error("‚ùå Error buscando sobrecupos por IA:", err);
        return res.json({ text: "‚ùå Error t√©cnico. Intenta de nuevo." });
      }
    }
  } catch (err) {
    console.error("‚ùå Error OpenAI:", err);
  }

  // 7) Respuesta por defecto con lista de especialidades
  try {
    const especialidadesDisponibles = await getEspecialidadesDisponibles();
    return res.json({
      text:
        "No pude identificar exactamente qu√© necesitas. ü§î\n\n" +
        "Puedes decirme:\n" +
        "‚Ä¢ Tus s√≠ntomas (ej: 'dolor de cabeza', 'problemas de visi√≥n')\n" +
        "‚Ä¢ Una especialidad directamente\n\n" +
        `Especialidades disponibles:\n${especialidadesDisponibles.map(e => `‚Ä¢ ${e}`).join('\n')}\n\n` +
        "¬øC√≥mo puedo ayudarte?"
    });
  } catch (err) {
    return res.json({
      text: "¬øEn qu√© especialidad m√©dica puedo ayudarte? Dime tus s√≠ntomas o la especialidad que necesitas."
    });
  }
}