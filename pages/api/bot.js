// pages/api/bot.js - VERSI√ìN COMPLETA Y DEFINITIVA
const sessions = {};

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ text: "M√©todo no permitido" });
  }

  const {
    OPENAI_API_KEY, 
    AIRTABLE_API_KEY, 
    AIRTABLE_BASE_ID, 
    AIRTABLE_TABLE_ID,
    AIRTABLE_DOCTORS_TABLE, 
    AIRTABLE_PATIENTS_TABLE
  } = process.env;

  const { message, session: prevSession, from = "webuser" } = req.body;
  const text = (message || "").trim();

  // Validaci√≥n cr√≠tica de configuraci√≥n
  if (!AIRTABLE_API_KEY || !AIRTABLE_BASE_ID || !AIRTABLE_TABLE_ID) {
    console.error("‚ùå Variables de entorno faltantes");
    return res.json({ 
      text: "‚ùå Servicio temporalmente no disponible. Contacta soporte." 
    });
  }

  // Validaci√≥n de mensaje vac√≠o
  if (!text) {
    return res.json({ 
      text: "¬°Hola! üëã Soy Sobrecupos IA.\n\n¬øEn qu√© puedo ayudarte? Cu√©ntame tus s√≠ntomas o qu√© especialista necesitas." 
    });
  }

  console.log(`üì® Mensaje recibido de ${from}: "${text}"`);

  // Expresiones regulares optimizadas
  const saludoSimpleRe = /^(hola|buenas|buenos?\s*(dias?|tardes?|noches?)|hey|ey|qu√© tal|que tal|c√≥mo est√°s|como estas)$/i;
  const agradecimientoRe = /^(gracias|muchas gracias|thanks|thx)$/i;
  const afirmativoRe = /^(si|s√≠|s|ok|vale|perfecto|listo|confirmo|confirmar|dale|claro|quiero|acepto|me sirve)$/i;
  const negativoRe = /^(no|otra|busca m√°s|busca mas|no me sirve|no quiero|siguiente|otro|otra opci√≥n|otra opcion)$/i;

  // üî• SISTEMA DE TIMEOUTS Y ANTI-LOOP
  const currentTime = Date.now();
  const sessionTimeout = 10 * 60 * 1000; // 10 minutos
  
  let currentSession = sessions[from] || prevSession || {};
  
  // Detectar loops (mismo mensaje repetido)
  if (currentSession.lastMessage === text && currentSession.lastMessageTime) {
    const timeDiff = currentTime - currentSession.lastMessageTime;
    if (timeDiff < 30000) { // Menos de 30 segundos
      console.log(`üîÑ LOOP DETECTADO: Reseteando sesi√≥n para ${from}`);
      currentSession = {};
      sessions[from] = {};
    }
  }
  
  // Timeout de sesi√≥n
  if (currentSession.lastActivity && (currentTime - currentSession.lastActivity) > sessionTimeout) {
    console.log(`üïê Sesi√≥n expirada para ${from}, reseteando...`);
    currentSession = {};
    sessions[from] = {};
  }

  // Actualizar actividad y mensaje
  currentSession.lastActivity = currentTime;
  currentSession.lastMessage = text;
  currentSession.lastMessageTime = currentTime;

  // === MANEJO DE SALUDOS SIMPLES ===
  if (saludoSimpleRe.test(text)) {
    sessions[from] = { lastActivity: currentTime };
    return res.json({
      text: "¬°Hola! üëã Soy Sobrecupos IA, tu asistente m√©dico.\n\n¬øEn qu√© puedo ayudarte hoy? Puedes contarme:\n‚Ä¢ S√≠ntomas que tienes\n‚Ä¢ Especialista que necesitas\n‚Ä¢ Urgencias m√©dicas"
    });
  }

  // === MANEJO DE AGRADECIMIENTOS ===
  if (agradecimientoRe.test(text)) {
    return res.json({
      text: "¬°De nada! üòä Siempre estoy aqu√≠ para ayudarte con tu salud.\n\n¬øHay algo m√°s en lo que pueda asistirte?"
    });
  }

  // === DETECCI√ìN DE CONSULTAS NO M√âDICAS ===
  if (esConsultaNoMedica(text)) {
    const respuestasEspecificas = getRespuestaEspecificaNoMedica(text);
    
    if (respuestasEspecificas.length > 0) {
      const respuestaAleatoria = respuestasEspecificas[Math.floor(Math.random() * respuestasEspecificas.length)];
      return res.json({ text: respuestaAleatoria });
    }
    
    const respuestasGenerales = [
      "Soy tu asistente m√©dico especializado üë©‚Äç‚öïÔ∏è\n\n¬øC√≥mo te sientes hoy? Cu√©ntame si tienes alg√∫n s√≠ntoma o necesitas alg√∫n especialista.",
      "Mi especialidad es cuidar tu salud ü©∫\n\n¬øHay algo m√©dico en lo que pueda ayudarte? Por ejemplo s√≠ntomas, chequeos o especialistas que necesites.",
      "Estoy aqu√≠ para temas de salud üòä\n\n¬øC√≥mo puedo ayudarte m√©dicamente hoy? Cu√©ntame tus s√≠ntomas o qu√© especialista buscas."
    ];
    
    return res.json({ 
      text: respuestasGenerales[Math.floor(Math.random() * respuestasGenerales.length)] 
    });
  }

  // === MANEJO DE SESIONES ACTIVAS CON PROTECCI√ìN ANTI-LOOP ===
  if (currentSession.stage) {
    const result = await manejarSesionActivaConProteccion(currentSession, text, from, res);
    if (result) return result;
  }

  // === DETECCI√ìN INTELIGENTE DE ESPECIALIDADES ===
  
  // 1. Especialidad directa (ej: "necesito oftalm√≥logo")
  const especialidadDirecta = detectarEspecialidadDirecta(text);
  if (especialidadDirecta) {
    return await buscarYResponderSobrecupos(especialidadDirecta, text, from, res);
  }

  // 2. S√≠ntomas que mapean a especialidades (ej: "me pican los ojos")
  const especialidadPorSintomas = detectarEspecialidadPorSintomas(text);
  if (especialidadPorSintomas) {
    console.log(`üéØ S√≠ntoma detectado: "${text}" ‚Üí ${especialidadPorSintomas}`);
    return await buscarYResponderSobrecupos(especialidadPorSintomas, text, from, res, true);
  }

  // === RESPUESTA POR DEFECTO MEJORADA ===
  const especialidadesDisponibles = await getEspecialidadesDisponibles();
  const especialidadesTexto = especialidadesDisponibles.slice(0, 6).join(', ');
  
  return res.json({
    text: `Te puedo ayudar a encontrar sobrecupos m√©dicos ü©∫\n\nCu√©ntame:\n‚Ä¢ ¬øQu√© s√≠ntomas tienes?\n‚Ä¢ ¬øQu√© especialista necesitas?\n\nEspecialidades disponibles: ${especialidadesTexto}\n\nEjemplo: "Me pican los ojos" o "Necesito dermat√≥logo"`
  });

  // ===============================
  // üõ†Ô∏è FUNCIONES AUXILIARES COMPLETAS
  // ===============================

  async function manejarSesionActivaConProteccion(session, message, userId, response) {
    // üî• PROTECCI√ìN ANTI-LOOP: Resetear si hay demasiados intentos
    if (session.attempts > 3) {
      console.log(`üîÑ Demasiados intentos, reseteando sesi√≥n para ${userId}`);
      sessions[userId] = { lastActivity: Date.now() };
      return response.json({
        text: "Parece que hubo un problema con nuestra conversaci√≥n. Empecemos de nuevo.\n\n¬øEn qu√© puedo ayudarte? Cu√©ntame tus s√≠ntomas o qu√© especialista necesitas."
      });
    }

    switch (session.stage) {
      case 'awaiting-confirmation':
        return await manejarConfirmacion(session, message, userId, response);
      case 'getting-name':
        return await manejarNombre(session, message, userId, response);
      case 'getting-phone':
        return await manejarTelefono(session, message, userId, response);
      case 'getting-rut':
        return await manejarRUT(session, message, userId, response);
      case 'getting-age':
        return await manejarEdad(session, message, userId, response);
    }
    return null;
  }

  async function manejarConfirmacion(session, message, userId, response) {
    if (afirmativoRe.test(message)) {
      sessions[userId] = { 
        ...session, 
        stage: 'getting-name',
        attempts: 0,
        lastActivity: Date.now()
      };
      return response.json({
        text: "¬°Perfecto! üéâ Para confirmar tu cita necesito algunos datos.\n\n¬øCu√°l es tu nombre completo?",
        session: sessions[userId]
      });
    }
    
    if (negativoRe.test(message)) {
      const { records = [], specialty } = session;
      const nextAttempt = (session.attempts || 0) + 1;
      
      if (nextAttempt < records.length && nextAttempt < 3) {
        const nextRecord = records[nextAttempt].fields;
        const medicoNombre = await getDoctorName(nextRecord["M√©dico"]);
        
        sessions[userId] = { 
          ...session, 
          attempts: nextAttempt,
          lastActivity: Date.now()
        };
        
        return response.json({
          text: `Te muestro otra opci√≥n de ${specialty}:\n\nüè• ${nextRecord["Cl√≠nica"]}\nüìç ${nextRecord["Direcci√≥n"]}\nüë®‚Äç‚öïÔ∏è Dr. ${medicoNombre}\nüìÖ ${nextRecord.Fecha} a las ${nextRecord.Hora}\n\n¬øTe sirve esta? Responde *s√≠* o *no*`,
          session: sessions[userId]
        });
      } else {
        sessions[userId] = { lastActivity: Date.now() };
        return response.json({
          text: `Entiendo. Por ahora no tengo m√°s sobrecupos de ${specialty} disponibles.\n\n¬øTe gustar√≠a que te contacte cuando tengamos nuevas opciones disponibles?\n\nTambi√©n puedes preguntarme por otra especialidad. üòä`
        });
      }
    }
    
    // Incrementar intentos en caso de respuesta no entendida
    session.attempts = (session.attempts || 0) + 1;
    sessions[userId] = { ...session, lastActivity: Date.now() };
    
    if (session.attempts >= 2) {
      sessions[userId] = { lastActivity: Date.now() };
      return response.json({
        text: "Parece que hubo confusi√≥n. Empecemos de nuevo.\n\n¬øEn qu√© puedo ayudarte? Cu√©ntame tus s√≠ntomas o qu√© especialista necesitas."
      });
    }
    
    return response.json({
      text: "No entend√≠ tu respuesta. Por favor responde *s√≠* si te sirve el sobrecupo o *no* si quieres ver otra opci√≥n."
    });
  }

  async function manejarNombre(session, message, userId, response) {
    const nombre = message.trim();
    
    if (nombre.length < 2) {
      return response.json({
        text: "Por favor ingresa tu nombre completo (m√≠nimo 2 caracteres)."
      });
    }
    
    sessions[userId] = { 
      ...session, 
      stage: 'getting-phone',
      patientName: nombre,
      lastActivity: Date.now()
    };
    
    return response.json({
      text: `Perfecto, ${nombre}. üëç\n\nAhora necesito tu n√∫mero de WhatsApp (incluye +56).\n\nEjemplo: +56912345678`,
      session: sessions[userId]
    });
  }

  async function manejarTelefono(session, message, userId, response) {
    const telefono = message.trim();
    
    if (!validarTelefono(telefono)) {
      return response.json({
        text: "Formato de tel√©fono incorrecto. Debe incluir +56 y tener 9 d√≠gitos despu√©s.\n\nEjemplo: +56912345678"
      });
    }
    
    sessions[userId] = { 
      ...session, 
      stage: 'getting-rut',
      patientPhone: telefono,
      lastActivity: Date.now()
    };
    
    return response.json({
      text: "üì± Tel√©fono registrado.\n\nAhora tu RUT (sin puntos, con gui√≥n).\n\nEjemplo: 12345678-9",
      session: sessions[userId]
    });
  }

  async function manejarRUT(session, message, userId, response) {
    const rut = message.trim();
    
    if (!validarRUT(rut)) {
      return response.json({
        text: "RUT inv√°lido. Por favor ingresa tu RUT sin puntos y con gui√≥n.\n\nEjemplo: 12345678-9"
      });
    }
    
    sessions[userId] = { 
      ...session, 
      stage: 'getting-age',
      patientRUT: rut,
      lastActivity: Date.now()
    };
    
    return response.json({
      text: "‚úÖ RUT registrado.\n\nFinalmente, ¬øcu√°l es tu edad?",
      session: sessions[userId]
    });
  }

  async function manejarEdad(session, message, userId, response) {
    const edad = parseInt(message.trim());
    
    if (isNaN(edad) || edad < 1 || edad > 120) {
      return response.json({
        text: "Por favor ingresa una edad v√°lida (entre 1 y 120 a√±os)."
      });
    }
    
    return await procesarReservaFinal(session, edad, userId, response);
  }

  async function procesarReservaFinal(session, edad, userId, response) {
    const { records, specialty, attempts, patientName, patientPhone, patientRUT } = session;
    
    const selectedRecord = records[attempts || 0];
    
    if (!selectedRecord) {
      console.error("‚ùå No hay sobrecupo seleccionado");
      sessions[userId] = { lastActivity: Date.now() };
      return response.json({
        text: "‚ùå Error: No se encontr√≥ el sobrecupo seleccionado. Por favor intenta nuevamente."
      });
    }
    
    try {
      console.log("üè• Iniciando proceso de reserva final...");
      console.log("üìã Datos del paciente:", { patientName, patientPhone, patientRUT, edad });
      console.log("üéØ Sobrecupo seleccionado:", selectedRecord.id, selectedRecord.fields);
      
      const pacienteId = await crearPaciente({
        name: patientName,
        phone: patientPhone,
        rut: patientRUT,
        age: edad
      });
      
      if (!pacienteId) {
        console.error("‚ùå Error creando paciente");
        sessions[userId] = { lastActivity: Date.now() };
        return response.json({
          text: "‚ùå Hubo un problema creando tu registro de paciente. Por favor intenta nuevamente."
        });
      }
      
      console.log("‚úÖ Paciente creado con ID:", pacienteId);
      
      const sobrecupoActualizado = await actualizarSobrecupo(selectedRecord.id, pacienteId, patientName);
      
      const medicoIds = selectedRecord.fields["M√©dico"];
      const medicoId = Array.isArray(medicoIds) ? medicoIds[0] : medicoIds;
      const medicoInfo = await getDoctorInfo(medicoId);
      
      sessions[userId] = { lastActivity: Date.now() };
      
      if (sobrecupoActualizado && pacienteId) {
        return response.json({
          text: `‚úÖ ¬°Cita confirmada exitosamente!\n\nüìã Detalles de tu cita:\nüë§ Paciente: ${patientName}\nü©∫ Especialidad: ${specialty}\nüë®‚Äç‚öïÔ∏è M√©dico: Dr. ${medicoInfo.name}\nüìÖ Fecha: ${selectedRecord.fields.Fecha}\nüïê Hora: ${selectedRecord.fields.Hora}\nüè• Cl√≠nica: ${selectedRecord.fields["Cl√≠nica"]}\nüìç Direcci√≥n: ${selectedRecord.fields["Direcci√≥n"]}\n\nüí° Llega 15 minutos antes. ¬°Nos vemos pronto!`
        });
      } else {
        return response.json({
          text: `‚ùå Hubo un problema t√©cnico confirmando tu cita.\n\nTu informaci√≥n est√° guardada:\n‚Ä¢ ${patientName}\n‚Ä¢ ${specialty} - ${selectedRecord.fields.Fecha}\n\nTe contactaremos pronto para confirmar.`
        });
      }
      
    } catch (error) {
      console.error("‚ùå Error en reserva final:", error);
      sessions[userId] = { lastActivity: Date.now() };
      
      return response.json({
        text: "‚ùå Error procesando tu reserva. Por favor intenta nuevamente o contacta soporte."
      });
    }
  }

  async function buscarYResponderSobrecupos(specialty, originalText, userId, response, esSintoma = false) {
    try {
      let respuestaEmpatica = "";
      if (esSintoma) {
        respuestaEmpatica = generarRespuestaEmpatica(originalText, specialty);
        
        if (!respuestaEmpatica && OPENAI_API_KEY) {
          try {
            const empatRes = await fetch("https://api.openai.com/v1/chat/completions", {
              method: "POST",
              headers: {
                Authorization: `Bearer ${OPENAI_API_KEY}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                model: "gpt-4o-mini",
                temperature: 0.7,
                max_tokens: 40,
                messages: [
                  {
                    role: "system",
                    content: "Eres un asistente m√©dico emp√°tico. Responde con 1 l√≠nea corta mostrando comprensi√≥n al paciente."
                  },
                  { role: "user", content: `Paciente dice: "${originalText}"` }
                ]
              })
            });
            const empatJson = await empatRes.json();
            respuestaEmpatica = empatJson.choices?.[0]?.message?.content?.trim() || "";
          } catch (err) {
            console.error("‚ùå Error OpenAI:", err);
          }
        }
      }

      const records = await buscarSobrecupos(specialty);
      
      if (records.length === 0) {
        const mensaje = esSintoma 
          ? `${respuestaEmpatica}\n\nPor tus s√≠ntomas, recomiendo consultar con ${specialty}.\n\nActualmente no tengo sobrecupos disponibles. ¬øTe gustar√≠a que te contacte cuando haya disponibilidad?`
          : `No tengo sobrecupos de ${specialty} disponibles ahora.\n\n¬øTe gustar√≠a que te contacte cuando tengamos disponibilidad?`;
        
        return response.json({ text: mensaje });
      }

      const first = records[0].fields;
      const medicoNombre = await getDoctorName(first["M√©dico"]);
      
      sessions[userId] = {
        stage: 'awaiting-confirmation',
        specialty,
        records,
        attempts: 0,
        lastActivity: Date.now()
      };

      const mensaje = esSintoma
        ? `${respuestaEmpatica}\n\nTe recomiendo ver a un especialista en ${specialty}.\n\n‚úÖ Encontr√© un sobrecupo disponible:\n\nüè• ${first["Cl√≠nica"]}\nüìç ${first["Direcci√≥n"]}\nüë®‚Äç‚öïÔ∏è Dr. ${medicoNombre}\nüìÖ ${first.Fecha} a las ${first.Hora}\n\n¬øTe sirve? Responde *s√≠* para reservar o *no* para ver otra opci√≥n.`
        : `‚úÖ Encontr√© un sobrecupo de ${specialty}:\n\nüè• ${first["Cl√≠nica"]}\nüìç ${first["Direcci√≥n"]}\nüë®‚Äç‚öïÔ∏è Dr. ${medicoNombre}\nüìÖ ${first.Fecha} a las ${first.Hora}\n\n¬øTe sirve? Responde *s√≠* para reservar.`;

      return response.json({
        text: mensaje,
        session: sessions[userId]
      });

    } catch (error) {
      console.error("‚ùå Error buscando sobrecupos:", error);
      return response.json({
        text: "Error consultando disponibilidad. Por favor intenta m√°s tarde."
      });
    }
  }

  // ===============================
  // üîç FUNCIONES DE DETECCI√ìN COMPLETAS
  // ===============================

  function esConsultaNoMedica(text) {
    const textoLimpio = text.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"");
    
    const consultasEspecificas = [
      // Comida y restaurantes
      'quiero pizza', 'pizza', 'hamburguesa', 'sushi', 'comida china',
      'restaurant', 'restaurante', 'comer', 'hambre', 'almuerzo', 'cena', 'desayuno',
      'delivery', 'pedidos ya', 'uber eats', 'rappi',
      
      // Informaci√≥n general
      'que hora es', 'qu√© hora es', 'hora actual', 'que d√≠a es', 'qu√© d√≠a es',
      'como estas', 'c√≥mo est√°s', 'como esta', 'c√≥mo est√°',
      'quien eres', 'qui√©n eres', 'que eres', 'qu√© eres',
      
      // Entretenimiento
      'chiste', 'broma', 'cancion', 'canci√≥n', 'musica', 'm√∫sica',
      'pelicula', 'pel√≠cula', 'serie', 'netflix', 'youtube',
      'futbol', 'f√∫tbol', 'deporte', 'partido', 'equipo',
      
      // Servicios generales
      'clima', 'tiempo', 'lluvia', 'sol', 'temperatura',
      'precio', 'costo', 'cuanto cuesta', 'cu√°nto cuesta',
      'horario', 'horarios', 'abierto', 'cerrado',
      'direccion', 'direcci√≥n', 'ubicacion', 'ubicaci√≥n', 'donde queda',
      'telefono', 'tel√©fono', 'contacto', 'email'
    ];
    
    const terminosMedicos = [
      'dolor', 'duele', 'molestia', 'sintoma', 's√≠ntoma', 'vision', 'visi√≥n',
      'ojo', 'ojos', 'cabeza', 'pecho', 'estomago', 'est√≥mago', 'fiebre',
      'mareo', 'nausea', 'n√°usea', 'cansancio', 'fatiga', 'tos', 'gripe',
      'resfriado', 'alergia', 'picazon', 'picaz√≥n', 'roncha', 'sarpullido',
      'medico', 'm√©dico', 'doctor', 'especialista', 'consulta', 'cita',
      'urgente', 'emergencia', 'salud', 'enfermo', 'enferma', 'malestar',
      'sobrecupo', 'atencion medica', 'atenci√≥n m√©dica', 'necesito ver',
      'quiero ver doctor', 'quiero ver m√©dico', 'busco especialista'
    ];
    
    const contieneTerminosMedicos = terminosMedicos.some(termino => 
      textoLimpio.includes(termino.toLowerCase())
    );
    
    if (contieneTerminosMedicos) {
      return false;
    }
    
    const contieneConsultaNoMedica = consultasEspecificas.some(consulta => 
      textoLimpio.includes(consulta.toLowerCase())
    );
    
    return contieneConsultaNoMedica;
  }

  function detectarEspecialidadDirecta(text) {
    const textoLimpio = text.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"");
    
    const especialidadesDirectas = {
      'oftalmologo': 'Oftalmolog√≠a', 'oftalmologia': 'Oftalmolog√≠a',
      'dermatologo': 'Dermatolog√≠a', 'dermatologia': 'Dermatolog√≠a',
      'pediatra': 'Pediatr√≠a', 'pediatria': 'Pediatr√≠a',
      'cardiologo': 'Cardiolog√≠a', 'cardiologia': 'Cardiolog√≠a',
      'neurologo': 'Neurolog√≠a', 'neurologia': 'Neurolog√≠a',
      'otorrino': 'Otorrinolaringolog√≠a', 'otorrinolaringologia': 'Otorrinolaringolog√≠a',
      'medicina familiar': 'Medicina Familiar', 'medico general': 'Medicina Familiar',
      'general': 'Medicina Familiar', 'familiar': 'Medicina Familiar',
      'traumatologo': 'Traumatolog√≠a', 'traumatologia': 'Traumatolog√≠a',
      'urologo': 'Urolog√≠a', 'urologia': 'Urolog√≠a',
      'ginecologo': 'Ginecolog√≠a', 'ginecologia': 'Ginecolog√≠a'
    };
    
    for (const [key, value] of Object.entries(especialidadesDirectas)) {
      if (textoLimpio.includes(key)) return value;
    }
    return null;
  }

  function detectarEspecialidadPorSintomas(text) {
    const textoLimpio = text.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"");
    
    // üëÅÔ∏è S√çNTOMAS OFTALMOL√ìGICOS (PRIORIDAD M√ÅXIMA)
    const sintomasOftalmologia = [
      // Problemas de visi√≥n
      'vision borrosa', 'visi√≥n borrosa', 'veo borroso', 'veo mal', 'no veo bien',
      'veo doble', 'vision doble', 'visi√≥n doble', 'diplopia',
      'ceguera', 'no veo nada', 'perdida vision', 'p√©rdida visi√≥n',
      
      // S√≠ntomas oculares espec√≠ficos
      'ojo rojo', 'ojos rojos', 'irritado', 'irritados', 'irritacion',
      'ardor en los ojos', 'quemaz√≥n ojos', 'lagrimeo', 'lagrimas',
      'dolor de ojos', 'duelen los ojos', 'ojo duele', 'dolor ocular',
      
      // üî• CR√çTICO: TODAS las variaciones de picaz√≥n en ojos
      'picazon ojos', 'picaz√≥n ojos', 'me pican los ojos', 'pican ojos',
      'comezon ojos', 'comez√≥n ojos', 'ojos con picazon', 'ojos que pican',
      'picazon en los ojos', 'picaz√≥n en los ojos', 'pican mis ojos',
      'me pica el ojo', 'me pican mis ojos', 'tengo picazon en los ojos',
      
      // Sensibilidad y molestias
      'sensible a la luz', 'fotofobia', 'molesta la luz', 'luz molesta',
      'ojos secos', 'sequedad ocular', 'ojo seco',
      'cansancio visual', 'fatiga ocular', 'ojos cansados',
      
      // Fen√≥menos visuales
      'manchas flotantes', 'moscas volantes', 'puntos negros', 'moscas',
      'destellos', 'luces', 'halos', 'aureolas',
      
      // Problemas refractivos
      'graduacion', 'graduaci√≥n', 'lentes', 'anteojos', 'gafas',
      'miopia', 'miop√≠a', 'hipermetropia', 'astigmatismo',
      
      // Ex√°menes y revisiones
      'revision ojos', 'revisi√≥n ojos', 'examen vista', 'control vista',
      'fondo de ojo', 'presion ocular', 'presi√≥n ocular', 'glaucoma'
    ];
    
    // üè• S√çNTOMAS DERMATOL√ìGICOS (SIN INCLUIR OJOS EXPL√çCITAMENTE)
    const sintomasDermatologia = [
      // Picaz√≥n corporal (EXCLUYENDO ojos expl√≠citamente)
      'picazon piel', 'picaz√≥n piel', 'me pica la piel', 'comez√≥n piel',
      'picazon cuerpo', 'picaz√≥n cuerpo', 'me pica el cuerpo',
      'picazon brazos', 'picazon piernas', 'picazon espalda',
      
      // Erupciones y lesiones
      'sarpullido', 'roncha', 'ronchas', 'erupcion', 'erupci√≥n',
      'alergia piel', 'dermatitis', 'eczema', 'urticaria',
      'granos', 'espinillas', 'acne', 'acn√©',
      
      // Lesiones espec√≠ficas
      'lunar', 'lunares', 'mancha piel', 'manchas piel',
      'verruga', 'verrugas', 'quiste', 'bulto piel',
      
      // Condiciones espec√≠ficas
      'psoriasis', 'vitiligo', 'herpes', 'hongos piel',
      'caspa', 'seborrea', 'ros√°cea', 'cuperosis'
    ];
    
    // üíì S√çNTOMAS CARDIOL√ìGICOS
    const sintomasCardiologia = [
      'dolor pecho', 'duele pecho', 'opresion pecho', 'opresi√≥n pecho',
      'palpitaciones', 'taquicardia', 'corazon late rapido', 'coraz√≥n late r√°pido',
      'arritmia', 'bradicardia', 'corazon irregular', 'coraz√≥n irregular',
      'falta aire', 'ahogo', 'disnea', 'fatiga', 'cansancio extremo',
      'mareo cardiaco', 'desmayo', 'sincope', 's√≠ncope',
      'hinchazon piernas', 'hinchaz√≥n piernas', 'edema', 'retencion liquidos'
    ];
    
    // üß† S√çNTOMAS NEUROL√ìGICOS
    const sintomasNeurologia = [
      'dolor cabeza', 'duele cabeza', 'cefalea', 'migrana', 'migra√±a',
      'jaqueca', 'dolor de cabeza intenso', 'dolor de cabeza fuerte',
      'mareo', 'mareos', 'vertigo', 'v√©rtigo', 'inestabilidad',
      'temblor', 'temblores', 'convulsion', 'convulsi√≥n', 'epilepsia',
      'entumecimiento', 'hormigueo', 'adormecimiento', 'parestesia',
      'perdida memoria', 'p√©rdida memoria', 'olvido', 'confusion',
      'debilidad muscular', 'paralisis', 'par√°lisis'
    ];
    
    // üëÇ S√çNTOMAS OTORRINOLARINGOL√ìGICOS
    const sintomasOtorrino = [
      'dolor garganta', 'duele garganta', 'dolor de garganta',
      'dolor oido', 'duele oido', 'dolor de o√≠do', 'otalgia',
      'no oigo', 'sordo', 'perdida auditiva', 'p√©rdida auditiva',
      'ronquera', 'afon√≠a', 'voz ronca', 'sin voz',
      'tapado nariz', 'congestion', 'congesti√≥n', 'sinusitis',
      'sangrado nariz', 'epistaxis', 'hemorragia nasal',
      'zumbido oido', 'tinnitus', 'acufeno'
    ];
    
    // ü©∫ S√çNTOMAS MEDICINA GENERAL/FAMILIAR
    const sintomasMedicinaGeneral = [
      'fiebre', 'temperatura', 'calentura', 'escalofrios', 'escalofr√≠os',
      'malestar general', 'decaimiento', 'astenia', 'cansancio general',
      'nausea', 'n√°usea', 'vomito', 'v√≥mito', 'gastritis',
      'dolor estomago', 'dolor de est√≥mago', 'dolor abdominal',
      'diarrea', 'estre√±imiento', 'constipacion', 'constipaci√≥n',
      'tos', 'tos seca', 'tos con flemas', 'gripe', 'resfriado',
      'dolor muscular', 'dolor articular', 'artralgia', 'mialgia'
    ];
    
    // üîç VERIFICACI√ìN JER√ÅRQUICA CON PRIORIDADES M√âDICAS
    
    // 1. M√ÅXIMA PRIORIDAD: S√≠ntomas oftalmol√≥gicos
    for (const sintoma of sintomasOftalmologia) {
      if (textoLimpio.includes(sintoma)) {
        console.log(`üéØ S√≠ntoma oftalmol√≥gico detectado: "${sintoma}"`);
        return 'Oftalmolog√≠a';
      }
    }
    
    // 2. S√≠ntomas cardiol√≥gicos (urgentes)
    for (const sintoma of sintomasCardiologia) {
      if (textoLimpio.includes(sintoma)) {
        console.log(`üéØ S√≠ntoma cardiol√≥gico detectado: "${sintoma}"`);
        return 'Cardiolog√≠a';
      }
    }
    
    // 3. S√≠ntomas neurol√≥gicos
    for (const sintoma of sintomasNeurologia) {
      if (textoLimpio.includes(sintoma)) {
        console.log(`üéØ S√≠ntoma neurol√≥gico detectado: "${sintoma}"`);
        return 'Neurolog√≠a';
      }
    }
    
    // 4. S√≠ntomas otorrinolaringol√≥gicos
    for (const sintoma of sintomasOtorrino) {
      if (textoLimpio.includes(sintoma)) {
        console.log(`üéØ S√≠ntoma otorrino detectado: "${sintoma}"`);
        return 'Otorrinolaringolog√≠a';
      }
    }
    
    // 5. S√≠ntomas dermatol√≥gicos (despu√©s de descartar ojos)
    for (const sintoma of sintomasDermatologia) {
      if (textoLimpio.includes(sintoma)) {
        console.log(`üéØ S√≠ntoma dermatol√≥gico detectado: "${sintoma}"`);
        return 'Dermatolog√≠a';
      }
    }
    
    // 6. Medicina general como √∫ltimo recurso
    for (const sintoma of sintomasMedicinaGeneral) {
      if (textoLimpio.includes(sintoma)) {
        console.log(`üéØ S√≠ntoma general detectado: "${sintoma}"`);
        return 'Medicina Familiar';
      }
    }
    
    console.log(`‚ùì No se detect√≥ especialidad espec√≠fica para: "${text}"`);
    return null;
  }

  function generarRespuestaEmpatica(texto, especialidad) {
    const textoLimpio = texto.toLowerCase();
    
    // üëÅÔ∏è Respuestas espec√≠ficas para oftalmolog√≠a
    if (especialidad === 'Oftalmolog√≠a') {
      if (textoLimpio.includes('pican') || textoLimpio.includes('picazon') || textoLimpio.includes('picaz√≥n')) {
        return "Entiendo que la picaz√≥n en los ojos es muy molesta.";
      }
      if (textoLimpio.includes('borroso') || textoLimpio.includes('veo mal')) {
        return "La visi√≥n borrosa puede ser preocupante, es importante revisarla.";
      }
      if (textoLimpio.includes('rojo') || textoLimpio.includes('irritado')) {
        return "Los ojos rojos e irritados necesitan atenci√≥n especializada.";
      }
      if (textoLimpio.includes('dolor')) {
        return "El dolor ocular no debe ignorarse, te ayudo a encontrar atenci√≥n.";
      }
      return "Los problemas oculares requieren evaluaci√≥n especializada.";
    }
    
    // üíì Respuestas para cardiolog√≠a
    if (especialidad === 'Cardiolog√≠a') {
      if (textoLimpio.includes('pecho')) {
        return "El dolor de pecho requiere evaluaci√≥n m√©dica urgente.";
      }
      if (textoLimpio.includes('palpitaciones')) {
        return "Las palpitaciones pueden ser preocupantes, es importante evaluarlas.";
      }
      return "Los s√≠ntomas card√≠acos necesitan atenci√≥n especializada.";
    }
    
    // üß† Respuestas para neurolog√≠a
    if (especialidad === 'Neurolog√≠a') {
      if (textoLimpio.includes('cabeza')) {
        return "Los dolores de cabeza persistentes merecen evaluaci√≥n neurol√≥gica.";
      }
      if (textoLimpio.includes('mareo')) {
        return "Los mareos pueden tener varias causas, es importante evaluarlos.";
      }
      return "Los s√≠ntomas neurol√≥gicos requieren atenci√≥n especializada.";
    }
    
    // üè• Respuesta gen√©rica
    return `Es importante que eval√∫es estos s√≠ntomas con un especialista.`;
  }

  function getRespuestaEspecificaNoMedica(text) {
    const textoLimpio = text.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"");
    
    // üçï Comida y restaurantes
    if (textoLimpio.includes('pizza') || textoLimpio.includes('hamburguesa') || 
        textoLimpio.includes('comida') || textoLimpio.includes('restaurant') ||
        textoLimpio.includes('comer') || textoLimpio.includes('hambre')) {
      return [
        "¬°Me da hambre solo de escucharte! üçï Pero soy tu asistente m√©dico, no delivery üòÑ\n\n¬øC√≥mo est√° tu salud? ¬øTienes alg√∫n s√≠ntoma o necesitas ver alg√∫n especialista?",
        "¬°Qu√© rico! üçΩÔ∏è Pero yo me especializo en otro tipo de 'alimentaci√≥n': ¬°cuidar tu salud!\n\n¬øHay algo m√©dico en lo que pueda ayudarte?",
        "Para eso mejor usa una app de delivery üì±üçï Yo soy experto en encontrar m√©dicos, no pizza!\n\n¬øC√≥mo te sientes hoy? ¬øNecesitas alguna consulta m√©dica?"
      ];
    }
    
    // üïê Hora y tiempo
    if (textoLimpio.includes('hora') || textoLimpio.includes('dia')) {
      return [
        "No soy un reloj, ¬°pero s√≠ soy tu asistente m√©dico! ‚è∞üë©‚Äç‚öïÔ∏è\n\n¬øHay algo relacionado con tu salud en lo que pueda ayudarte?",
        "Para eso mejor mira tu celular üì± Yo me especializo en horarios m√©dicos.\n\n¬øNecesitas alg√∫n especialista o tienes s√≠ntomas?"
      ];
    }
    
    // üéµ Entretenimiento
    if (textoLimpio.includes('musica') || textoLimpio.includes('cancion') || 
        textoLimpio.includes('pelicula') || textoLimpio.includes('serie')) {
      return [
        "¬°Me gusta el entretenimiento! üéµ Pero mi show favorito es ayudarte con tu salud ü©∫\n\n¬øC√≥mo te sientes hoy?",
        "Para eso mejor usa Spotify o Netflix üì∫ Yo soy tu asistente m√©dico personal.\n\n¬øHay alg√∫n tema de salud en el que pueda ayudarte?"
      ];
    }
    
    // ‚öΩ Deportes
    if (textoLimpio.includes('futbol') || textoLimpio.includes('deporte') || 
        textoLimpio.includes('partido')) {
      return [
        "¬°Los deportes son geniales para la salud! ‚öΩüí™ Hablando de salud...\n\n¬øC√≥mo te sientes? ¬øNecesitas alg√∫n chequeo m√©dico?",
        "Mi deporte favorito es mantener a las personas sanas üèÉ‚Äç‚ôÄÔ∏èü©∫\n\n¬øHay algo m√©dico en lo que pueda ayudarte?"
      ];
    }
    
    // üå§Ô∏è Clima
    if (textoLimpio.includes('clima') || textoLimpio.includes('tiempo') || 
        textoLimpio.includes('lluvia')) {
      return [
        "Para el clima mejor checa una app meteorol√≥gica ‚òÄÔ∏èüåßÔ∏è Yo me enfoco en el clima de tu salud.\n\n¬øC√≥mo te sientes hoy?",
        "¬°Espero que sea un buen d√≠a para cuidar tu salud! üåüü©∫\n\n¬øHay alg√∫n s√≠ntoma que te preocupe?"
      ];
    }
    
    // üõçÔ∏è Compras y precios
    if (textoLimpio.includes('precio') || textoLimpio.includes('costo') || 
        textoLimpio.includes('comprar') || textoLimpio.includes('tienda')) {
      return [
        "No manejo precios de productos, ¬°pero s√≠ el valor de tu salud! üí∞ü©∫\n\n¬øEn qu√© puedo ayudarte m√©dicamente?",
        "Para compras mejor usa otra app üõí Yo te ayudo a 'comprar' tiempo con un m√©dico r√°pido.\n\n¬øQu√© especialista necesitas?"
      ];
    }
    
    return [];
  }

  // ===============================
  // üîß FUNCIONES DE VALIDACI√ìN
  // ===============================

  function validarTelefono(telefono) {
    const pattern = /^\+56[0-9]{9}$/;
    return pattern.test(telefono);
  }

  function validarRUT(rut) {
    try {
      rut = rut.replace(/[.\-]/g, '').toUpperCase();
      if (!/^[0-9]+[0-9K]$/.test(rut)) return false;
      
      const cuerpo = rut.slice(0, -1);
      const dv = rut.slice(-1);
      let suma = 0;
      let multiplicador = 2;
      
      for (let i = cuerpo.length - 1; i >= 0; i--) {
        suma += parseInt(cuerpo[i]) * multiplicador;
        multiplicador = multiplicador < 7 ? multiplicador + 1 : 2;
      }
      
      const dvCalculado = 11 - (suma % 11);
      let dvEsperado;
      if (dvCalculado === 11) dvEsperado = '0';
      else if (dvCalculado === 10) dvEsperado = 'K';
      else dvEsperado = dvCalculado.toString();
      
      return dv === dvEsperado;
    } catch {
      return false;
    }
  }

  // ===============================
  // üóÑÔ∏è FUNCIONES DE AIRTABLE COMPLETAS
  // ===============================

  async function getEspecialidadesDisponibles() {
    try {
      const resp = await fetch(
        `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_DOCTORS_TABLE}?fields%5B%5D=Especialidad`,
        { headers: { Authorization: `Bearer ${AIRTABLE_API_KEY}` } }
      );
      const data = await resp.json();
      const especialidades = new Set();
      data.records?.forEach(record => {
        if (record.fields?.Especialidad) {
          especialidades.add(record.fields.Especialidad);
        }
      });
      return Array.from(especialidades).sort();
    } catch (err) {
      console.error("‚ùå Error obteniendo especialidades:", err);
      return ["Medicina Familiar", "Oftalmolog√≠a", "Dermatolog√≠a"];
    }
  }

  async function getDoctorName(medicoId) {
    try {
      const doctorIdArray = Array.isArray(medicoId) ? medicoId[0] : medicoId;
      const resp = await fetch(
        `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_DOCTORS_TABLE}/${doctorIdArray}`,
        { headers: { Authorization: `Bearer ${AIRTABLE_API_KEY}` } }
      );
      const data = await resp.json();
      return data.fields?.Name || "M√©dico";
    } catch (err) {
      console.error("‚ùå Error obteniendo nombre m√©dico:", err);
      return "M√©dico";
    }
  }

  async function getDoctorInfo(medicoId) {
    try {
      const doctorIdArray = Array.isArray(medicoId) ? medicoId[0] : medicoId;
      const resp = await fetch(
        `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_DOCTORS_TABLE}/${doctorIdArray}`,
        { headers: { Authorization: `Bearer ${AIRTABLE_API_KEY}` } }
      );
      const data = await resp.json();
      return {
        name: data.fields?.Name || "M√©dico",
        email: data.fields?.Email || null
      };
    } catch (err) {
      console.error("‚ùå Error obteniendo info m√©dico:", err);
      return { name: "M√©dico", email: null };
    }
  }

  // üî• FUNCI√ìN CR√çTICA: FILTRAR FECHAS PASADAS
  async function buscarSobrecupos(specialty) {
    try {
      const resp = await fetch(
        `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_ID}?maxRecords=100&sort[0][field]=Fecha&sort[0][direction]=asc`,
        { headers: { Authorization: `Bearer ${AIRTABLE_API_KEY}` } }
      );
      const data = await resp.json();
      
      if (!data.records) return [];
      
      // üìÖ FILTRAR FECHAS FUTURAS Y DISPONIBLES
      const hoy = new Date();
      hoy.setHours(0, 0, 0, 0); // Resetear hora para comparar solo fecha
      
      return data.records.filter(record => {
        const fields = record.fields || {};
        
        // Verificar especialidad y disponibilidad
        const esEspecialidadCorrecta = fields.Especialidad === specialty;
        const estaDisponible = fields.Disponible === "Si" || fields.Disponible === true;
        
        if (!esEspecialidadCorrecta || !estaDisponible) {
          return false;
        }
        
        // üî• VERIFICAR QUE LA FECHA SEA FUTURA
        if (fields.Fecha) {
          try {
            const fechaSobrecupo = new Date(fields.Fecha);
            fechaSobrecupo.setHours(0, 0, 0, 0);
            
            // Solo incluir si la fecha es hoy o futura
            const esFechaValida = fechaSobrecupo >= hoy;
            
            if (!esFechaValida) {
              console.log(`üóìÔ∏è Excluyendo sobrecupo con fecha pasada: ${fields.Fecha}`);
            }
            
            return esFechaValida;
          } catch (err) {
            console.error(`‚ùå Error procesando fecha: ${fields.Fecha}`, err);
            return false; // Excluir si la fecha no se puede procesar
          }
        }
        
        return false; // Excluir si no tiene fecha
      });
    } catch (err) {
      console.error("‚ùå Error consultando sobrecupos:", err);
      return [];
    }
  }

  async function crearPaciente(patientData) {
    try {
      if (!AIRTABLE_PATIENTS_TABLE) {
        console.error("‚ùå AIRTABLE_PATIENTS_TABLE no configurada");
        return null;
      }

      if (!patientData.name || !patientData.phone || !patientData.rut || !patientData.age) {
        console.error("‚ùå Datos de paciente incompletos:", patientData);
        return null;
      }

      const record = {
        fields: {
          Nombre: patientData.name.trim(),
          Telefono: patientData.phone.trim(),
          RUT: patientData.rut.trim(),
          Edad: parseInt(patientData.age),
          "Fecha Registro": new Date().toISOString().split('T')[0],
          "Registro Bot": true,
          Status: "active"
        }
      };

      console.log("üìù Creando paciente en Airtable:", record);

      const response = await fetch(
        `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_PATIENTS_TABLE}`,
        {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${AIRTABLE_API_KEY}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(record),
        }
      );

      const data = await response.json();

      if (!response.ok) {
        console.error("‚ùå Error respuesta Airtable:", {
          status: response.status,
          statusText: response.statusText,
          data: data
        });
        return null;
      }

      console.log("‚úÖ Paciente creado exitosamente:", data.id);
      return data.id;
    } catch (error) {
      console.error("‚ùå Error general creando paciente:", error);
      return null;
    }
  }

  async function actualizarSobrecupo(sobrecupoId, pacienteId, patientName) {
    try {
      console.log("üìù Actualizando sobrecupo:", {
        sobrecupoId,
        pacienteId, 
        patientName
      });

      const updateData = {
        fields: {
          Disponible: "No",
          "Paciente ID": pacienteId,
          "Nombre Paciente": patientName,
          "Fecha Reserva": new Date().toISOString().split('T')[0]
        }
      };

      const response = await fetch(
        `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_ID}/${sobrecupoId}`,
        {
          method: 'PATCH',
          headers: {
            Authorization: `Bearer ${AIRTABLE_API_KEY}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(updateData),
        }
      );

      const data = await response.json();

      if (!response.ok) {
        console.error("‚ùå Error actualizando sobrecupo:", {
          status: response.status,
          statusText: response.statusText,
          data: data
        });
        return false;
      }

      console.log("‚úÖ Sobrecupo actualizado exitosamente:", data.id);
      return true;
    } catch (error) {
      console.error("‚ùå Error general actualizando sobrecupo:", error);
      return false;
    }
  }
}