// /pages/api/bot.js - VERSI√ìN INTELIGENTE CON VALIDACI√ìN M√âDICA
const sessions = {};

const saludosSimples = [
  "hola","buenas","buenos dias","buenos d√≠as","buenas tardes","buenas noches",
  "hey","ey","qu√© tal","que tal","holi","holis","hello","saludos","hi"
];

// Palabras clave m√©dicas para validaci√≥n inteligente
const palabrasMedicas = [
  // S√≠ntomas generales
  'dolor', 'molestia', 'malestar', 's√≠ntoma', 'sintoma', 'enfermo', 'enferma', 'malo', 'mala',
  'cansado', 'cansada', 'agotado', 'agotada', 'd√©bil', 'mareado', 'mareada', 'nausea',
  
  // Partes del cuerpo
  'cabeza', 'est√≥mago', 'estomago', 'panza', 'barriga', 'pecho', 'coraz√≥n', 'corazon',
  'espalda', 'cuello', 'garganta', 'ojos', 'o√≠do', 'oido', 'nariz', 'boca', 'dientes',
  'brazo', 'brazos', 'pierna', 'piernas', 'pie', 'pies', 'mano', 'manos', 'rodilla',
  'hombro', 'cadera', 'hueso', 'huesos', 'articulaci√≥n', 'articulacion', 'm√∫sculo', 'musculo',
  
  // T√©rminos m√©dicos
  'consulta', 'cita', 'hora', 'm√©dico', 'medico', 'doctor', 'doctora', 'especialista',
  'chequeo', 'control', 'examen', 'revisi√≥n', 'revision', 'tratamiento', 'medicamento',
  'pastilla', 'jarabe', 'inyecci√≥n', 'inyeccion', 'cirug√≠a', 'cirugia', 'operaci√≥n', 'operacion',
  
  // Especialidades
  'pediatra', 'cardi√≥logo', 'cardiologo', 'oftalm√≥logo', 'oftalmologo', 'dermat√≥logo', 'dermatologo',
  'neur√≥logo', 'neurologo', 'traumat√≥logo', 'traumatologo', 'ginec√≥logo', 'ginecologo',
  'ur√≥logo', 'urologo', 'otorrino', 'psiquiatra', 'psic√≥logo', 'psicologo',
  
  // Condiciones espec√≠ficas
  'fiebre', 'tos', 'gripe', 'resfriado', 'alergia', 'asma', 'diabetes', 'presi√≥n', 'presion',
  'colesterol', 'tiroides', 'ansiedad', 'depresi√≥n', 'depresion', 'insomnio', 'migra√±a', 'migrana',
  'artritis', 'gastritis', 'infecci√≥n', 'infeccion', 'herida', 'corte', 'quemadura',
  
  // Urgencias
  'urgente', 'emergencia', 'grave', 'severo', 'severa', 'intenso', 'intensa', 'agudo', 'aguda',
  'sangre', 'sangrado', 'hinchaz√≥n', 'hinchazon', 'inflamaci√≥n', 'inflamacion'
];

const palabrasNoMedicas = [
  // Comida y bebida
  'pizza', 'hamburguesa', 'comida', 'comer', 'almuerzo', 'desayuno', 'cena', 'restaurante',
  'delivery', 'pedido', 'cocinar', 'receta', 'ingredientes', 'caf√©', 'bebida', 'cerveza',
  'vino', 'postre', 'dulce', 'chocolate', 'helado', 'empanada', 'asado', 'completo',
  
  // Entretenimiento
  'pel√≠cula', 'pelicula', 'serie', 'netflix', 'm√∫sica', 'musica', 'canci√≥n', 'cancion',
  'concierto', 'fiesta', 'carrete', 'bailar', 'juego', 'videojuego', 'deporte', 'f√∫tbol', 'futbol',
  
  // Trabajo y estudio
  'trabajo', 'oficina', 'jefe', 'reuni√≥n', 'reunion', 'proyecto', 'universidad', 'colegio',
  'estudiar', 'examen', 'tarea', 'clase', 'profesor', 'nota', 't√≠tulo', 'titulo',
  
  // Tecnolog√≠a
  'celular', 'computador', 'computadora', 'internet', 'wifi', 'aplicaci√≥n', 'aplicacion',
  'instagram', 'facebook', 'whatsapp', 'tiktok', 'youtube', 'google', 'amazon',
  
  // Transporte y lugares
  'auto', 'bus', 'micro', 'metro', 'uber', 'taxi', 'viaje', 'vacaciones', 'playa',
  'mall', 'supermercado', 'banco', 'farmacia', 'peluquer√≠a', 'peluqueria',
  
  // Otros
  'dinero', 'plata', 'comprar', 'vender', 'precio', 'oferta', 'descuento', 'regalo',
  'cumplea√±os', 'cumpleanos', 'matrimonio', 'boda', 'familia', 'amigo', 'amiga', 'pololo', 'polola'
];

function esSaludoSimple(text) {
  if (!text) return false;
  const limpio = text.trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"");
  return saludosSimples.includes(limpio);
}

function esMensajeMedico(text) {
  if (!text) return false;
  
  const textoLimpio = text.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"");
  
  // Contar palabras m√©dicas vs no m√©dicas
  let puntosMedicos = 0;
  let puntosNoMedicos = 0;
  
  // Verificar palabras m√©dicas
  palabrasMedicas.forEach(palabra => {
    if (textoLimpio.includes(palabra)) {
      puntosMedicos += 1;
    }
  });
  
  // Verificar palabras no m√©dicas
  palabrasNoMedicas.forEach(palabra => {
    if (textoLimpio.includes(palabra)) {
      puntosNoMedicos += 2; // Peso mayor para palabras claramente no m√©dicas
    }
  });
  
  // Patrones espec√≠ficos m√©dicos
  const patronesMedicos = [
    /me duele/i, /tengo dolor/i, /siento dolor/i, /me siento mal/i, /estoy enfermo/i,
    /necesito (\w+)√≥logo/i, /consulta con/i, /cita con/i, /hora con/i,
    /me pica/i, /me arde/i, /no puedo/i, /dificultad para/i,
    /desde hace/i, /desde ayer/i, /desde la semana/i,
    /urgente/i, /grave/i, /preocupa/i, /raro/i, /extra√±o/i
  ];
  
  patronesMedicos.forEach(patron => {
    if (patron.test(textoLimpio)) {
      puntosMedicos += 3;
    }
  });
  
  // Si es claramente no m√©dico, retornar false
  if (puntosNoMedicos > puntosMedicos) {
    return false;
  }
  
  // Si tiene al menos una palabra m√©dica o patr√≥n m√©dico, es probable que sea m√©dico
  return puntosMedicos > 0;
}

function generarRespuestaNoMedica(text) {
  const textoLimpio = text.toLowerCase();
  
  // Respuestas espec√≠ficas seg√∫n el contexto
  if (textoLimpio.includes('pizza') || textoLimpio.includes('comida') || textoLimpio.includes('comer')) {
    return "¬°Jaja! Me encanta que tengas buen apetito, pero yo soy especialista en citas m√©dicas, no en delivery üòÑ\n\n¬øHay algo relacionado con tu salud en lo que pueda ayudarte? Por ejemplo, si tienes alg√∫n s√≠ntoma o necesitas una consulta m√©dica.";
  }
  
  if (textoLimpio.includes('trabajo') || textoLimpio.includes('estudio')) {
    return "Entiendo que el trabajo y los estudios pueden ser estresantes üòä\n\n¬øQuiz√°s necesitas una consulta m√©dica relacionada? Por ejemplo, si tienes estr√©s, dolores por mala postura, o quieres un chequeo general.";
  }
  
  if (textoLimpio.includes('deporte') || textoLimpio.includes('ejercicio')) {
    return "¬°Qu√© bueno que te guste el deporte! üèÉ‚Äç‚ôÇÔ∏è\n\n¬øNecesitas alguna consulta m√©dica deportiva? Por ejemplo, para una lesi√≥n, chequeo antes de hacer ejercicio, o consulta con traumat√≥logo.";
  }
  
  if (textoLimpio.includes('amor') || textoLimpio.includes('pareja') || textoLimpio.includes('coraz√≥n roto')) {
    return "Los temas del coraz√≥n son importantes üíô\n\n¬øTe refieres a algo m√©dico? Por ejemplo, consulta cardiol√≥gica, terapia psicol√≥gica, o alg√∫n s√≠ntoma f√≠sico relacionado con el estr√©s emocional.";
  }
  
  // Respuesta gen√©rica emp√°tica
  return "Entiendo tu consulta, pero soy especialista en ayudarte a encontrar atenci√≥n m√©dica ü©∫\n\n¬øHay algo relacionado con tu salud en lo que pueda ayudarte? Por ejemplo:\n‚Ä¢ S√≠ntomas que te preocupen\n‚Ä¢ Necesidad de alg√∫n especialista\n‚Ä¢ Chequeos m√©dicos\n‚Ä¢ Consultas de urgencia";
}

function validarRUT(rut) {
  rut = rut.replace(/[.\-]/g, '').toUpperCase();
  if (!/^[0-9]+[0-9K]$/.test(rut)) return false;
  const cuerpo = rut.slice(0, -1);
  const dv = rut.slice(-1);
  let suma = 0;
  let multiplicador = 2;
  for (let i = cuerpo.length - 1; i >= 0; i--) {
    suma += parseInt(cuerpo[i]) * multiplicador;
    multiplicador = multiplicador < 7 ? multiplicador + 1 : 2;
  }
  const dvCalculado = 11 - (suma % 11);
  let dvEsperado;
  if (dvCalculado === 11) dvEsperado = '0';
  else if (dvCalculado === 10) dvEsperado = 'K';
  else dvEsperado = dvCalculado.toString();
  return dv === dvEsperado;
}

function detectarEspecialidadDirecta(text) {
  const textoLimpio = text.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g,"");
  const especialidadesDirectas = {
    'reumatologo': 'Reumatolog√≠a', 'reumatologia': 'Reumatolog√≠a',
    'traumatologo': 'Traumatolog√≠a', 'traumatologia': 'Traumatolog√≠a',
    'oftalmologo': 'Oftalmolog√≠a', 'oftalmologia': 'Oftalmolog√≠a',
    'dermatologo': 'Dermatolog√≠a', 'dermatologia': 'Dermatolog√≠a',
    'pediatra': 'Pediatr√≠a', 'pediatria': 'Pediatr√≠a',
    'cardiologo': 'Cardiolog√≠a', 'cardiologia': 'Cardiolog√≠a',
    'neurologo': 'Neurolog√≠a', 'neurologia': 'Neurolog√≠a',
    'otorrino': 'Otorrinolaringolog√≠a', 'otorrinolaringologia': 'Otorrinolaringolog√≠a',
    'medicina familiar': 'Medicina Familiar', 'medico general': 'Medicina Familiar',
    'general': 'Medicina Familiar', 'familiar': 'Medicina Familiar',
    'urologo': 'Urolog√≠a', 'urologia': 'Urolog√≠a',
    'ginecologo': 'Ginecolog√≠a', 'ginecologia': 'Ginecolog√≠a',
    'psiquiatra': 'Psiquiatr√≠a', 'psiquiatria': 'Psiquiatr√≠a',
    'endocrinologo': 'Endocrinolog√≠a', 'endocrinologia': 'Endocrinolog√≠a'
  };
  for (const [key, value] of Object.entries(especialidadesDirectas)) {
    if (textoLimpio.includes(key)) return value;
  }
  return null;
}

async function getEspecialidadesDisponibles() {
  try {
    const resp = await fetch(
      `https://api.airtable.com/v0/${process.env.AIRTABLE_BASE_ID}/${process.env.AIRTABLE_TABLE_ID}?maxRecords=100`,
      { headers: { Authorization: `Bearer ${process.env.AIRTABLE_API_KEY}` } }
    );
    const data = await resp.json();
    const records = data.records || [];
    const especialidades = [...new Set(records.map(r => r.fields?.Especialidad).filter(Boolean))];
    return especialidades;
  } catch (err) {
    console.error("‚ùå Error obteniendo especialidades:", err);
    return ['Medicina Familiar', 'Cardiolog√≠a', 'Pediatr√≠a', 'Dermatolog√≠a', 'Oftalmolog√≠a'];
  }
}

async function getDoctorInfo(doctorId) {
  try {
    const response = await fetch(
      `https://api.airtable.com/v0/${process.env.AIRTABLE_BASE_ID}/${process.env.AIRTABLE_DOCTORS_TABLE}/${doctorId}`,
      { headers: { Authorization: `Bearer ${process.env.AIRTABLE_API_KEY}` } }
    );
    if (!response.ok) return { name: doctorId, seguros: "Consultar en cl√≠nica" };
    const data = await response.json();
    return {
      name: data.fields?.Name || doctorId,
      seguros: data.fields?.Seguros || "Consultar en cl√≠nica",
      atiende: data.fields?.Atiende
    };
  } catch (error) {
    return { name: doctorId, seguros: "Consultar en cl√≠nica" };
  }
}

async function getDoctorName(doctorId) {
  const info = await getDoctorInfo(doctorId);
  return info.name;
}

function formatDate(dateString) {
  try {
    const date = new Date(dateString);
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
  } catch (error) {
    return dateString; // Fallback al string original
  }
}

async function filterSobrecuposByAge(records, age) {
  const isChild = age < 16;
  const compatibleRecords = [];
  
  for (const record of records) {
    const medicoId = Array.isArray(record.fields["M√©dico"]) 
      ? record.fields["M√©dico"][0] 
      : record.fields["M√©dico"];
    
    try {
      const doctorInfo = await getDoctorInfo(medicoId);
      const atiendePaciente = doctorInfo.atiende;
      
      // Si no especifica, asumimos que atiende ambos
      if (!atiendePaciente || atiendePaciente === "Ambos") {
        compatibleRecords.push(record);
      } else if (isChild && atiendePaciente === "Ni√±os") {
        compatibleRecords.push(record);
      } else if (!isChild && atiendePaciente === "Adultos") {
        compatibleRecords.push(record);
      }
    } catch (error) {
      console.error("Error verificando m√©dico:", error);
      // En caso de error, incluimos el registro
      compatibleRecords.push(record);
    }
  }
  
  return compatibleRecords;
}

export default async function handler(req, res) {
  if (req.method !== "POST") return res.status(405).json({ text: "M√©todo no permitido" });

  const {
    OPENAI_API_KEY, AIRTABLE_API_KEY, AIRTABLE_BASE_ID, AIRTABLE_TABLE_ID,
    AIRTABLE_DOCTORS_TABLE, AIRTABLE_PATIENTS_TABLE, SENDGRID_API_KEY, SENDGRID_FROM_EMAIL
  } = process.env;

  const { message, session: prevSession, from = "webuser", force_gpt } = req.body;
  const text = (message || "").trim();

  if (!AIRTABLE_API_KEY || !AIRTABLE_BASE_ID || !AIRTABLE_TABLE_ID) {
    return res.json({ text: "‚ùå Error de configuraci√≥n b√°sica. Contacta soporte." });
  }

  sessions[from] = prevSession || {};

  // 1. Manejo de sesiones existentes PRIMERO (antes de cualquier validaci√≥n)
  if (sessions[from]?.stage) {
    const currentSession = sessions[from];
    
    switch (currentSession.stage) {
      case 'awaiting-confirmation':
        if (/s√≠|si|yes|ok|est√° bien|esta bien|perfecto|vale|confirmo|acepto/i.test(text)) {
          sessions[from] = { ...currentSession, stage: 'awaiting-name' };
          return res.json({
            text: "¬°Perfecto! Para reservar tu sobrecupo necesito algunos datos.\n\n¬øCu√°l es tu nombre completo?",
            session: sessions[from]
          });
        } else if (/no|nope|otra|diferente|cambiar/i.test(text)) {
          currentSession.attempts = (currentSession.attempts || 0) + 1;
          if (currentSession.attempts >= 3) {
            delete sessions[from];
            return res.json({
              text: "Entiendo que ninguna opci√≥n te convence. ¬øTe gustar√≠a que te contacte cuando tengamos m√°s disponibilidad de tu especialidad?"
            });
          }
          
          const nextOption = currentSession.records[currentSession.attempts];
          if (nextOption) {
            const fields = nextOption.fields;
            const clin = fields["Cl√≠nica"] || fields["Clinica"] || "Cl√≠nica";
            const dir = fields["Direcci√≥n"] || fields["Direccion"] || "Direcci√≥n por confirmar";
            const medicoId = Array.isArray(fields["M√©dico"]) ? fields["M√©dico"][0] : fields["M√©dico"];
            const doctorInfo = await getDoctorInfo(medicoId);
            const fechaFormateada = formatDate(fields.Fecha);
            
            sessions[from] = currentSession;
            return res.json({
              text: `Te muestro otra opci√≥n:\n\nüë®‚Äç‚öïÔ∏è Dr. ${doctorInfo.name}\nüìç ${clin}\nüó∫Ô∏è ${dir}\nüí≥ Seguros: ${doctorInfo.seguros}\nüìÖ ${fechaFormateada} a las ${fields.Hora}\n\n¬øTe sirve esta?`,
              session: sessions[from]
            });
          }
        }
        break;

      case 'awaiting-name':
        if (text.length < 3) {
          return res.json({
            text: "Por favor, ingresa tu nombre completo para continuar.",
            session: sessions[from]
          });
        }
        sessions[from] = { ...currentSession, stage: 'awaiting-age', patientName: text };
        return res.json({
          text: `Gracias ${text}. Ahora necesito saber tu edad para verificar que el m√©dico sea apropiado.\n\n¬øCu√°ntos a√±os tienes?`,
          session: sessions[from]
        });

      case 'awaiting-age':
        const age = parseInt(text.trim());
        if (isNaN(age) || age < 0 || age > 120) {
          return res.json({
            text: "Por favor ingresa una edad v√°lida (ejemplo: 25)",
            session: sessions[from]
          });
        }
        
        const isChild = age < 16;
        
        // Verificar compatibilidad m√©dico-edad
        const sobrecupoSeleccionado = currentSession.records[currentSession.attempts || 0];
        if (sobrecupoSeleccionado) {
          const medicoId = Array.isArray(sobrecupoSeleccionado.fields["M√©dico"]) 
            ? sobrecupoSeleccionado.fields["M√©dico"][0] 
            : sobrecupoSeleccionado.fields["M√©dico"];
          
          try {
            const doctorResponse = await fetch(
              `https://api.airtable.com/v0/${process.env.AIRTABLE_BASE_ID}/${process.env.AIRTABLE_DOCTORS_TABLE}/${medicoId}`,
              { headers: { Authorization: `Bearer ${process.env.AIRTABLE_API_KEY}` } }
            );
            
            if (doctorResponse.ok) {
              const doctorData = await doctorResponse.json();
              const atiendePaciente = doctorData.fields?.["Atiende"];
              
              // Verificar compatibilidad
              if (atiendePaciente && atiendePaciente !== "Ambos") {
                if ((isChild && atiendePaciente === "Adultos") || 
                    (!isChild && atiendePaciente === "Ni√±os")) {
                  
                  // Buscar m√©dico alternativo compatible
                  const sobrecuposCompatibles = currentSession.records.filter(record => {
                    // Aqu√≠ necesitar√≠amos verificar cada m√©dico, pero por simplicidad
                    // buscaremos la siguiente opci√≥n disponible
                    return true;
                  });
                  
                  if (sobrecuposCompatibles.length > 1) {
                    currentSession.attempts = (currentSession.attempts || 0) + 1;
                    const nextSobrecupo = sobrecuposCompatibles[currentSession.attempts];
                    
                    if (nextSobrecupo) {
                      const fields = nextSobrecupo.fields;
                      const clin = fields["Cl√≠nica"] || fields["Clinica"] || "Cl√≠nica";
                      const dir = fields["Direcci√≥n"] || fields["Direccion"] || "Direcci√≥n por confirmar";
                      const nextMedicoId = Array.isArray(fields["M√©dico"]) ? fields["M√©dico"][0] : fields["M√©dico"];
                      const doctorInfo = await getDoctorInfo(nextMedicoId);
                      const fechaFormateada = formatDate(fields.Fecha);
                      
                      sessions[from] = { ...currentSession, patientAge: age };
                      
                      return res.json({
                        text: `Perfecto. He encontrado un m√©dico m√°s apropiado para ${isChild ? 'tu edad' : 'adultos'}:\n\n‚úÖ Nueva opci√≥n:\nüë®‚Äç‚öïÔ∏è Dr. ${doctorInfo.name}\nüìç ${clin}\nüó∫Ô∏è ${dir}\nüí≥ Seguros: ${doctorInfo.seguros}\nüìÖ ${fechaFormateada} a las ${fields.Hora}\n\n¬øTe sirve esta opci√≥n? Confirma con "s√≠".`,
                        session: sessions[from]
                      });
                    }
                  }
                  
                  return res.json({
                    text: `Lo siento, el m√©dico disponible ${isChild ? 'solo atiende adultos' : 'es pediatra y solo atiende ni√±os'}.\n\n¬øTe gustar√≠a que busque disponibilidad de otro m√©dico apropiado para ${isChild ? 'menores' : 'adultos'}?`
                  });
                }
              }
            }
          } catch (error) {
            console.error("Error verificando m√©dico:", error);
          }
        }
        
        sessions[from] = { ...currentSession, stage: 'awaiting-rut', patientAge: age };
        return res.json({
          text: `Perfecto ${isChild ? 'üë∂' : 'üë§'} Ahora necesito tu RUT (con gui√≥n, ej: 12345678-9)`,
          session: sessions[from]
        });

      case 'awaiting-rut':
        if (!validarRUT(text)) {
          return res.json({
            text: "RUT inv√°lido. Por favor ingresa tu RUT correctamente (ej: 12345678-9)",
            session: sessions[from]
          });
        }
        sessions[from] = { ...currentSession, stage: 'awaiting-phone', patientRut: text };
        return res.json({
          text: "Perfecto. ¬øCu√°l es tu n√∫mero de tel√©fono?",
          session: sessions[from]
        });

      case 'awaiting-phone':
        if (!/^(\+56)?[0-9]{8,9}$/.test(text.replace(/\s/g, ''))) {
          return res.json({
            text: "Por favor ingresa un n√∫mero de tel√©fono v√°lido (8 o 9 d√≠gitos)",
            session: sessions[from]
          });
        }
        sessions[from] = { ...currentSession, stage: 'awaiting-email', patientPhone: text };
        return res.json({
          text: "Excelente. Por √∫ltimo, ¬øcu√°l es tu email?",
          session: sessions[from]
        });

      case 'awaiting-email':
        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(text)) {
          return res.json({
            text: "Por favor ingresa un email v√°lido",
            session: sessions[from]
          });
        }
        
        // Crear paciente con edad
        const pacienteData = {
          "Nombre": currentSession.patientName,
          "RUT": currentSession.patientRut,
          "Tel√©fono": currentSession.patientPhone,
          "Email": text,
          "Edad": currentSession.patientAge
        };
        
        let pacienteId = null;
        try {
          if (AIRTABLE_PATIENTS_TABLE) {
            const pacienteResponse = await fetch(
              `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_PATIENTS_TABLE}`,
              {
                method: "POST",
                headers: {
                  Authorization: `Bearer ${AIRTABLE_API_KEY}`,
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({
                  fields: pacienteData
                })
              }
            );
            
            if (pacienteResponse.ok) {
              const pacienteResult = await pacienteResponse.json();
              pacienteId = pacienteResult.id;
              console.log("‚úÖ Paciente creado:", pacienteId);
            }
          }
        } catch (error) {
          console.error("‚ùå Error creando paciente:", error);
        }
        
        delete sessions[from];
        return res.json({
          text: `¬°Listo ${currentSession.patientName}! üéâ\n\nTu sobrecupo est√° confirmado. Te llegar√° un email de confirmaci√≥n y te contactaremos por WhatsApp.\n\nTu cita est√° confirmada.`
        });

      default:
        break;
    }
  }

  // 2. VALIDACI√ìN INTELIGENTE: ¬øEs un mensaje m√©dico? (solo si no hay sesi√≥n activa)
  if (!force_gpt && !esMensajeMedico(text) && !esSaludoSimple(text)) {
    return res.json({ 
      text: generarRespuestaNoMedica(text),
      session: sessions[from]
    });
  }

  // 3. Manejo de saludos simples con OpenAI para mayor naturalidad
  if (esSaludoSimple(text) && OPENAI_API_KEY) {
    try {
      const aiRes = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          temperature: 0.8,
          max_tokens: 60,
          messages: [
            {
              role: "system",
              content: "Eres Sobrecupos IA, asistente m√©dico chileno muy emp√°tico y natural. Responde a saludos de forma c√°lida, breve y pregunta qu√© s√≠ntomas o especialidad m√©dica necesitan. Usa emojis m√©dicos apropiados. M√°ximo 2 l√≠neas."
            },
            { role: "user", content: text }
          ]
        })
      });
      const data = await aiRes.json();
      const response = data.choices?.[0]?.message?.content?.trim() || 
        "¬°Hola! üòä ¬øEn qu√© te puedo ayudar? Cu√©ntame tus s√≠ntomas o qu√© especialista necesitas.";
      
      return res.json({ text: response, session: sessions[from] });
    } catch (err) {
      return res.json({ 
        text: "¬°Hola! üòä ¬øEn qu√© te puedo ayudar? Cu√©ntame tus s√≠ntomas o qu√© especialista necesitas.",
        session: sessions[from]
      });
    }
  }

  // 4. Detectar especialidad directa
  const especialidadDirecta = detectarEspecialidadDirecta(text);
  
  if (especialidadDirecta) {
    const especialidadesDisponibles = await getEspecialidadesDisponibles();
    
    if (!especialidadesDisponibles.includes(especialidadDirecta)) {
      return res.json({
        text: `Entiendo que necesitas ${especialidadDirecta} ü©∫\n\nLamentablemente no tengo sobrecupos disponibles en este momento, pero puedo conseguirte una cita si me dejas tus datos para contactarte apenas tengamos disponibilidad.\n\n¬øTe gustar√≠a que te contacte cuando tengamos ${especialidadDirecta} disponible?`
      });
    }
    
    const specialty = especialidadDirecta;
    
    // Respuesta emp√°tica con OpenAI
    let respuestaEmpatica = "";
    if (OPENAI_API_KEY) {
      try {
        const empatRes = await fetch("https://api.openai.com/v1/chat/completions", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${OPENAI_API_KEY}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            model: "gpt-4o-mini",
            temperature: 0.7,
            max_tokens: 40,
            messages: [
              {
                role: "system",
                content: "Eres Sobrecupos IA, asistente m√©dico chileno emp√°tico. Responde con una frase breve (m√°x 2 l√≠neas) mostrando comprensi√≥n al usuario que busca una especialidad espec√≠fica. No menciones 'Sobrecupos IA' ni uses comillas."
              },
              { role: "user", content: `Usuario busca: "${specialty}"` }
            ]
          })
        });
        const empatJson = await empatRes.json();
        respuestaEmpatica = empatJson.choices?.[0]?.message?.content?.trim() || "";
      } catch (err) {
        respuestaEmpatica = "Entiendo que necesitas atenci√≥n especializada.";
      }
    }

    // Buscar sobrecupos disponibles
    let records = [];
    try {
      const resp = await fetch(
        `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_ID}?maxRecords=100`,
        { headers: { Authorization: `Bearer ${AIRTABLE_API_KEY}` } }
      );
      const data = await resp.json();
      records = data.records || [];
    } catch (err) {
      console.error("‚ùå Error Airtable:", err);
      return res.json({ text: "Error consultando disponibilidad. Intenta m√°s tarde." });
    }

    const available = records.filter(r => {
      const fields = r.fields || {};
      return (
        (fields.Especialidad === specialty) &&
        (fields.Disponible === "Si" || fields.Disponible === true)
      );
    });

    if (available.length === 0) {
      return res.json({
        text: `${respuestaEmpatica}\n\nLamentablemente no tengo sobrecupos de ${specialty} disponibles en este momento.\n\n¬øTe gustar√≠a que te contacte cuando tengamos disponibilidad?`
      });
    }

    const first = available[0].fields;
    const clin = first["Cl√≠nica"] || first["Clinica"] || "Cl√≠nica";
    const dir = first["Direcci√≥n"] || first["Direccion"] || "Direcci√≥n por confirmar";
    const medicoId = Array.isArray(first["M√©dico"]) ? first["M√©dico"][0] : first["M√©dico"];
    const doctorInfo = await getDoctorInfo(medicoId);
    const fechaFormateada = formatDate(first.Fecha);

    sessions[from] = {
      stage: 'awaiting-confirmation',
      specialty,
      records: available,
      attempts: 0
    };

    return res.json({
      text: `${respuestaEmpatica}\n\n‚úÖ Encontr√© un sobrecupo de ${specialty}:\n\nüë®‚Äç‚öïÔ∏è Dr. ${doctorInfo.name}\nüìç ${clin}\nüó∫Ô∏è ${dir}\nüí≥ Seguros: ${doctorInfo.seguros}\nüìÖ ${fechaFormateada} a las ${first.Hora}\n\n¬øTe sirve? Confirma con "s√≠".`,
      session: sessions[from]
    });
  }

  // 5. An√°lisis con OpenAI para s√≠ntomas
  if (OPENAI_API_KEY) {
    const especialidadesDisponibles = await getEspecialidadesDisponibles();
    const especialidadesString = especialidadesDisponibles.join(", ");

    let rawEsp = "";
    try {
      const aiRes = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${OPENAI_API_KEY}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          temperature: 0,
          max_tokens: 20,
          messages: [
            {
              role: "system",
              content: `Eres Sobrecupos IA, asistente m√©dico emp√°tico. Dado un s√≠ntoma o consulta m√©dica, responde SOLO con EXACTAMENTE una de las siguientes especialidades disponibles (y nada m√°s): ${especialidadesString}. Elige la especialidad que con mayor probabilidad se encarga de ese s√≠ntoma. Si mencionan un ni√±o, elige Pediatr√≠a. Si no puedes determinar una especialidad espec√≠fica, elige Medicina Familiar.`
            },
            { role: "user", content: `Paciente: "${text}"` }
          ]
        })
      });
      const j = await aiRes.json();
      rawEsp = j.choices?.[0]?.message?.content?.trim() || "";
    } catch (err) {
      console.error("‚ùå Error OpenAI:", err);
      return res.json({ text: "Lo siento, no entend√≠ bien. ¬øPuedes describirme tus s√≠ntomas de otra forma?" });
    }

    const specialty = especialidadesDisponibles.includes(rawEsp) ? rawEsp : "Medicina Familiar";

    // Generar respuesta emp√°tica
    let respuestaEmpatica = "";
    if (OPENAI_API_KEY) {
      try {
        const empatRes = await fetch("https://api.openai.com/v1/chat/completions", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${OPENAI_API_KEY}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            model: "gpt-4o-mini",
            temperature: 0.8,
            max_tokens: 50,
            messages: [
              {
                role: "system",
                content: "Eres Sobrecupos IA, asistente m√©dico chileno muy emp√°tico. Responde con una frase breve (m√°x 2 l√≠neas) mostrando comprensi√≥n y empat√≠a hacia los s√≠ntomas del paciente. S√© c√°lido y profesional."
              },
              { role: "user", content: `Paciente dice: "${text}"` }
            ]
          })
        });
        const empatJson = await empatRes.json();
        respuestaEmpatica = empatJson.choices?.[0]?.message?.content?.trim() || "";
      } catch (err) {
        respuestaEmpatica = "Entiendo tu preocupaci√≥n y quiero ayudarte.";
      }
    }

    // Buscar sobrecupos
    let records = [];
    try {
      const resp = await fetch(
        `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_ID}?maxRecords=100`,
        { headers: { Authorization: `Bearer ${AIRTABLE_API_KEY}` } }
      );
      const data = await resp.json();
      records = data.records || [];
    } catch (err) {
      console.error("‚ùå Error consultando Sobrecupos:", err);
      return res.json({ text: "Error consultando disponibilidad. Intenta m√°s tarde." });
    }

    const available = records.filter(r => {
      const fields = r.fields || {};
      return (
        (fields.Especialidad === specialty) &&
        (fields.Disponible === "Si" || fields.Disponible === true)
      );
    });

    if (available.length === 0) {
      return res.json({
        text: `${respuestaEmpatica}\n\nLamentablemente no tengo sobrecupos de ${specialty} disponibles en este momento.\n\n¬øTe gustar√≠a que te contacte cuando tengamos disponibilidad?`
      });
    }

    const first = available[0].fields;
    const clin = first["Cl√≠nica"] || first["Clinica"] || "Cl√≠nica";
    const dir = first["Direcci√≥n"] || first["Direccion"] || "Direcci√≥n por confirmar";
    const medicoId = Array.isArray(first["M√©dico"]) ? first["M√©dico"][0] : first["M√©dico"];
    const doctorInfo = await getDoctorInfo(medicoId);
    const fechaFormateada = formatDate(first.Fecha);

    sessions[from] = {
      stage: 'awaiting-confirmation',
      specialty,
      records: available,
      attempts: 0
    };

    return res.json({
      text: `${respuestaEmpatica}\n\n‚úÖ Encontr√© un sobrecupo de ${specialty}:\n\nüë®‚Äç‚öïÔ∏è Dr. ${doctorInfo.name}\nüìç ${clin}\nüó∫Ô∏è ${dir}\nüí≥ Seguros: ${doctorInfo.seguros}\nüìÖ ${fechaFormateada} a las ${first.Hora}\n\n¬øTe sirve? Confirma con "s√≠".`,
      session: sessions[from]
    });
  }

  // 6. Respuesta de fallback inteligente
  return res.json({
    text: "Para ayudarte mejor, ¬øpodr√≠as contarme:\n‚Ä¢ ¬øQu√© s√≠ntomas tienes?\n‚Ä¢ ¬øQu√© especialidad m√©dica necesitas?\n‚Ä¢ ¬øEs algo urgente?\n\nEstoy aqu√≠ para encontrarte la mejor atenci√≥n m√©dica ü©∫"
  });
}